{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.iterator.some.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ArrayQueue } from '../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Color } from '../../../base/common/color.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { EDITOR_FONT_DEFAULTS, filterValidationDecorations } from '../config/editorOptions.js';\nimport { CursorsController } from '../cursor/cursor.js';\nimport { CursorConfiguration } from '../cursorCommon.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport * as textModelEvents from '../textModelEvents.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { tokenizeLineToHTML } from '../languages/textToHtmlTokenizer.js';\nimport * as viewEvents from '../viewEvents.js';\nimport { ViewLayout } from '../viewLayout/viewLayout.js';\nimport { MinimapTokensColorTracker } from './minimapTokensColorTracker.js';\nimport { MinimapLinesRenderingData, OverviewRulerDecorationsGroup, ViewLineRenderingData } from '../viewModel.js';\nimport { ViewModelDecorations } from './viewModelDecorations.js';\nimport { FocusChangedEvent, HiddenAreasChangedEvent, ModelContentChangedEvent, ModelDecorationsChangedEvent, ModelLanguageChangedEvent, ModelLanguageConfigurationChangedEvent, ModelOptionsChangedEvent, ModelTokensChangedEvent, ReadOnlyEditAttemptEvent, ScrollChangedEvent, ViewModelEventDispatcher, ViewZonesChangedEvent } from '../viewModelEventDispatcher.js';\nimport { ViewModelLinesFromModelAsIs, ViewModelLinesFromProjectedModel } from './viewModelLines.js';\nimport { GlyphMarginLanesModel } from './glyphLanesModel.js';\nconst USE_IDENTITY_LINES_COLLECTION = true;\nexport class ViewModel extends Disposable {\n  constructor(editorId, configuration, model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, scheduleAtNextAnimationFrame, languageConfigurationService, _themeService, _attachedView, _transactionalTarget) {\n    super();\n    this.languageConfigurationService = languageConfigurationService;\n    this._themeService = _themeService;\n    this._attachedView = _attachedView;\n    this._transactionalTarget = _transactionalTarget;\n    this.hiddenAreasModel = new HiddenAreasModel();\n    this.previousHiddenAreas = [];\n    this._editorId = editorId;\n    this._configuration = configuration;\n    this.model = model;\n    this._eventDispatcher = new ViewModelEventDispatcher();\n    this.onEvent = this._eventDispatcher.onEvent;\n    this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n    this._updateConfigurationViewLineCount = this._register(new RunOnceScheduler(() => this._updateConfigurationViewLineCountNow(), 0));\n    this._hasFocus = false;\n    this._viewportStart = ViewportStart.create(this.model);\n    this.glyphLanes = new GlyphMarginLanesModel(0);\n    if (USE_IDENTITY_LINES_COLLECTION && this.model.isTooLargeForTokenization()) {\n      this._lines = new ViewModelLinesFromModelAsIs(this.model);\n    } else {\n      const options = this._configuration.options;\n      const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n      const wrappingStrategy = options.get(140 /* EditorOption.wrappingStrategy */);\n      const wrappingInfo = options.get(147 /* EditorOption.wrappingInfo */);\n      const wrappingIndent = options.get(139 /* EditorOption.wrappingIndent */);\n      const wordBreak = options.get(130 /* EditorOption.wordBreak */);\n      this._lines = new ViewModelLinesFromProjectedModel(this._editorId, this.model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, fontInfo, this.model.getOptions().tabSize, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent, wordBreak);\n    }\n    this.coordinatesConverter = this._lines.createCoordinatesConverter();\n    this._cursor = this._register(new CursorsController(model, this, this.coordinatesConverter, this.cursorConfig));\n    this.viewLayout = this._register(new ViewLayout(this._configuration, this.getLineCount(), scheduleAtNextAnimationFrame));\n    this._register(this.viewLayout.onDidScroll(e => {\n      if (e.scrollTopChanged) {\n        this._handleVisibleLinesChanged();\n      }\n      if (e.scrollTopChanged) {\n        this._viewportStart.invalidate();\n      }\n      this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewScrollChangedEvent(e));\n      this._eventDispatcher.emitOutgoingEvent(new ScrollChangedEvent(e.oldScrollWidth, e.oldScrollLeft, e.oldScrollHeight, e.oldScrollTop, e.scrollWidth, e.scrollLeft, e.scrollHeight, e.scrollTop));\n    }));\n    this._register(this.viewLayout.onDidContentSizeChange(e => {\n      this._eventDispatcher.emitOutgoingEvent(e);\n    }));\n    this._decorations = new ViewModelDecorations(this._editorId, this.model, this._configuration, this._lines, this.coordinatesConverter);\n    this._registerModelEvents();\n    this._register(this._configuration.onDidChangeFast(e => {\n      try {\n        const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n        this._onConfigurationChanged(eventsCollector, e);\n      } finally {\n        this._eventDispatcher.endEmitViewEvents();\n      }\n    }));\n    this._register(MinimapTokensColorTracker.getInstance().onDidChange(() => {\n      this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewTokensColorsChangedEvent());\n    }));\n    this._register(this._themeService.onDidColorThemeChange(theme => {\n      this._invalidateDecorationsColorCache();\n      this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewThemeChangedEvent(theme));\n    }));\n    this._updateConfigurationViewLineCountNow();\n  }\n  dispose() {\n    // First remove listeners, as disposing the lines might end up sending\n    // model decoration changed events ... and we no longer care about them ...\n    super.dispose();\n    this._decorations.dispose();\n    this._lines.dispose();\n    this._viewportStart.dispose();\n    this._eventDispatcher.dispose();\n  }\n  createLineBreaksComputer() {\n    return this._lines.createLineBreaksComputer();\n  }\n  addViewEventHandler(eventHandler) {\n    this._eventDispatcher.addViewEventHandler(eventHandler);\n  }\n  removeViewEventHandler(eventHandler) {\n    this._eventDispatcher.removeViewEventHandler(eventHandler);\n  }\n  _updateConfigurationViewLineCountNow() {\n    this._configuration.setViewLineCount(this._lines.getViewLineCount());\n  }\n  getModelVisibleRanges() {\n    const linesViewportData = this.viewLayout.getLinesViewportData();\n    const viewVisibleRange = new Range(linesViewportData.startLineNumber, this.getLineMinColumn(linesViewportData.startLineNumber), linesViewportData.endLineNumber, this.getLineMaxColumn(linesViewportData.endLineNumber));\n    const modelVisibleRanges = this._toModelVisibleRanges(viewVisibleRange);\n    return modelVisibleRanges;\n  }\n  visibleLinesStabilized() {\n    const modelVisibleRanges = this.getModelVisibleRanges();\n    this._attachedView.setVisibleLines(modelVisibleRanges, true);\n  }\n  _handleVisibleLinesChanged() {\n    const modelVisibleRanges = this.getModelVisibleRanges();\n    this._attachedView.setVisibleLines(modelVisibleRanges, false);\n  }\n  setHasFocus(hasFocus) {\n    this._hasFocus = hasFocus;\n    this._cursor.setHasFocus(hasFocus);\n    this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewFocusChangedEvent(hasFocus));\n    this._eventDispatcher.emitOutgoingEvent(new FocusChangedEvent(!hasFocus, hasFocus));\n  }\n  onCompositionStart() {\n    this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewCompositionStartEvent());\n  }\n  onCompositionEnd() {\n    this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewCompositionEndEvent());\n  }\n  _captureStableViewport() {\n    // We might need to restore the current start view range, so save it (if available)\n    // But only if the scroll position is not at the top of the file\n    if (this._viewportStart.isValid && this.viewLayout.getCurrentScrollTop() > 0) {\n      const previousViewportStartViewPosition = new Position(this._viewportStart.viewLineNumber, this.getLineMinColumn(this._viewportStart.viewLineNumber));\n      const previousViewportStartModelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(previousViewportStartViewPosition);\n      return new StableViewport(previousViewportStartModelPosition, this._viewportStart.startLineDelta);\n    }\n    return new StableViewport(null, 0);\n  }\n  _onConfigurationChanged(eventsCollector, e) {\n    const stableViewport = this._captureStableViewport();\n    const options = this._configuration.options;\n    const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n    const wrappingStrategy = options.get(140 /* EditorOption.wrappingStrategy */);\n    const wrappingInfo = options.get(147 /* EditorOption.wrappingInfo */);\n    const wrappingIndent = options.get(139 /* EditorOption.wrappingIndent */);\n    const wordBreak = options.get(130 /* EditorOption.wordBreak */);\n    if (this._lines.setWrappingSettings(fontInfo, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent, wordBreak)) {\n      eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n      eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n      eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n      this._cursor.onLineMappingChanged(eventsCollector);\n      this._decorations.onLineMappingChanged();\n      this.viewLayout.onFlushed(this.getLineCount());\n      this._updateConfigurationViewLineCount.schedule();\n    }\n    if (e.hasChanged(92 /* EditorOption.readOnly */)) {\n      // Must read again all decorations due to readOnly filtering\n      this._decorations.reset();\n      eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n    }\n    if (e.hasChanged(99 /* EditorOption.renderValidationDecorations */)) {\n      this._decorations.reset();\n      eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n    }\n    eventsCollector.emitViewEvent(new viewEvents.ViewConfigurationChangedEvent(e));\n    this.viewLayout.onConfigurationChanged(e);\n    stableViewport.recoverViewportStart(this.coordinatesConverter, this.viewLayout);\n    if (CursorConfiguration.shouldRecreate(e)) {\n      this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n      this._cursor.updateConfiguration(this.cursorConfig);\n    }\n  }\n  _registerModelEvents() {\n    this._register(this.model.onDidChangeContentOrInjectedText(e => {\n      try {\n        const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n        let hadOtherModelChange = false;\n        let hadModelLineChangeThatChangedLineMapping = false;\n        const changes = e instanceof textModelEvents.InternalModelContentChangeEvent ? e.rawContentChangedEvent.changes : e.changes;\n        const versionId = e instanceof textModelEvents.InternalModelContentChangeEvent ? e.rawContentChangedEvent.versionId : null;\n        // Do a first pass to compute line mappings, and a second pass to actually interpret them\n        const lineBreaksComputer = this._lines.createLineBreaksComputer();\n        for (const change of changes) {\n          switch (change.changeType) {\n            case 4 /* textModelEvents.RawContentChangedType.LinesInserted */:\n              {\n                for (let lineIdx = 0; lineIdx < change.detail.length; lineIdx++) {\n                  const line = change.detail[lineIdx];\n                  let injectedText = change.injectedTexts[lineIdx];\n                  if (injectedText) {\n                    injectedText = injectedText.filter(element => !element.ownerId || element.ownerId === this._editorId);\n                  }\n                  lineBreaksComputer.addRequest(line, injectedText, null);\n                }\n                break;\n              }\n            case 2 /* textModelEvents.RawContentChangedType.LineChanged */:\n              {\n                let injectedText = null;\n                if (change.injectedText) {\n                  injectedText = change.injectedText.filter(element => !element.ownerId || element.ownerId === this._editorId);\n                }\n                lineBreaksComputer.addRequest(change.detail, injectedText, null);\n                break;\n              }\n          }\n        }\n        const lineBreaks = lineBreaksComputer.finalize();\n        const lineBreakQueue = new ArrayQueue(lineBreaks);\n        for (const change of changes) {\n          switch (change.changeType) {\n            case 1 /* textModelEvents.RawContentChangedType.Flush */:\n              {\n                this._lines.onModelFlushed();\n                eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n                this._decorations.reset();\n                this.viewLayout.onFlushed(this.getLineCount());\n                hadOtherModelChange = true;\n                break;\n              }\n            case 3 /* textModelEvents.RawContentChangedType.LinesDeleted */:\n              {\n                const linesDeletedEvent = this._lines.onModelLinesDeleted(versionId, change.fromLineNumber, change.toLineNumber);\n                if (linesDeletedEvent !== null) {\n                  eventsCollector.emitViewEvent(linesDeletedEvent);\n                  this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\n                }\n                hadOtherModelChange = true;\n                break;\n              }\n            case 4 /* textModelEvents.RawContentChangedType.LinesInserted */:\n              {\n                const insertedLineBreaks = lineBreakQueue.takeCount(change.detail.length);\n                const linesInsertedEvent = this._lines.onModelLinesInserted(versionId, change.fromLineNumber, change.toLineNumber, insertedLineBreaks);\n                if (linesInsertedEvent !== null) {\n                  eventsCollector.emitViewEvent(linesInsertedEvent);\n                  this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\n                }\n                hadOtherModelChange = true;\n                break;\n              }\n            case 2 /* textModelEvents.RawContentChangedType.LineChanged */:\n              {\n                const changedLineBreakData = lineBreakQueue.dequeue();\n                const [lineMappingChanged, linesChangedEvent, linesInsertedEvent, linesDeletedEvent] = this._lines.onModelLineChanged(versionId, change.lineNumber, changedLineBreakData);\n                hadModelLineChangeThatChangedLineMapping = lineMappingChanged;\n                if (linesChangedEvent) {\n                  eventsCollector.emitViewEvent(linesChangedEvent);\n                }\n                if (linesInsertedEvent) {\n                  eventsCollector.emitViewEvent(linesInsertedEvent);\n                  this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\n                }\n                if (linesDeletedEvent) {\n                  eventsCollector.emitViewEvent(linesDeletedEvent);\n                  this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\n                }\n                break;\n              }\n            case 5 /* textModelEvents.RawContentChangedType.EOLChanged */:\n              {\n                // Nothing to do. The new version will be accepted below\n                break;\n              }\n          }\n        }\n        if (versionId !== null) {\n          this._lines.acceptVersionId(versionId);\n        }\n        this.viewLayout.onHeightMaybeChanged();\n        if (!hadOtherModelChange && hadModelLineChangeThatChangedLineMapping) {\n          eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n          eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n          this._cursor.onLineMappingChanged(eventsCollector);\n          this._decorations.onLineMappingChanged();\n        }\n      } finally {\n        this._eventDispatcher.endEmitViewEvents();\n      }\n      // Update the configuration and reset the centered view line\n      const viewportStartWasValid = this._viewportStart.isValid;\n      this._viewportStart.invalidate();\n      this._configuration.setModelLineCount(this.model.getLineCount());\n      this._updateConfigurationViewLineCountNow();\n      // Recover viewport\n      if (!this._hasFocus && this.model.getAttachedEditorCount() >= 2 && viewportStartWasValid) {\n        const modelRange = this.model._getTrackedRange(this._viewportStart.modelTrackedRange);\n        if (modelRange) {\n          const viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelRange.getStartPosition());\n          const viewPositionTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n          this.viewLayout.setScrollPosition({\n            scrollTop: viewPositionTop + this._viewportStart.startLineDelta\n          }, 1 /* ScrollType.Immediate */);\n        }\n      }\n      try {\n        const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n        if (e instanceof textModelEvents.InternalModelContentChangeEvent) {\n          eventsCollector.emitOutgoingEvent(new ModelContentChangedEvent(e.contentChangedEvent));\n        }\n        this._cursor.onModelContentChanged(eventsCollector, e);\n      } finally {\n        this._eventDispatcher.endEmitViewEvents();\n      }\n      this._handleVisibleLinesChanged();\n    }));\n    this._register(this.model.onDidChangeTokens(e => {\n      const viewRanges = [];\n      for (let j = 0, lenJ = e.ranges.length; j < lenJ; j++) {\n        const modelRange = e.ranges[j];\n        const viewStartLineNumber = this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.fromLineNumber, 1)).lineNumber;\n        const viewEndLineNumber = this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.toLineNumber, this.model.getLineMaxColumn(modelRange.toLineNumber))).lineNumber;\n        viewRanges[j] = {\n          fromLineNumber: viewStartLineNumber,\n          toLineNumber: viewEndLineNumber\n        };\n      }\n      this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewTokensChangedEvent(viewRanges));\n      this._eventDispatcher.emitOutgoingEvent(new ModelTokensChangedEvent(e));\n    }));\n    this._register(this.model.onDidChangeLanguageConfiguration(e => {\n      this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewLanguageConfigurationEvent());\n      this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n      this._cursor.updateConfiguration(this.cursorConfig);\n      this._eventDispatcher.emitOutgoingEvent(new ModelLanguageConfigurationChangedEvent(e));\n    }));\n    this._register(this.model.onDidChangeLanguage(e => {\n      this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n      this._cursor.updateConfiguration(this.cursorConfig);\n      this._eventDispatcher.emitOutgoingEvent(new ModelLanguageChangedEvent(e));\n    }));\n    this._register(this.model.onDidChangeOptions(e => {\n      // A tab size change causes a line mapping changed event => all view parts will repaint OK, no further event needed here\n      if (this._lines.setTabSize(this.model.getOptions().tabSize)) {\n        try {\n          const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n          eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n          eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n          eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n          this._cursor.onLineMappingChanged(eventsCollector);\n          this._decorations.onLineMappingChanged();\n          this.viewLayout.onFlushed(this.getLineCount());\n        } finally {\n          this._eventDispatcher.endEmitViewEvents();\n        }\n        this._updateConfigurationViewLineCount.schedule();\n      }\n      this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n      this._cursor.updateConfiguration(this.cursorConfig);\n      this._eventDispatcher.emitOutgoingEvent(new ModelOptionsChangedEvent(e));\n    }));\n    this._register(this.model.onDidChangeDecorations(e => {\n      this._decorations.onModelDecorationsChanged();\n      this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewDecorationsChangedEvent(e));\n      this._eventDispatcher.emitOutgoingEvent(new ModelDecorationsChangedEvent(e));\n    }));\n  }\n  setHiddenAreas(ranges, source) {\n    this.hiddenAreasModel.setHiddenAreas(source, ranges);\n    const mergedRanges = this.hiddenAreasModel.getMergedRanges();\n    if (mergedRanges === this.previousHiddenAreas) {\n      return;\n    }\n    this.previousHiddenAreas = mergedRanges;\n    const stableViewport = this._captureStableViewport();\n    let lineMappingChanged = false;\n    try {\n      const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n      lineMappingChanged = this._lines.setHiddenAreas(mergedRanges);\n      if (lineMappingChanged) {\n        eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n        eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n        eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n        this._cursor.onLineMappingChanged(eventsCollector);\n        this._decorations.onLineMappingChanged();\n        this.viewLayout.onFlushed(this.getLineCount());\n        this.viewLayout.onHeightMaybeChanged();\n      }\n      const firstModelLineInViewPort = stableViewport.viewportStartModelPosition?.lineNumber;\n      const firstModelLineIsHidden = firstModelLineInViewPort && mergedRanges.some(range => range.startLineNumber <= firstModelLineInViewPort && firstModelLineInViewPort <= range.endLineNumber);\n      if (!firstModelLineIsHidden) {\n        stableViewport.recoverViewportStart(this.coordinatesConverter, this.viewLayout);\n      }\n    } finally {\n      this._eventDispatcher.endEmitViewEvents();\n    }\n    this._updateConfigurationViewLineCount.schedule();\n    if (lineMappingChanged) {\n      this._eventDispatcher.emitOutgoingEvent(new HiddenAreasChangedEvent());\n    }\n  }\n  getVisibleRangesPlusViewportAboveBelow() {\n    const layoutInfo = this._configuration.options.get(146 /* EditorOption.layoutInfo */);\n    const lineHeight = this._configuration.options.get(67 /* EditorOption.lineHeight */);\n    const linesAround = Math.max(20, Math.round(layoutInfo.height / lineHeight));\n    const partialData = this.viewLayout.getLinesViewportData();\n    const startViewLineNumber = Math.max(1, partialData.completelyVisibleStartLineNumber - linesAround);\n    const endViewLineNumber = Math.min(this.getLineCount(), partialData.completelyVisibleEndLineNumber + linesAround);\n    return this._toModelVisibleRanges(new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber)));\n  }\n  getVisibleRanges() {\n    const visibleViewRange = this.getCompletelyVisibleViewRange();\n    return this._toModelVisibleRanges(visibleViewRange);\n  }\n  getHiddenAreas() {\n    return this._lines.getHiddenAreas();\n  }\n  _toModelVisibleRanges(visibleViewRange) {\n    const visibleRange = this.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n    const hiddenAreas = this._lines.getHiddenAreas();\n    if (hiddenAreas.length === 0) {\n      return [visibleRange];\n    }\n    const result = [];\n    let resultLen = 0;\n    let startLineNumber = visibleRange.startLineNumber;\n    let startColumn = visibleRange.startColumn;\n    const endLineNumber = visibleRange.endLineNumber;\n    const endColumn = visibleRange.endColumn;\n    for (let i = 0, len = hiddenAreas.length; i < len; i++) {\n      const hiddenStartLineNumber = hiddenAreas[i].startLineNumber;\n      const hiddenEndLineNumber = hiddenAreas[i].endLineNumber;\n      if (hiddenEndLineNumber < startLineNumber) {\n        continue;\n      }\n      if (hiddenStartLineNumber > endLineNumber) {\n        continue;\n      }\n      if (startLineNumber < hiddenStartLineNumber) {\n        result[resultLen++] = new Range(startLineNumber, startColumn, hiddenStartLineNumber - 1, this.model.getLineMaxColumn(hiddenStartLineNumber - 1));\n      }\n      startLineNumber = hiddenEndLineNumber + 1;\n      startColumn = 1;\n    }\n    if (startLineNumber < endLineNumber || startLineNumber === endLineNumber && startColumn < endColumn) {\n      result[resultLen++] = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n    }\n    return result;\n  }\n  getCompletelyVisibleViewRange() {\n    const partialData = this.viewLayout.getLinesViewportData();\n    const startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n    const endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n    return new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\n  }\n  getCompletelyVisibleViewRangeAtScrollTop(scrollTop) {\n    const partialData = this.viewLayout.getLinesViewportDataAtScrollTop(scrollTop);\n    const startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n    const endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n    return new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\n  }\n  saveState() {\n    const compatViewState = this.viewLayout.saveState();\n    const scrollTop = compatViewState.scrollTop;\n    const firstViewLineNumber = this.viewLayout.getLineNumberAtVerticalOffset(scrollTop);\n    const firstPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(firstViewLineNumber, this.getLineMinColumn(firstViewLineNumber)));\n    const firstPositionDeltaTop = this.viewLayout.getVerticalOffsetForLineNumber(firstViewLineNumber) - scrollTop;\n    return {\n      scrollLeft: compatViewState.scrollLeft,\n      firstPosition: firstPosition,\n      firstPositionDeltaTop: firstPositionDeltaTop\n    };\n  }\n  reduceRestoreState(state) {\n    if (typeof state.firstPosition === 'undefined') {\n      // This is a view state serialized by an older version\n      return this._reduceRestoreStateCompatibility(state);\n    }\n    const modelPosition = this.model.validatePosition(state.firstPosition);\n    const viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n    const scrollTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber) - state.firstPositionDeltaTop;\n    return {\n      scrollLeft: state.scrollLeft,\n      scrollTop: scrollTop\n    };\n  }\n  _reduceRestoreStateCompatibility(state) {\n    return {\n      scrollLeft: state.scrollLeft,\n      scrollTop: state.scrollTopWithoutViewZones\n    };\n  }\n  getTabSize() {\n    return this.model.getOptions().tabSize;\n  }\n  getLineCount() {\n    return this._lines.getViewLineCount();\n  }\n  /**\n   * Gives a hint that a lot of requests are about to come in for these line numbers.\n   */\n  setViewport(startLineNumber, endLineNumber, centeredLineNumber) {\n    this._viewportStart.update(this, startLineNumber);\n  }\n  getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber) {\n    return this._lines.getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber);\n  }\n  getLinesIndentGuides(startLineNumber, endLineNumber) {\n    return this._lines.getViewLinesIndentGuides(startLineNumber, endLineNumber);\n  }\n  getBracketGuidesInRangeByLine(startLineNumber, endLineNumber, activePosition, options) {\n    return this._lines.getViewLinesBracketGuides(startLineNumber, endLineNumber, activePosition, options);\n  }\n  getLineContent(lineNumber) {\n    return this._lines.getViewLineContent(lineNumber);\n  }\n  getLineLength(lineNumber) {\n    return this._lines.getViewLineLength(lineNumber);\n  }\n  getLineMinColumn(lineNumber) {\n    return this._lines.getViewLineMinColumn(lineNumber);\n  }\n  getLineMaxColumn(lineNumber) {\n    return this._lines.getViewLineMaxColumn(lineNumber);\n  }\n  getLineFirstNonWhitespaceColumn(lineNumber) {\n    const result = strings.firstNonWhitespaceIndex(this.getLineContent(lineNumber));\n    if (result === -1) {\n      return 0;\n    }\n    return result + 1;\n  }\n  getLineLastNonWhitespaceColumn(lineNumber) {\n    const result = strings.lastNonWhitespaceIndex(this.getLineContent(lineNumber));\n    if (result === -1) {\n      return 0;\n    }\n    return result + 2;\n  }\n  getMinimapDecorationsInRange(range) {\n    return this._decorations.getMinimapDecorationsInRange(range);\n  }\n  getDecorationsInViewport(visibleRange) {\n    return this._decorations.getDecorationsViewportData(visibleRange).decorations;\n  }\n  getInjectedTextAt(viewPosition) {\n    return this._lines.getInjectedTextAt(viewPosition);\n  }\n  getViewportViewLineRenderingData(visibleRange, lineNumber) {\n    const allInlineDecorations = this._decorations.getDecorationsViewportData(visibleRange).inlineDecorations;\n    const inlineDecorations = allInlineDecorations[lineNumber - visibleRange.startLineNumber];\n    return this._getViewLineRenderingData(lineNumber, inlineDecorations);\n  }\n  getViewLineRenderingData(lineNumber) {\n    const inlineDecorations = this._decorations.getInlineDecorationsOnLine(lineNumber);\n    return this._getViewLineRenderingData(lineNumber, inlineDecorations);\n  }\n  _getViewLineRenderingData(lineNumber, inlineDecorations) {\n    const mightContainRTL = this.model.mightContainRTL();\n    const mightContainNonBasicASCII = this.model.mightContainNonBasicASCII();\n    const tabSize = this.getTabSize();\n    const lineData = this._lines.getViewLineData(lineNumber);\n    if (lineData.inlineDecorations) {\n      inlineDecorations = [...inlineDecorations, ...lineData.inlineDecorations.map(d => d.toInlineDecoration(lineNumber))];\n    }\n    return new ViewLineRenderingData(lineData.minColumn, lineData.maxColumn, lineData.content, lineData.continuesWithWrappedLine, mightContainRTL, mightContainNonBasicASCII, lineData.tokens, inlineDecorations, tabSize, lineData.startVisibleColumn);\n  }\n  getViewLineData(lineNumber) {\n    return this._lines.getViewLineData(lineNumber);\n  }\n  getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed) {\n    const result = this._lines.getViewLinesData(startLineNumber, endLineNumber, needed);\n    return new MinimapLinesRenderingData(this.getTabSize(), result);\n  }\n  getAllOverviewRulerDecorations(theme) {\n    const decorations = this.model.getOverviewRulerDecorations(this._editorId, filterValidationDecorations(this._configuration.options));\n    const result = new OverviewRulerDecorations();\n    for (const decoration of decorations) {\n      const decorationOptions = decoration.options;\n      const opts = decorationOptions.overviewRuler;\n      if (!opts) {\n        continue;\n      }\n      const lane = opts.position;\n      if (lane === 0) {\n        continue;\n      }\n      const color = opts.getColor(theme.value);\n      const viewStartLineNumber = this.coordinatesConverter.getViewLineNumberOfModelPosition(decoration.range.startLineNumber, decoration.range.startColumn);\n      const viewEndLineNumber = this.coordinatesConverter.getViewLineNumberOfModelPosition(decoration.range.endLineNumber, decoration.range.endColumn);\n      result.accept(color, decorationOptions.zIndex, viewStartLineNumber, viewEndLineNumber, lane);\n    }\n    return result.asArray;\n  }\n  _invalidateDecorationsColorCache() {\n    const decorations = this.model.getOverviewRulerDecorations();\n    for (const decoration of decorations) {\n      const opts1 = decoration.options.overviewRuler;\n      opts1?.invalidateCachedColor();\n      const opts2 = decoration.options.minimap;\n      opts2?.invalidateCachedColor();\n    }\n  }\n  getValueInRange(range, eol) {\n    const modelRange = this.coordinatesConverter.convertViewRangeToModelRange(range);\n    return this.model.getValueInRange(modelRange, eol);\n  }\n  getValueLengthInRange(range, eol) {\n    const modelRange = this.coordinatesConverter.convertViewRangeToModelRange(range);\n    return this.model.getValueLengthInRange(modelRange, eol);\n  }\n  modifyPosition(position, offset) {\n    const modelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(position);\n    const resultModelPosition = this.model.modifyPosition(modelPosition, offset);\n    return this.coordinatesConverter.convertModelPositionToViewPosition(resultModelPosition);\n  }\n  deduceModelPositionRelativeToViewPosition(viewAnchorPosition, deltaOffset, lineFeedCnt) {\n    const modelAnchor = this.coordinatesConverter.convertViewPositionToModelPosition(viewAnchorPosition);\n    if (this.model.getEOL().length === 2) {\n      // This model uses CRLF, so the delta must take that into account\n      if (deltaOffset < 0) {\n        deltaOffset -= lineFeedCnt;\n      } else {\n        deltaOffset += lineFeedCnt;\n      }\n    }\n    const modelAnchorOffset = this.model.getOffsetAt(modelAnchor);\n    const resultOffset = modelAnchorOffset + deltaOffset;\n    return this.model.getPositionAt(resultOffset);\n  }\n  getPlainTextToCopy(modelRanges, emptySelectionClipboard, forceCRLF) {\n    const newLineCharacter = forceCRLF ? '\\r\\n' : this.model.getEOL();\n    modelRanges = modelRanges.slice(0);\n    modelRanges.sort(Range.compareRangesUsingStarts);\n    let hasEmptyRange = false;\n    let hasNonEmptyRange = false;\n    for (const range of modelRanges) {\n      if (range.isEmpty()) {\n        hasEmptyRange = true;\n      } else {\n        hasNonEmptyRange = true;\n      }\n    }\n    if (!hasNonEmptyRange) {\n      // all ranges are empty\n      if (!emptySelectionClipboard) {\n        return '';\n      }\n      const modelLineNumbers = modelRanges.map(r => r.startLineNumber);\n      let result = '';\n      for (let i = 0; i < modelLineNumbers.length; i++) {\n        if (i > 0 && modelLineNumbers[i - 1] === modelLineNumbers[i]) {\n          continue;\n        }\n        result += this.model.getLineContent(modelLineNumbers[i]) + newLineCharacter;\n      }\n      return result;\n    }\n    if (hasEmptyRange && emptySelectionClipboard) {\n      // mixed empty selections and non-empty selections\n      const result = [];\n      let prevModelLineNumber = 0;\n      for (const modelRange of modelRanges) {\n        const modelLineNumber = modelRange.startLineNumber;\n        if (modelRange.isEmpty()) {\n          if (modelLineNumber !== prevModelLineNumber) {\n            result.push(this.model.getLineContent(modelLineNumber));\n          }\n        } else {\n          result.push(this.model.getValueInRange(modelRange, forceCRLF ? 2 /* EndOfLinePreference.CRLF */ : 0 /* EndOfLinePreference.TextDefined */));\n        }\n        prevModelLineNumber = modelLineNumber;\n      }\n      return result.length === 1 ? result[0] : result;\n    }\n    const result = [];\n    for (const modelRange of modelRanges) {\n      if (!modelRange.isEmpty()) {\n        result.push(this.model.getValueInRange(modelRange, forceCRLF ? 2 /* EndOfLinePreference.CRLF */ : 0 /* EndOfLinePreference.TextDefined */));\n      }\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n  getRichTextToCopy(modelRanges, emptySelectionClipboard) {\n    const languageId = this.model.getLanguageId();\n    if (languageId === PLAINTEXT_LANGUAGE_ID) {\n      return null;\n    }\n    if (modelRanges.length !== 1) {\n      // no multiple selection support at this time\n      return null;\n    }\n    let range = modelRanges[0];\n    if (range.isEmpty()) {\n      if (!emptySelectionClipboard) {\n        // nothing to copy\n        return null;\n      }\n      const lineNumber = range.startLineNumber;\n      range = new Range(lineNumber, this.model.getLineMinColumn(lineNumber), lineNumber, this.model.getLineMaxColumn(lineNumber));\n    }\n    const fontInfo = this._configuration.options.get(50 /* EditorOption.fontInfo */);\n    const colorMap = this._getColorMap();\n    const hasBadChars = /[:;\\\\\\/<>]/.test(fontInfo.fontFamily);\n    const useDefaultFontFamily = hasBadChars || fontInfo.fontFamily === EDITOR_FONT_DEFAULTS.fontFamily;\n    let fontFamily;\n    if (useDefaultFontFamily) {\n      fontFamily = EDITOR_FONT_DEFAULTS.fontFamily;\n    } else {\n      fontFamily = fontInfo.fontFamily;\n      fontFamily = fontFamily.replace(/\"/g, '\\'');\n      const hasQuotesOrIsList = /[,']/.test(fontFamily);\n      if (!hasQuotesOrIsList) {\n        const needsQuotes = /[+ ]/.test(fontFamily);\n        if (needsQuotes) {\n          fontFamily = `'${fontFamily}'`;\n        }\n      }\n      fontFamily = `${fontFamily}, ${EDITOR_FONT_DEFAULTS.fontFamily}`;\n    }\n    return {\n      mode: languageId,\n      html: `<div style=\"` + `color: ${colorMap[1 /* ColorId.DefaultForeground */]};` + `background-color: ${colorMap[2 /* ColorId.DefaultBackground */]};` + `font-family: ${fontFamily};` + `font-weight: ${fontInfo.fontWeight};` + `font-size: ${fontInfo.fontSize}px;` + `line-height: ${fontInfo.lineHeight}px;` + `white-space: pre;` + `\">` + this._getHTMLToCopy(range, colorMap) + '</div>'\n    };\n  }\n  _getHTMLToCopy(modelRange, colorMap) {\n    const startLineNumber = modelRange.startLineNumber;\n    const startColumn = modelRange.startColumn;\n    const endLineNumber = modelRange.endLineNumber;\n    const endColumn = modelRange.endColumn;\n    const tabSize = this.getTabSize();\n    let result = '';\n    for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n      const lineTokens = this.model.tokenization.getLineTokens(lineNumber);\n      const lineContent = lineTokens.getLineContent();\n      const startOffset = lineNumber === startLineNumber ? startColumn - 1 : 0;\n      const endOffset = lineNumber === endLineNumber ? endColumn - 1 : lineContent.length;\n      if (lineContent === '') {\n        result += '<br>';\n      } else {\n        result += tokenizeLineToHTML(lineContent, lineTokens.inflate(), colorMap, startOffset, endOffset, tabSize, platform.isWindows);\n      }\n    }\n    return result;\n  }\n  _getColorMap() {\n    const colorMap = TokenizationRegistry.getColorMap();\n    const result = ['#000000'];\n    if (colorMap) {\n      for (let i = 1, len = colorMap.length; i < len; i++) {\n        result[i] = Color.Format.CSS.formatHex(colorMap[i]);\n      }\n    }\n    return result;\n  }\n  //#region cursor operations\n  getPrimaryCursorState() {\n    return this._cursor.getPrimaryCursorState();\n  }\n  getLastAddedCursorIndex() {\n    return this._cursor.getLastAddedCursorIndex();\n  }\n  getCursorStates() {\n    return this._cursor.getCursorStates();\n  }\n  setCursorStates(source, reason, states) {\n    return this._withViewEventsCollector(eventsCollector => this._cursor.setStates(eventsCollector, source, reason, states));\n  }\n  getCursorColumnSelectData() {\n    return this._cursor.getCursorColumnSelectData();\n  }\n  getCursorAutoClosedCharacters() {\n    return this._cursor.getAutoClosedCharacters();\n  }\n  setCursorColumnSelectData(columnSelectData) {\n    this._cursor.setCursorColumnSelectData(columnSelectData);\n  }\n  getPrevEditOperationType() {\n    return this._cursor.getPrevEditOperationType();\n  }\n  setPrevEditOperationType(type) {\n    this._cursor.setPrevEditOperationType(type);\n  }\n  getSelection() {\n    return this._cursor.getSelection();\n  }\n  getSelections() {\n    return this._cursor.getSelections();\n  }\n  getPosition() {\n    return this._cursor.getPrimaryCursorState().modelState.position;\n  }\n  setSelections(source, selections, reason = 0 /* CursorChangeReason.NotSet */) {\n    this._withViewEventsCollector(eventsCollector => this._cursor.setSelections(eventsCollector, source, selections, reason));\n  }\n  saveCursorState() {\n    return this._cursor.saveState();\n  }\n  restoreCursorState(states) {\n    this._withViewEventsCollector(eventsCollector => this._cursor.restoreState(eventsCollector, states));\n  }\n  _executeCursorEdit(callback) {\n    if (this._cursor.context.cursorConfig.readOnly) {\n      // we cannot edit when read only...\n      this._eventDispatcher.emitOutgoingEvent(new ReadOnlyEditAttemptEvent());\n      return;\n    }\n    this._withViewEventsCollector(callback);\n  }\n  executeEdits(source, edits, cursorStateComputer) {\n    this._executeCursorEdit(eventsCollector => this._cursor.executeEdits(eventsCollector, source, edits, cursorStateComputer));\n  }\n  startComposition() {\n    this._executeCursorEdit(eventsCollector => this._cursor.startComposition(eventsCollector));\n  }\n  endComposition(source) {\n    this._executeCursorEdit(eventsCollector => this._cursor.endComposition(eventsCollector, source));\n  }\n  type(text, source) {\n    this._executeCursorEdit(eventsCollector => this._cursor.type(eventsCollector, text, source));\n  }\n  compositionType(text, replacePrevCharCnt, replaceNextCharCnt, positionDelta, source) {\n    this._executeCursorEdit(eventsCollector => this._cursor.compositionType(eventsCollector, text, replacePrevCharCnt, replaceNextCharCnt, positionDelta, source));\n  }\n  paste(text, pasteOnNewLine, multicursorText, source) {\n    this._executeCursorEdit(eventsCollector => this._cursor.paste(eventsCollector, text, pasteOnNewLine, multicursorText, source));\n  }\n  cut(source) {\n    this._executeCursorEdit(eventsCollector => this._cursor.cut(eventsCollector, source));\n  }\n  executeCommand(command, source) {\n    this._executeCursorEdit(eventsCollector => this._cursor.executeCommand(eventsCollector, command, source));\n  }\n  executeCommands(commands, source) {\n    this._executeCursorEdit(eventsCollector => this._cursor.executeCommands(eventsCollector, commands, source));\n  }\n  revealAllCursors(source, revealHorizontal, minimalReveal = false) {\n    this._withViewEventsCollector(eventsCollector => this._cursor.revealAll(eventsCollector, source, minimalReveal, 0 /* viewEvents.VerticalRevealType.Simple */, revealHorizontal, 0 /* ScrollType.Smooth */));\n  }\n  revealPrimaryCursor(source, revealHorizontal, minimalReveal = false) {\n    this._withViewEventsCollector(eventsCollector => this._cursor.revealPrimary(eventsCollector, source, minimalReveal, 0 /* viewEvents.VerticalRevealType.Simple */, revealHorizontal, 0 /* ScrollType.Smooth */));\n  }\n  revealTopMostCursor(source) {\n    const viewPosition = this._cursor.getTopMostViewPosition();\n    const viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\n    this._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, 0 /* viewEvents.VerticalRevealType.Simple */, true, 0 /* ScrollType.Smooth */)));\n  }\n  revealBottomMostCursor(source) {\n    const viewPosition = this._cursor.getBottomMostViewPosition();\n    const viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\n    this._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, 0 /* viewEvents.VerticalRevealType.Simple */, true, 0 /* ScrollType.Smooth */)));\n  }\n  revealRange(source, revealHorizontal, viewRange, verticalType, scrollType) {\n    this._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, verticalType, revealHorizontal, scrollType)));\n  }\n  //#endregion\n  //#region viewLayout\n  changeWhitespace(callback) {\n    const hadAChange = this.viewLayout.changeWhitespace(callback);\n    if (hadAChange) {\n      this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewZonesChangedEvent());\n      this._eventDispatcher.emitOutgoingEvent(new ViewZonesChangedEvent());\n    }\n  }\n  //#endregion\n  _withViewEventsCollector(callback) {\n    return this._transactionalTarget.batchChanges(() => {\n      try {\n        const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n        return callback(eventsCollector);\n      } finally {\n        this._eventDispatcher.endEmitViewEvents();\n      }\n    });\n  }\n  batchEvents(callback) {\n    this._withViewEventsCollector(() => {\n      callback();\n    });\n  }\n  normalizePosition(position, affinity) {\n    return this._lines.normalizePosition(position, affinity);\n  }\n  /**\n   * Gets the column at which indentation stops at a given line.\n   * @internal\n  */\n  getLineIndentColumn(lineNumber) {\n    return this._lines.getLineIndentColumn(lineNumber);\n  }\n}\nclass ViewportStart {\n  static create(model) {\n    const viewportStartLineTrackedRange = model._setTrackedRange(null, new Range(1, 1, 1, 1), 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */);\n    return new ViewportStart(model, 1, false, viewportStartLineTrackedRange, 0);\n  }\n  get viewLineNumber() {\n    return this._viewLineNumber;\n  }\n  get isValid() {\n    return this._isValid;\n  }\n  get modelTrackedRange() {\n    return this._modelTrackedRange;\n  }\n  get startLineDelta() {\n    return this._startLineDelta;\n  }\n  constructor(_model, _viewLineNumber, _isValid, _modelTrackedRange, _startLineDelta) {\n    this._model = _model;\n    this._viewLineNumber = _viewLineNumber;\n    this._isValid = _isValid;\n    this._modelTrackedRange = _modelTrackedRange;\n    this._startLineDelta = _startLineDelta;\n  }\n  dispose() {\n    this._model._setTrackedRange(this._modelTrackedRange, null, 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */);\n  }\n  update(viewModel, startLineNumber) {\n    const position = viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(startLineNumber, viewModel.getLineMinColumn(startLineNumber)));\n    const viewportStartLineTrackedRange = viewModel.model._setTrackedRange(this._modelTrackedRange, new Range(position.lineNumber, position.column, position.lineNumber, position.column), 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */);\n    const viewportStartLineTop = viewModel.viewLayout.getVerticalOffsetForLineNumber(startLineNumber);\n    const scrollTop = viewModel.viewLayout.getCurrentScrollTop();\n    this._viewLineNumber = startLineNumber;\n    this._isValid = true;\n    this._modelTrackedRange = viewportStartLineTrackedRange;\n    this._startLineDelta = scrollTop - viewportStartLineTop;\n  }\n  invalidate() {\n    this._isValid = false;\n  }\n}\nclass OverviewRulerDecorations {\n  constructor() {\n    this._asMap = Object.create(null);\n    this.asArray = [];\n  }\n  accept(color, zIndex, startLineNumber, endLineNumber, lane) {\n    const prevGroup = this._asMap[color];\n    if (prevGroup) {\n      const prevData = prevGroup.data;\n      const prevLane = prevData[prevData.length - 3];\n      const prevEndLineNumber = prevData[prevData.length - 1];\n      if (prevLane === lane && prevEndLineNumber + 1 >= startLineNumber) {\n        // merge into prev\n        if (endLineNumber > prevEndLineNumber) {\n          prevData[prevData.length - 1] = endLineNumber;\n        }\n        return;\n      }\n      // push\n      prevData.push(lane, startLineNumber, endLineNumber);\n    } else {\n      const group = new OverviewRulerDecorationsGroup(color, zIndex, [lane, startLineNumber, endLineNumber]);\n      this._asMap[color] = group;\n      this.asArray.push(group);\n    }\n  }\n}\nclass HiddenAreasModel {\n  constructor() {\n    this.hiddenAreas = new Map();\n    this.shouldRecompute = false;\n    this.ranges = [];\n  }\n  setHiddenAreas(source, ranges) {\n    const existing = this.hiddenAreas.get(source);\n    if (existing && rangeArraysEqual(existing, ranges)) {\n      return;\n    }\n    this.hiddenAreas.set(source, ranges);\n    this.shouldRecompute = true;\n  }\n  /**\n   * The returned array is immutable.\n  */\n  getMergedRanges() {\n    if (!this.shouldRecompute) {\n      return this.ranges;\n    }\n    this.shouldRecompute = false;\n    const newRanges = Array.from(this.hiddenAreas.values()).reduce((r, hiddenAreas) => mergeLineRangeArray(r, hiddenAreas), []);\n    if (rangeArraysEqual(this.ranges, newRanges)) {\n      return this.ranges;\n    }\n    this.ranges = newRanges;\n    return this.ranges;\n  }\n}\nfunction mergeLineRangeArray(arr1, arr2) {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < arr1.length && j < arr2.length) {\n    const item1 = arr1[i];\n    const item2 = arr2[j];\n    if (item1.endLineNumber < item2.startLineNumber - 1) {\n      result.push(arr1[i++]);\n    } else if (item2.endLineNumber < item1.startLineNumber - 1) {\n      result.push(arr2[j++]);\n    } else {\n      const startLineNumber = Math.min(item1.startLineNumber, item2.startLineNumber);\n      const endLineNumber = Math.max(item1.endLineNumber, item2.endLineNumber);\n      result.push(new Range(startLineNumber, 1, endLineNumber, 1));\n      i++;\n      j++;\n    }\n  }\n  while (i < arr1.length) {\n    result.push(arr1[i++]);\n  }\n  while (j < arr2.length) {\n    result.push(arr2[j++]);\n  }\n  return result;\n}\nfunction rangeArraysEqual(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n  for (let i = 0; i < arr1.length; i++) {\n    if (!arr1[i].equalsRange(arr2[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Maintain a stable viewport by trying to keep the first line in the viewport constant.\n */\nclass StableViewport {\n  constructor(viewportStartModelPosition, startLineDelta) {\n    this.viewportStartModelPosition = viewportStartModelPosition;\n    this.startLineDelta = startLineDelta;\n  }\n  recoverViewportStart(coordinatesConverter, viewLayout) {\n    if (!this.viewportStartModelPosition) {\n      return;\n    }\n    const viewPosition = coordinatesConverter.convertModelPositionToViewPosition(this.viewportStartModelPosition);\n    const viewPositionTop = viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n    viewLayout.setScrollPosition({\n      scrollTop: viewPositionTop + this.startLineDelta\n    }, 1 /* ScrollType.Immediate */);\n  }\n}","map":{"version":3,"names":["ArrayQueue","RunOnceScheduler","Color","Disposable","platform","strings","EDITOR_FONT_DEFAULTS","filterValidationDecorations","CursorsController","CursorConfiguration","Position","Range","textModelEvents","TokenizationRegistry","PLAINTEXT_LANGUAGE_ID","tokenizeLineToHTML","viewEvents","ViewLayout","MinimapTokensColorTracker","MinimapLinesRenderingData","OverviewRulerDecorationsGroup","ViewLineRenderingData","ViewModelDecorations","FocusChangedEvent","HiddenAreasChangedEvent","ModelContentChangedEvent","ModelDecorationsChangedEvent","ModelLanguageChangedEvent","ModelLanguageConfigurationChangedEvent","ModelOptionsChangedEvent","ModelTokensChangedEvent","ReadOnlyEditAttemptEvent","ScrollChangedEvent","ViewModelEventDispatcher","ViewZonesChangedEvent","ViewModelLinesFromModelAsIs","ViewModelLinesFromProjectedModel","GlyphMarginLanesModel","USE_IDENTITY_LINES_COLLECTION","ViewModel","constructor","editorId","configuration","model","domLineBreaksComputerFactory","monospaceLineBreaksComputerFactory","scheduleAtNextAnimationFrame","languageConfigurationService","_themeService","_attachedView","_transactionalTarget","hiddenAreasModel","HiddenAreasModel","previousHiddenAreas","_editorId","_configuration","_eventDispatcher","onEvent","cursorConfig","getLanguageId","getOptions","_updateConfigurationViewLineCount","_register","_updateConfigurationViewLineCountNow","_hasFocus","_viewportStart","ViewportStart","create","glyphLanes","isTooLargeForTokenization","_lines","options","fontInfo","get","wrappingStrategy","wrappingInfo","wrappingIndent","wordBreak","tabSize","wrappingColumn","coordinatesConverter","createCoordinatesConverter","_cursor","viewLayout","getLineCount","onDidScroll","e","scrollTopChanged","_handleVisibleLinesChanged","invalidate","emitSingleViewEvent","ViewScrollChangedEvent","emitOutgoingEvent","oldScrollWidth","oldScrollLeft","oldScrollHeight","oldScrollTop","scrollWidth","scrollLeft","scrollHeight","scrollTop","onDidContentSizeChange","_decorations","_registerModelEvents","onDidChangeFast","eventsCollector","beginEmitViewEvents","_onConfigurationChanged","endEmitViewEvents","getInstance","onDidChange","ViewTokensColorsChangedEvent","onDidColorThemeChange","theme","_invalidateDecorationsColorCache","ViewThemeChangedEvent","dispose","createLineBreaksComputer","addViewEventHandler","eventHandler","removeViewEventHandler","setViewLineCount","getViewLineCount","getModelVisibleRanges","linesViewportData","getLinesViewportData","viewVisibleRange","startLineNumber","getLineMinColumn","endLineNumber","getLineMaxColumn","modelVisibleRanges","_toModelVisibleRanges","visibleLinesStabilized","setVisibleLines","setHasFocus","hasFocus","ViewFocusChangedEvent","onCompositionStart","ViewCompositionStartEvent","onCompositionEnd","ViewCompositionEndEvent","_captureStableViewport","isValid","getCurrentScrollTop","previousViewportStartViewPosition","viewLineNumber","previousViewportStartModelPosition","convertViewPositionToModelPosition","StableViewport","startLineDelta","stableViewport","setWrappingSettings","emitViewEvent","ViewFlushedEvent","ViewLineMappingChangedEvent","ViewDecorationsChangedEvent","onLineMappingChanged","onFlushed","schedule","hasChanged","reset","ViewConfigurationChangedEvent","onConfigurationChanged","recoverViewportStart","shouldRecreate","updateConfiguration","onDidChangeContentOrInjectedText","hadOtherModelChange","hadModelLineChangeThatChangedLineMapping","changes","InternalModelContentChangeEvent","rawContentChangedEvent","versionId","lineBreaksComputer","change","changeType","lineIdx","detail","length","line","injectedText","injectedTexts","filter","element","ownerId","addRequest","lineBreaks","finalize","lineBreakQueue","onModelFlushed","linesDeletedEvent","onModelLinesDeleted","fromLineNumber","toLineNumber","onLinesDeleted","insertedLineBreaks","takeCount","linesInsertedEvent","onModelLinesInserted","onLinesInserted","changedLineBreakData","dequeue","lineMappingChanged","linesChangedEvent","onModelLineChanged","lineNumber","acceptVersionId","onHeightMaybeChanged","viewportStartWasValid","setModelLineCount","getAttachedEditorCount","modelRange","_getTrackedRange","modelTrackedRange","viewPosition","convertModelPositionToViewPosition","getStartPosition","viewPositionTop","getVerticalOffsetForLineNumber","setScrollPosition","contentChangedEvent","onModelContentChanged","onDidChangeTokens","viewRanges","j","lenJ","ranges","viewStartLineNumber","viewEndLineNumber","ViewTokensChangedEvent","onDidChangeLanguageConfiguration","ViewLanguageConfigurationEvent","onDidChangeLanguage","onDidChangeOptions","setTabSize","onDidChangeDecorations","onModelDecorationsChanged","setHiddenAreas","source","mergedRanges","getMergedRanges","firstModelLineInViewPort","viewportStartModelPosition","firstModelLineIsHidden","some","range","getVisibleRangesPlusViewportAboveBelow","layoutInfo","lineHeight","linesAround","Math","max","round","height","partialData","startViewLineNumber","completelyVisibleStartLineNumber","endViewLineNumber","min","completelyVisibleEndLineNumber","getVisibleRanges","visibleViewRange","getCompletelyVisibleViewRange","getHiddenAreas","visibleRange","convertViewRangeToModelRange","hiddenAreas","result","resultLen","startColumn","endColumn","i","len","hiddenStartLineNumber","hiddenEndLineNumber","getCompletelyVisibleViewRangeAtScrollTop","getLinesViewportDataAtScrollTop","saveState","compatViewState","firstViewLineNumber","getLineNumberAtVerticalOffset","firstPosition","firstPositionDeltaTop","reduceRestoreState","state","_reduceRestoreStateCompatibility","modelPosition","validatePosition","scrollTopWithoutViewZones","getTabSize","setViewport","centeredLineNumber","update","getActiveIndentGuide","minLineNumber","maxLineNumber","getLinesIndentGuides","getViewLinesIndentGuides","getBracketGuidesInRangeByLine","activePosition","getViewLinesBracketGuides","getLineContent","getViewLineContent","getLineLength","getViewLineLength","getViewLineMinColumn","getViewLineMaxColumn","getLineFirstNonWhitespaceColumn","firstNonWhitespaceIndex","getLineLastNonWhitespaceColumn","lastNonWhitespaceIndex","getMinimapDecorationsInRange","getDecorationsInViewport","getDecorationsViewportData","decorations","getInjectedTextAt","getViewportViewLineRenderingData","allInlineDecorations","inlineDecorations","_getViewLineRenderingData","getViewLineRenderingData","getInlineDecorationsOnLine","mightContainRTL","mightContainNonBasicASCII","lineData","getViewLineData","map","d","toInlineDecoration","minColumn","maxColumn","content","continuesWithWrappedLine","tokens","startVisibleColumn","getMinimapLinesRenderingData","needed","getViewLinesData","getAllOverviewRulerDecorations","getOverviewRulerDecorations","OverviewRulerDecorations","decoration","decorationOptions","opts","overviewRuler","lane","position","color","getColor","value","getViewLineNumberOfModelPosition","accept","zIndex","asArray","opts1","invalidateCachedColor","opts2","minimap","getValueInRange","eol","getValueLengthInRange","modifyPosition","offset","resultModelPosition","deduceModelPositionRelativeToViewPosition","viewAnchorPosition","deltaOffset","lineFeedCnt","modelAnchor","getEOL","modelAnchorOffset","getOffsetAt","resultOffset","getPositionAt","getPlainTextToCopy","modelRanges","emptySelectionClipboard","forceCRLF","newLineCharacter","slice","sort","compareRangesUsingStarts","hasEmptyRange","hasNonEmptyRange","isEmpty","modelLineNumbers","r","prevModelLineNumber","modelLineNumber","push","getRichTextToCopy","languageId","colorMap","_getColorMap","hasBadChars","test","fontFamily","useDefaultFontFamily","replace","hasQuotesOrIsList","needsQuotes","mode","html","fontWeight","fontSize","_getHTMLToCopy","lineTokens","tokenization","getLineTokens","lineContent","startOffset","endOffset","inflate","isWindows","getColorMap","Format","CSS","formatHex","getPrimaryCursorState","getLastAddedCursorIndex","getCursorStates","setCursorStates","reason","states","_withViewEventsCollector","setStates","getCursorColumnSelectData","getCursorAutoClosedCharacters","getAutoClosedCharacters","setCursorColumnSelectData","columnSelectData","getPrevEditOperationType","setPrevEditOperationType","type","getSelection","getSelections","getPosition","modelState","setSelections","selections","saveCursorState","restoreCursorState","restoreState","_executeCursorEdit","callback","context","readOnly","executeEdits","edits","cursorStateComputer","startComposition","endComposition","text","compositionType","replacePrevCharCnt","replaceNextCharCnt","positionDelta","paste","pasteOnNewLine","multicursorText","cut","executeCommand","command","executeCommands","commands","revealAllCursors","revealHorizontal","minimalReveal","revealAll","revealPrimaryCursor","revealPrimary","revealTopMostCursor","getTopMostViewPosition","viewRange","column","ViewRevealRangeRequestEvent","revealBottomMostCursor","getBottomMostViewPosition","revealRange","verticalType","scrollType","changeWhitespace","hadAChange","batchChanges","batchEvents","normalizePosition","affinity","getLineIndentColumn","viewportStartLineTrackedRange","_setTrackedRange","_viewLineNumber","_isValid","_modelTrackedRange","_startLineDelta","_model","viewModel","viewportStartLineTop","_asMap","Object","prevGroup","prevData","data","prevLane","prevEndLineNumber","group","Map","shouldRecompute","existing","rangeArraysEqual","set","newRanges","Array","from","values","reduce","mergeLineRangeArray","arr1","arr2","item1","item2","equalsRange"],"sources":["P:/IDEA/JudgeX/judgex_front/node_modules/monaco-editor/esm/vs/editor/common/viewModel/viewModelImpl.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ArrayQueue } from '../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Color } from '../../../base/common/color.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { EDITOR_FONT_DEFAULTS, filterValidationDecorations } from '../config/editorOptions.js';\nimport { CursorsController } from '../cursor/cursor.js';\nimport { CursorConfiguration } from '../cursorCommon.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport * as textModelEvents from '../textModelEvents.js';\nimport { TokenizationRegistry } from '../languages.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { tokenizeLineToHTML } from '../languages/textToHtmlTokenizer.js';\nimport * as viewEvents from '../viewEvents.js';\nimport { ViewLayout } from '../viewLayout/viewLayout.js';\nimport { MinimapTokensColorTracker } from './minimapTokensColorTracker.js';\nimport { MinimapLinesRenderingData, OverviewRulerDecorationsGroup, ViewLineRenderingData } from '../viewModel.js';\nimport { ViewModelDecorations } from './viewModelDecorations.js';\nimport { FocusChangedEvent, HiddenAreasChangedEvent, ModelContentChangedEvent, ModelDecorationsChangedEvent, ModelLanguageChangedEvent, ModelLanguageConfigurationChangedEvent, ModelOptionsChangedEvent, ModelTokensChangedEvent, ReadOnlyEditAttemptEvent, ScrollChangedEvent, ViewModelEventDispatcher, ViewZonesChangedEvent } from '../viewModelEventDispatcher.js';\nimport { ViewModelLinesFromModelAsIs, ViewModelLinesFromProjectedModel } from './viewModelLines.js';\nimport { GlyphMarginLanesModel } from './glyphLanesModel.js';\nconst USE_IDENTITY_LINES_COLLECTION = true;\nexport class ViewModel extends Disposable {\n    constructor(editorId, configuration, model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, scheduleAtNextAnimationFrame, languageConfigurationService, _themeService, _attachedView, _transactionalTarget) {\n        super();\n        this.languageConfigurationService = languageConfigurationService;\n        this._themeService = _themeService;\n        this._attachedView = _attachedView;\n        this._transactionalTarget = _transactionalTarget;\n        this.hiddenAreasModel = new HiddenAreasModel();\n        this.previousHiddenAreas = [];\n        this._editorId = editorId;\n        this._configuration = configuration;\n        this.model = model;\n        this._eventDispatcher = new ViewModelEventDispatcher();\n        this.onEvent = this._eventDispatcher.onEvent;\n        this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n        this._updateConfigurationViewLineCount = this._register(new RunOnceScheduler(() => this._updateConfigurationViewLineCountNow(), 0));\n        this._hasFocus = false;\n        this._viewportStart = ViewportStart.create(this.model);\n        this.glyphLanes = new GlyphMarginLanesModel(0);\n        if (USE_IDENTITY_LINES_COLLECTION && this.model.isTooLargeForTokenization()) {\n            this._lines = new ViewModelLinesFromModelAsIs(this.model);\n        }\n        else {\n            const options = this._configuration.options;\n            const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n            const wrappingStrategy = options.get(140 /* EditorOption.wrappingStrategy */);\n            const wrappingInfo = options.get(147 /* EditorOption.wrappingInfo */);\n            const wrappingIndent = options.get(139 /* EditorOption.wrappingIndent */);\n            const wordBreak = options.get(130 /* EditorOption.wordBreak */);\n            this._lines = new ViewModelLinesFromProjectedModel(this._editorId, this.model, domLineBreaksComputerFactory, monospaceLineBreaksComputerFactory, fontInfo, this.model.getOptions().tabSize, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent, wordBreak);\n        }\n        this.coordinatesConverter = this._lines.createCoordinatesConverter();\n        this._cursor = this._register(new CursorsController(model, this, this.coordinatesConverter, this.cursorConfig));\n        this.viewLayout = this._register(new ViewLayout(this._configuration, this.getLineCount(), scheduleAtNextAnimationFrame));\n        this._register(this.viewLayout.onDidScroll((e) => {\n            if (e.scrollTopChanged) {\n                this._handleVisibleLinesChanged();\n            }\n            if (e.scrollTopChanged) {\n                this._viewportStart.invalidate();\n            }\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewScrollChangedEvent(e));\n            this._eventDispatcher.emitOutgoingEvent(new ScrollChangedEvent(e.oldScrollWidth, e.oldScrollLeft, e.oldScrollHeight, e.oldScrollTop, e.scrollWidth, e.scrollLeft, e.scrollHeight, e.scrollTop));\n        }));\n        this._register(this.viewLayout.onDidContentSizeChange((e) => {\n            this._eventDispatcher.emitOutgoingEvent(e);\n        }));\n        this._decorations = new ViewModelDecorations(this._editorId, this.model, this._configuration, this._lines, this.coordinatesConverter);\n        this._registerModelEvents();\n        this._register(this._configuration.onDidChangeFast((e) => {\n            try {\n                const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                this._onConfigurationChanged(eventsCollector, e);\n            }\n            finally {\n                this._eventDispatcher.endEmitViewEvents();\n            }\n        }));\n        this._register(MinimapTokensColorTracker.getInstance().onDidChange(() => {\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewTokensColorsChangedEvent());\n        }));\n        this._register(this._themeService.onDidColorThemeChange((theme) => {\n            this._invalidateDecorationsColorCache();\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewThemeChangedEvent(theme));\n        }));\n        this._updateConfigurationViewLineCountNow();\n    }\n    dispose() {\n        // First remove listeners, as disposing the lines might end up sending\n        // model decoration changed events ... and we no longer care about them ...\n        super.dispose();\n        this._decorations.dispose();\n        this._lines.dispose();\n        this._viewportStart.dispose();\n        this._eventDispatcher.dispose();\n    }\n    createLineBreaksComputer() {\n        return this._lines.createLineBreaksComputer();\n    }\n    addViewEventHandler(eventHandler) {\n        this._eventDispatcher.addViewEventHandler(eventHandler);\n    }\n    removeViewEventHandler(eventHandler) {\n        this._eventDispatcher.removeViewEventHandler(eventHandler);\n    }\n    _updateConfigurationViewLineCountNow() {\n        this._configuration.setViewLineCount(this._lines.getViewLineCount());\n    }\n    getModelVisibleRanges() {\n        const linesViewportData = this.viewLayout.getLinesViewportData();\n        const viewVisibleRange = new Range(linesViewportData.startLineNumber, this.getLineMinColumn(linesViewportData.startLineNumber), linesViewportData.endLineNumber, this.getLineMaxColumn(linesViewportData.endLineNumber));\n        const modelVisibleRanges = this._toModelVisibleRanges(viewVisibleRange);\n        return modelVisibleRanges;\n    }\n    visibleLinesStabilized() {\n        const modelVisibleRanges = this.getModelVisibleRanges();\n        this._attachedView.setVisibleLines(modelVisibleRanges, true);\n    }\n    _handleVisibleLinesChanged() {\n        const modelVisibleRanges = this.getModelVisibleRanges();\n        this._attachedView.setVisibleLines(modelVisibleRanges, false);\n    }\n    setHasFocus(hasFocus) {\n        this._hasFocus = hasFocus;\n        this._cursor.setHasFocus(hasFocus);\n        this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewFocusChangedEvent(hasFocus));\n        this._eventDispatcher.emitOutgoingEvent(new FocusChangedEvent(!hasFocus, hasFocus));\n    }\n    onCompositionStart() {\n        this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewCompositionStartEvent());\n    }\n    onCompositionEnd() {\n        this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewCompositionEndEvent());\n    }\n    _captureStableViewport() {\n        // We might need to restore the current start view range, so save it (if available)\n        // But only if the scroll position is not at the top of the file\n        if (this._viewportStart.isValid && this.viewLayout.getCurrentScrollTop() > 0) {\n            const previousViewportStartViewPosition = new Position(this._viewportStart.viewLineNumber, this.getLineMinColumn(this._viewportStart.viewLineNumber));\n            const previousViewportStartModelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(previousViewportStartViewPosition);\n            return new StableViewport(previousViewportStartModelPosition, this._viewportStart.startLineDelta);\n        }\n        return new StableViewport(null, 0);\n    }\n    _onConfigurationChanged(eventsCollector, e) {\n        const stableViewport = this._captureStableViewport();\n        const options = this._configuration.options;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        const wrappingStrategy = options.get(140 /* EditorOption.wrappingStrategy */);\n        const wrappingInfo = options.get(147 /* EditorOption.wrappingInfo */);\n        const wrappingIndent = options.get(139 /* EditorOption.wrappingIndent */);\n        const wordBreak = options.get(130 /* EditorOption.wordBreak */);\n        if (this._lines.setWrappingSettings(fontInfo, wrappingStrategy, wrappingInfo.wrappingColumn, wrappingIndent, wordBreak)) {\n            eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n            eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n            eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n            this._cursor.onLineMappingChanged(eventsCollector);\n            this._decorations.onLineMappingChanged();\n            this.viewLayout.onFlushed(this.getLineCount());\n            this._updateConfigurationViewLineCount.schedule();\n        }\n        if (e.hasChanged(92 /* EditorOption.readOnly */)) {\n            // Must read again all decorations due to readOnly filtering\n            this._decorations.reset();\n            eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n        }\n        if (e.hasChanged(99 /* EditorOption.renderValidationDecorations */)) {\n            this._decorations.reset();\n            eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n        }\n        eventsCollector.emitViewEvent(new viewEvents.ViewConfigurationChangedEvent(e));\n        this.viewLayout.onConfigurationChanged(e);\n        stableViewport.recoverViewportStart(this.coordinatesConverter, this.viewLayout);\n        if (CursorConfiguration.shouldRecreate(e)) {\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n            this._cursor.updateConfiguration(this.cursorConfig);\n        }\n    }\n    _registerModelEvents() {\n        this._register(this.model.onDidChangeContentOrInjectedText((e) => {\n            try {\n                const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                let hadOtherModelChange = false;\n                let hadModelLineChangeThatChangedLineMapping = false;\n                const changes = (e instanceof textModelEvents.InternalModelContentChangeEvent ? e.rawContentChangedEvent.changes : e.changes);\n                const versionId = (e instanceof textModelEvents.InternalModelContentChangeEvent ? e.rawContentChangedEvent.versionId : null);\n                // Do a first pass to compute line mappings, and a second pass to actually interpret them\n                const lineBreaksComputer = this._lines.createLineBreaksComputer();\n                for (const change of changes) {\n                    switch (change.changeType) {\n                        case 4 /* textModelEvents.RawContentChangedType.LinesInserted */: {\n                            for (let lineIdx = 0; lineIdx < change.detail.length; lineIdx++) {\n                                const line = change.detail[lineIdx];\n                                let injectedText = change.injectedTexts[lineIdx];\n                                if (injectedText) {\n                                    injectedText = injectedText.filter(element => (!element.ownerId || element.ownerId === this._editorId));\n                                }\n                                lineBreaksComputer.addRequest(line, injectedText, null);\n                            }\n                            break;\n                        }\n                        case 2 /* textModelEvents.RawContentChangedType.LineChanged */: {\n                            let injectedText = null;\n                            if (change.injectedText) {\n                                injectedText = change.injectedText.filter(element => (!element.ownerId || element.ownerId === this._editorId));\n                            }\n                            lineBreaksComputer.addRequest(change.detail, injectedText, null);\n                            break;\n                        }\n                    }\n                }\n                const lineBreaks = lineBreaksComputer.finalize();\n                const lineBreakQueue = new ArrayQueue(lineBreaks);\n                for (const change of changes) {\n                    switch (change.changeType) {\n                        case 1 /* textModelEvents.RawContentChangedType.Flush */: {\n                            this._lines.onModelFlushed();\n                            eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n                            this._decorations.reset();\n                            this.viewLayout.onFlushed(this.getLineCount());\n                            hadOtherModelChange = true;\n                            break;\n                        }\n                        case 3 /* textModelEvents.RawContentChangedType.LinesDeleted */: {\n                            const linesDeletedEvent = this._lines.onModelLinesDeleted(versionId, change.fromLineNumber, change.toLineNumber);\n                            if (linesDeletedEvent !== null) {\n                                eventsCollector.emitViewEvent(linesDeletedEvent);\n                                this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\n                            }\n                            hadOtherModelChange = true;\n                            break;\n                        }\n                        case 4 /* textModelEvents.RawContentChangedType.LinesInserted */: {\n                            const insertedLineBreaks = lineBreakQueue.takeCount(change.detail.length);\n                            const linesInsertedEvent = this._lines.onModelLinesInserted(versionId, change.fromLineNumber, change.toLineNumber, insertedLineBreaks);\n                            if (linesInsertedEvent !== null) {\n                                eventsCollector.emitViewEvent(linesInsertedEvent);\n                                this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\n                            }\n                            hadOtherModelChange = true;\n                            break;\n                        }\n                        case 2 /* textModelEvents.RawContentChangedType.LineChanged */: {\n                            const changedLineBreakData = lineBreakQueue.dequeue();\n                            const [lineMappingChanged, linesChangedEvent, linesInsertedEvent, linesDeletedEvent] = this._lines.onModelLineChanged(versionId, change.lineNumber, changedLineBreakData);\n                            hadModelLineChangeThatChangedLineMapping = lineMappingChanged;\n                            if (linesChangedEvent) {\n                                eventsCollector.emitViewEvent(linesChangedEvent);\n                            }\n                            if (linesInsertedEvent) {\n                                eventsCollector.emitViewEvent(linesInsertedEvent);\n                                this.viewLayout.onLinesInserted(linesInsertedEvent.fromLineNumber, linesInsertedEvent.toLineNumber);\n                            }\n                            if (linesDeletedEvent) {\n                                eventsCollector.emitViewEvent(linesDeletedEvent);\n                                this.viewLayout.onLinesDeleted(linesDeletedEvent.fromLineNumber, linesDeletedEvent.toLineNumber);\n                            }\n                            break;\n                        }\n                        case 5 /* textModelEvents.RawContentChangedType.EOLChanged */: {\n                            // Nothing to do. The new version will be accepted below\n                            break;\n                        }\n                    }\n                }\n                if (versionId !== null) {\n                    this._lines.acceptVersionId(versionId);\n                }\n                this.viewLayout.onHeightMaybeChanged();\n                if (!hadOtherModelChange && hadModelLineChangeThatChangedLineMapping) {\n                    eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n                    eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n                    this._cursor.onLineMappingChanged(eventsCollector);\n                    this._decorations.onLineMappingChanged();\n                }\n            }\n            finally {\n                this._eventDispatcher.endEmitViewEvents();\n            }\n            // Update the configuration and reset the centered view line\n            const viewportStartWasValid = this._viewportStart.isValid;\n            this._viewportStart.invalidate();\n            this._configuration.setModelLineCount(this.model.getLineCount());\n            this._updateConfigurationViewLineCountNow();\n            // Recover viewport\n            if (!this._hasFocus && this.model.getAttachedEditorCount() >= 2 && viewportStartWasValid) {\n                const modelRange = this.model._getTrackedRange(this._viewportStart.modelTrackedRange);\n                if (modelRange) {\n                    const viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelRange.getStartPosition());\n                    const viewPositionTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n                    this.viewLayout.setScrollPosition({ scrollTop: viewPositionTop + this._viewportStart.startLineDelta }, 1 /* ScrollType.Immediate */);\n                }\n            }\n            try {\n                const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                if (e instanceof textModelEvents.InternalModelContentChangeEvent) {\n                    eventsCollector.emitOutgoingEvent(new ModelContentChangedEvent(e.contentChangedEvent));\n                }\n                this._cursor.onModelContentChanged(eventsCollector, e);\n            }\n            finally {\n                this._eventDispatcher.endEmitViewEvents();\n            }\n            this._handleVisibleLinesChanged();\n        }));\n        this._register(this.model.onDidChangeTokens((e) => {\n            const viewRanges = [];\n            for (let j = 0, lenJ = e.ranges.length; j < lenJ; j++) {\n                const modelRange = e.ranges[j];\n                const viewStartLineNumber = this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.fromLineNumber, 1)).lineNumber;\n                const viewEndLineNumber = this.coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.toLineNumber, this.model.getLineMaxColumn(modelRange.toLineNumber))).lineNumber;\n                viewRanges[j] = {\n                    fromLineNumber: viewStartLineNumber,\n                    toLineNumber: viewEndLineNumber\n                };\n            }\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewTokensChangedEvent(viewRanges));\n            this._eventDispatcher.emitOutgoingEvent(new ModelTokensChangedEvent(e));\n        }));\n        this._register(this.model.onDidChangeLanguageConfiguration((e) => {\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewLanguageConfigurationEvent());\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n            this._cursor.updateConfiguration(this.cursorConfig);\n            this._eventDispatcher.emitOutgoingEvent(new ModelLanguageConfigurationChangedEvent(e));\n        }));\n        this._register(this.model.onDidChangeLanguage((e) => {\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n            this._cursor.updateConfiguration(this.cursorConfig);\n            this._eventDispatcher.emitOutgoingEvent(new ModelLanguageChangedEvent(e));\n        }));\n        this._register(this.model.onDidChangeOptions((e) => {\n            // A tab size change causes a line mapping changed event => all view parts will repaint OK, no further event needed here\n            if (this._lines.setTabSize(this.model.getOptions().tabSize)) {\n                try {\n                    const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                    eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n                    eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n                    eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n                    this._cursor.onLineMappingChanged(eventsCollector);\n                    this._decorations.onLineMappingChanged();\n                    this.viewLayout.onFlushed(this.getLineCount());\n                }\n                finally {\n                    this._eventDispatcher.endEmitViewEvents();\n                }\n                this._updateConfigurationViewLineCount.schedule();\n            }\n            this.cursorConfig = new CursorConfiguration(this.model.getLanguageId(), this.model.getOptions(), this._configuration, this.languageConfigurationService);\n            this._cursor.updateConfiguration(this.cursorConfig);\n            this._eventDispatcher.emitOutgoingEvent(new ModelOptionsChangedEvent(e));\n        }));\n        this._register(this.model.onDidChangeDecorations((e) => {\n            this._decorations.onModelDecorationsChanged();\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewDecorationsChangedEvent(e));\n            this._eventDispatcher.emitOutgoingEvent(new ModelDecorationsChangedEvent(e));\n        }));\n    }\n    setHiddenAreas(ranges, source) {\n        this.hiddenAreasModel.setHiddenAreas(source, ranges);\n        const mergedRanges = this.hiddenAreasModel.getMergedRanges();\n        if (mergedRanges === this.previousHiddenAreas) {\n            return;\n        }\n        this.previousHiddenAreas = mergedRanges;\n        const stableViewport = this._captureStableViewport();\n        let lineMappingChanged = false;\n        try {\n            const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n            lineMappingChanged = this._lines.setHiddenAreas(mergedRanges);\n            if (lineMappingChanged) {\n                eventsCollector.emitViewEvent(new viewEvents.ViewFlushedEvent());\n                eventsCollector.emitViewEvent(new viewEvents.ViewLineMappingChangedEvent());\n                eventsCollector.emitViewEvent(new viewEvents.ViewDecorationsChangedEvent(null));\n                this._cursor.onLineMappingChanged(eventsCollector);\n                this._decorations.onLineMappingChanged();\n                this.viewLayout.onFlushed(this.getLineCount());\n                this.viewLayout.onHeightMaybeChanged();\n            }\n            const firstModelLineInViewPort = stableViewport.viewportStartModelPosition?.lineNumber;\n            const firstModelLineIsHidden = firstModelLineInViewPort && mergedRanges.some(range => range.startLineNumber <= firstModelLineInViewPort && firstModelLineInViewPort <= range.endLineNumber);\n            if (!firstModelLineIsHidden) {\n                stableViewport.recoverViewportStart(this.coordinatesConverter, this.viewLayout);\n            }\n        }\n        finally {\n            this._eventDispatcher.endEmitViewEvents();\n        }\n        this._updateConfigurationViewLineCount.schedule();\n        if (lineMappingChanged) {\n            this._eventDispatcher.emitOutgoingEvent(new HiddenAreasChangedEvent());\n        }\n    }\n    getVisibleRangesPlusViewportAboveBelow() {\n        const layoutInfo = this._configuration.options.get(146 /* EditorOption.layoutInfo */);\n        const lineHeight = this._configuration.options.get(67 /* EditorOption.lineHeight */);\n        const linesAround = Math.max(20, Math.round(layoutInfo.height / lineHeight));\n        const partialData = this.viewLayout.getLinesViewportData();\n        const startViewLineNumber = Math.max(1, partialData.completelyVisibleStartLineNumber - linesAround);\n        const endViewLineNumber = Math.min(this.getLineCount(), partialData.completelyVisibleEndLineNumber + linesAround);\n        return this._toModelVisibleRanges(new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber)));\n    }\n    getVisibleRanges() {\n        const visibleViewRange = this.getCompletelyVisibleViewRange();\n        return this._toModelVisibleRanges(visibleViewRange);\n    }\n    getHiddenAreas() {\n        return this._lines.getHiddenAreas();\n    }\n    _toModelVisibleRanges(visibleViewRange) {\n        const visibleRange = this.coordinatesConverter.convertViewRangeToModelRange(visibleViewRange);\n        const hiddenAreas = this._lines.getHiddenAreas();\n        if (hiddenAreas.length === 0) {\n            return [visibleRange];\n        }\n        const result = [];\n        let resultLen = 0;\n        let startLineNumber = visibleRange.startLineNumber;\n        let startColumn = visibleRange.startColumn;\n        const endLineNumber = visibleRange.endLineNumber;\n        const endColumn = visibleRange.endColumn;\n        for (let i = 0, len = hiddenAreas.length; i < len; i++) {\n            const hiddenStartLineNumber = hiddenAreas[i].startLineNumber;\n            const hiddenEndLineNumber = hiddenAreas[i].endLineNumber;\n            if (hiddenEndLineNumber < startLineNumber) {\n                continue;\n            }\n            if (hiddenStartLineNumber > endLineNumber) {\n                continue;\n            }\n            if (startLineNumber < hiddenStartLineNumber) {\n                result[resultLen++] = new Range(startLineNumber, startColumn, hiddenStartLineNumber - 1, this.model.getLineMaxColumn(hiddenStartLineNumber - 1));\n            }\n            startLineNumber = hiddenEndLineNumber + 1;\n            startColumn = 1;\n        }\n        if (startLineNumber < endLineNumber || (startLineNumber === endLineNumber && startColumn < endColumn)) {\n            result[resultLen++] = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n        }\n        return result;\n    }\n    getCompletelyVisibleViewRange() {\n        const partialData = this.viewLayout.getLinesViewportData();\n        const startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n        const endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n        return new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\n    }\n    getCompletelyVisibleViewRangeAtScrollTop(scrollTop) {\n        const partialData = this.viewLayout.getLinesViewportDataAtScrollTop(scrollTop);\n        const startViewLineNumber = partialData.completelyVisibleStartLineNumber;\n        const endViewLineNumber = partialData.completelyVisibleEndLineNumber;\n        return new Range(startViewLineNumber, this.getLineMinColumn(startViewLineNumber), endViewLineNumber, this.getLineMaxColumn(endViewLineNumber));\n    }\n    saveState() {\n        const compatViewState = this.viewLayout.saveState();\n        const scrollTop = compatViewState.scrollTop;\n        const firstViewLineNumber = this.viewLayout.getLineNumberAtVerticalOffset(scrollTop);\n        const firstPosition = this.coordinatesConverter.convertViewPositionToModelPosition(new Position(firstViewLineNumber, this.getLineMinColumn(firstViewLineNumber)));\n        const firstPositionDeltaTop = this.viewLayout.getVerticalOffsetForLineNumber(firstViewLineNumber) - scrollTop;\n        return {\n            scrollLeft: compatViewState.scrollLeft,\n            firstPosition: firstPosition,\n            firstPositionDeltaTop: firstPositionDeltaTop\n        };\n    }\n    reduceRestoreState(state) {\n        if (typeof state.firstPosition === 'undefined') {\n            // This is a view state serialized by an older version\n            return this._reduceRestoreStateCompatibility(state);\n        }\n        const modelPosition = this.model.validatePosition(state.firstPosition);\n        const viewPosition = this.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n        const scrollTop = this.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber) - state.firstPositionDeltaTop;\n        return {\n            scrollLeft: state.scrollLeft,\n            scrollTop: scrollTop\n        };\n    }\n    _reduceRestoreStateCompatibility(state) {\n        return {\n            scrollLeft: state.scrollLeft,\n            scrollTop: state.scrollTopWithoutViewZones\n        };\n    }\n    getTabSize() {\n        return this.model.getOptions().tabSize;\n    }\n    getLineCount() {\n        return this._lines.getViewLineCount();\n    }\n    /**\n     * Gives a hint that a lot of requests are about to come in for these line numbers.\n     */\n    setViewport(startLineNumber, endLineNumber, centeredLineNumber) {\n        this._viewportStart.update(this, startLineNumber);\n    }\n    getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber) {\n        return this._lines.getActiveIndentGuide(lineNumber, minLineNumber, maxLineNumber);\n    }\n    getLinesIndentGuides(startLineNumber, endLineNumber) {\n        return this._lines.getViewLinesIndentGuides(startLineNumber, endLineNumber);\n    }\n    getBracketGuidesInRangeByLine(startLineNumber, endLineNumber, activePosition, options) {\n        return this._lines.getViewLinesBracketGuides(startLineNumber, endLineNumber, activePosition, options);\n    }\n    getLineContent(lineNumber) {\n        return this._lines.getViewLineContent(lineNumber);\n    }\n    getLineLength(lineNumber) {\n        return this._lines.getViewLineLength(lineNumber);\n    }\n    getLineMinColumn(lineNumber) {\n        return this._lines.getViewLineMinColumn(lineNumber);\n    }\n    getLineMaxColumn(lineNumber) {\n        return this._lines.getViewLineMaxColumn(lineNumber);\n    }\n    getLineFirstNonWhitespaceColumn(lineNumber) {\n        const result = strings.firstNonWhitespaceIndex(this.getLineContent(lineNumber));\n        if (result === -1) {\n            return 0;\n        }\n        return result + 1;\n    }\n    getLineLastNonWhitespaceColumn(lineNumber) {\n        const result = strings.lastNonWhitespaceIndex(this.getLineContent(lineNumber));\n        if (result === -1) {\n            return 0;\n        }\n        return result + 2;\n    }\n    getMinimapDecorationsInRange(range) {\n        return this._decorations.getMinimapDecorationsInRange(range);\n    }\n    getDecorationsInViewport(visibleRange) {\n        return this._decorations.getDecorationsViewportData(visibleRange).decorations;\n    }\n    getInjectedTextAt(viewPosition) {\n        return this._lines.getInjectedTextAt(viewPosition);\n    }\n    getViewportViewLineRenderingData(visibleRange, lineNumber) {\n        const allInlineDecorations = this._decorations.getDecorationsViewportData(visibleRange).inlineDecorations;\n        const inlineDecorations = allInlineDecorations[lineNumber - visibleRange.startLineNumber];\n        return this._getViewLineRenderingData(lineNumber, inlineDecorations);\n    }\n    getViewLineRenderingData(lineNumber) {\n        const inlineDecorations = this._decorations.getInlineDecorationsOnLine(lineNumber);\n        return this._getViewLineRenderingData(lineNumber, inlineDecorations);\n    }\n    _getViewLineRenderingData(lineNumber, inlineDecorations) {\n        const mightContainRTL = this.model.mightContainRTL();\n        const mightContainNonBasicASCII = this.model.mightContainNonBasicASCII();\n        const tabSize = this.getTabSize();\n        const lineData = this._lines.getViewLineData(lineNumber);\n        if (lineData.inlineDecorations) {\n            inlineDecorations = [\n                ...inlineDecorations,\n                ...lineData.inlineDecorations.map(d => d.toInlineDecoration(lineNumber))\n            ];\n        }\n        return new ViewLineRenderingData(lineData.minColumn, lineData.maxColumn, lineData.content, lineData.continuesWithWrappedLine, mightContainRTL, mightContainNonBasicASCII, lineData.tokens, inlineDecorations, tabSize, lineData.startVisibleColumn);\n    }\n    getViewLineData(lineNumber) {\n        return this._lines.getViewLineData(lineNumber);\n    }\n    getMinimapLinesRenderingData(startLineNumber, endLineNumber, needed) {\n        const result = this._lines.getViewLinesData(startLineNumber, endLineNumber, needed);\n        return new MinimapLinesRenderingData(this.getTabSize(), result);\n    }\n    getAllOverviewRulerDecorations(theme) {\n        const decorations = this.model.getOverviewRulerDecorations(this._editorId, filterValidationDecorations(this._configuration.options));\n        const result = new OverviewRulerDecorations();\n        for (const decoration of decorations) {\n            const decorationOptions = decoration.options;\n            const opts = decorationOptions.overviewRuler;\n            if (!opts) {\n                continue;\n            }\n            const lane = opts.position;\n            if (lane === 0) {\n                continue;\n            }\n            const color = opts.getColor(theme.value);\n            const viewStartLineNumber = this.coordinatesConverter.getViewLineNumberOfModelPosition(decoration.range.startLineNumber, decoration.range.startColumn);\n            const viewEndLineNumber = this.coordinatesConverter.getViewLineNumberOfModelPosition(decoration.range.endLineNumber, decoration.range.endColumn);\n            result.accept(color, decorationOptions.zIndex, viewStartLineNumber, viewEndLineNumber, lane);\n        }\n        return result.asArray;\n    }\n    _invalidateDecorationsColorCache() {\n        const decorations = this.model.getOverviewRulerDecorations();\n        for (const decoration of decorations) {\n            const opts1 = decoration.options.overviewRuler;\n            opts1?.invalidateCachedColor();\n            const opts2 = decoration.options.minimap;\n            opts2?.invalidateCachedColor();\n        }\n    }\n    getValueInRange(range, eol) {\n        const modelRange = this.coordinatesConverter.convertViewRangeToModelRange(range);\n        return this.model.getValueInRange(modelRange, eol);\n    }\n    getValueLengthInRange(range, eol) {\n        const modelRange = this.coordinatesConverter.convertViewRangeToModelRange(range);\n        return this.model.getValueLengthInRange(modelRange, eol);\n    }\n    modifyPosition(position, offset) {\n        const modelPosition = this.coordinatesConverter.convertViewPositionToModelPosition(position);\n        const resultModelPosition = this.model.modifyPosition(modelPosition, offset);\n        return this.coordinatesConverter.convertModelPositionToViewPosition(resultModelPosition);\n    }\n    deduceModelPositionRelativeToViewPosition(viewAnchorPosition, deltaOffset, lineFeedCnt) {\n        const modelAnchor = this.coordinatesConverter.convertViewPositionToModelPosition(viewAnchorPosition);\n        if (this.model.getEOL().length === 2) {\n            // This model uses CRLF, so the delta must take that into account\n            if (deltaOffset < 0) {\n                deltaOffset -= lineFeedCnt;\n            }\n            else {\n                deltaOffset += lineFeedCnt;\n            }\n        }\n        const modelAnchorOffset = this.model.getOffsetAt(modelAnchor);\n        const resultOffset = modelAnchorOffset + deltaOffset;\n        return this.model.getPositionAt(resultOffset);\n    }\n    getPlainTextToCopy(modelRanges, emptySelectionClipboard, forceCRLF) {\n        const newLineCharacter = forceCRLF ? '\\r\\n' : this.model.getEOL();\n        modelRanges = modelRanges.slice(0);\n        modelRanges.sort(Range.compareRangesUsingStarts);\n        let hasEmptyRange = false;\n        let hasNonEmptyRange = false;\n        for (const range of modelRanges) {\n            if (range.isEmpty()) {\n                hasEmptyRange = true;\n            }\n            else {\n                hasNonEmptyRange = true;\n            }\n        }\n        if (!hasNonEmptyRange) {\n            // all ranges are empty\n            if (!emptySelectionClipboard) {\n                return '';\n            }\n            const modelLineNumbers = modelRanges.map((r) => r.startLineNumber);\n            let result = '';\n            for (let i = 0; i < modelLineNumbers.length; i++) {\n                if (i > 0 && modelLineNumbers[i - 1] === modelLineNumbers[i]) {\n                    continue;\n                }\n                result += this.model.getLineContent(modelLineNumbers[i]) + newLineCharacter;\n            }\n            return result;\n        }\n        if (hasEmptyRange && emptySelectionClipboard) {\n            // mixed empty selections and non-empty selections\n            const result = [];\n            let prevModelLineNumber = 0;\n            for (const modelRange of modelRanges) {\n                const modelLineNumber = modelRange.startLineNumber;\n                if (modelRange.isEmpty()) {\n                    if (modelLineNumber !== prevModelLineNumber) {\n                        result.push(this.model.getLineContent(modelLineNumber));\n                    }\n                }\n                else {\n                    result.push(this.model.getValueInRange(modelRange, forceCRLF ? 2 /* EndOfLinePreference.CRLF */ : 0 /* EndOfLinePreference.TextDefined */));\n                }\n                prevModelLineNumber = modelLineNumber;\n            }\n            return result.length === 1 ? result[0] : result;\n        }\n        const result = [];\n        for (const modelRange of modelRanges) {\n            if (!modelRange.isEmpty()) {\n                result.push(this.model.getValueInRange(modelRange, forceCRLF ? 2 /* EndOfLinePreference.CRLF */ : 0 /* EndOfLinePreference.TextDefined */));\n            }\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n    getRichTextToCopy(modelRanges, emptySelectionClipboard) {\n        const languageId = this.model.getLanguageId();\n        if (languageId === PLAINTEXT_LANGUAGE_ID) {\n            return null;\n        }\n        if (modelRanges.length !== 1) {\n            // no multiple selection support at this time\n            return null;\n        }\n        let range = modelRanges[0];\n        if (range.isEmpty()) {\n            if (!emptySelectionClipboard) {\n                // nothing to copy\n                return null;\n            }\n            const lineNumber = range.startLineNumber;\n            range = new Range(lineNumber, this.model.getLineMinColumn(lineNumber), lineNumber, this.model.getLineMaxColumn(lineNumber));\n        }\n        const fontInfo = this._configuration.options.get(50 /* EditorOption.fontInfo */);\n        const colorMap = this._getColorMap();\n        const hasBadChars = (/[:;\\\\\\/<>]/.test(fontInfo.fontFamily));\n        const useDefaultFontFamily = (hasBadChars || fontInfo.fontFamily === EDITOR_FONT_DEFAULTS.fontFamily);\n        let fontFamily;\n        if (useDefaultFontFamily) {\n            fontFamily = EDITOR_FONT_DEFAULTS.fontFamily;\n        }\n        else {\n            fontFamily = fontInfo.fontFamily;\n            fontFamily = fontFamily.replace(/\"/g, '\\'');\n            const hasQuotesOrIsList = /[,']/.test(fontFamily);\n            if (!hasQuotesOrIsList) {\n                const needsQuotes = /[+ ]/.test(fontFamily);\n                if (needsQuotes) {\n                    fontFamily = `'${fontFamily}'`;\n                }\n            }\n            fontFamily = `${fontFamily}, ${EDITOR_FONT_DEFAULTS.fontFamily}`;\n        }\n        return {\n            mode: languageId,\n            html: (`<div style=\"`\n                + `color: ${colorMap[1 /* ColorId.DefaultForeground */]};`\n                + `background-color: ${colorMap[2 /* ColorId.DefaultBackground */]};`\n                + `font-family: ${fontFamily};`\n                + `font-weight: ${fontInfo.fontWeight};`\n                + `font-size: ${fontInfo.fontSize}px;`\n                + `line-height: ${fontInfo.lineHeight}px;`\n                + `white-space: pre;`\n                + `\">`\n                + this._getHTMLToCopy(range, colorMap)\n                + '</div>')\n        };\n    }\n    _getHTMLToCopy(modelRange, colorMap) {\n        const startLineNumber = modelRange.startLineNumber;\n        const startColumn = modelRange.startColumn;\n        const endLineNumber = modelRange.endLineNumber;\n        const endColumn = modelRange.endColumn;\n        const tabSize = this.getTabSize();\n        let result = '';\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const lineTokens = this.model.tokenization.getLineTokens(lineNumber);\n            const lineContent = lineTokens.getLineContent();\n            const startOffset = (lineNumber === startLineNumber ? startColumn - 1 : 0);\n            const endOffset = (lineNumber === endLineNumber ? endColumn - 1 : lineContent.length);\n            if (lineContent === '') {\n                result += '<br>';\n            }\n            else {\n                result += tokenizeLineToHTML(lineContent, lineTokens.inflate(), colorMap, startOffset, endOffset, tabSize, platform.isWindows);\n            }\n        }\n        return result;\n    }\n    _getColorMap() {\n        const colorMap = TokenizationRegistry.getColorMap();\n        const result = ['#000000'];\n        if (colorMap) {\n            for (let i = 1, len = colorMap.length; i < len; i++) {\n                result[i] = Color.Format.CSS.formatHex(colorMap[i]);\n            }\n        }\n        return result;\n    }\n    //#region cursor operations\n    getPrimaryCursorState() {\n        return this._cursor.getPrimaryCursorState();\n    }\n    getLastAddedCursorIndex() {\n        return this._cursor.getLastAddedCursorIndex();\n    }\n    getCursorStates() {\n        return this._cursor.getCursorStates();\n    }\n    setCursorStates(source, reason, states) {\n        return this._withViewEventsCollector(eventsCollector => this._cursor.setStates(eventsCollector, source, reason, states));\n    }\n    getCursorColumnSelectData() {\n        return this._cursor.getCursorColumnSelectData();\n    }\n    getCursorAutoClosedCharacters() {\n        return this._cursor.getAutoClosedCharacters();\n    }\n    setCursorColumnSelectData(columnSelectData) {\n        this._cursor.setCursorColumnSelectData(columnSelectData);\n    }\n    getPrevEditOperationType() {\n        return this._cursor.getPrevEditOperationType();\n    }\n    setPrevEditOperationType(type) {\n        this._cursor.setPrevEditOperationType(type);\n    }\n    getSelection() {\n        return this._cursor.getSelection();\n    }\n    getSelections() {\n        return this._cursor.getSelections();\n    }\n    getPosition() {\n        return this._cursor.getPrimaryCursorState().modelState.position;\n    }\n    setSelections(source, selections, reason = 0 /* CursorChangeReason.NotSet */) {\n        this._withViewEventsCollector(eventsCollector => this._cursor.setSelections(eventsCollector, source, selections, reason));\n    }\n    saveCursorState() {\n        return this._cursor.saveState();\n    }\n    restoreCursorState(states) {\n        this._withViewEventsCollector(eventsCollector => this._cursor.restoreState(eventsCollector, states));\n    }\n    _executeCursorEdit(callback) {\n        if (this._cursor.context.cursorConfig.readOnly) {\n            // we cannot edit when read only...\n            this._eventDispatcher.emitOutgoingEvent(new ReadOnlyEditAttemptEvent());\n            return;\n        }\n        this._withViewEventsCollector(callback);\n    }\n    executeEdits(source, edits, cursorStateComputer) {\n        this._executeCursorEdit(eventsCollector => this._cursor.executeEdits(eventsCollector, source, edits, cursorStateComputer));\n    }\n    startComposition() {\n        this._executeCursorEdit(eventsCollector => this._cursor.startComposition(eventsCollector));\n    }\n    endComposition(source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.endComposition(eventsCollector, source));\n    }\n    type(text, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.type(eventsCollector, text, source));\n    }\n    compositionType(text, replacePrevCharCnt, replaceNextCharCnt, positionDelta, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.compositionType(eventsCollector, text, replacePrevCharCnt, replaceNextCharCnt, positionDelta, source));\n    }\n    paste(text, pasteOnNewLine, multicursorText, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.paste(eventsCollector, text, pasteOnNewLine, multicursorText, source));\n    }\n    cut(source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.cut(eventsCollector, source));\n    }\n    executeCommand(command, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.executeCommand(eventsCollector, command, source));\n    }\n    executeCommands(commands, source) {\n        this._executeCursorEdit(eventsCollector => this._cursor.executeCommands(eventsCollector, commands, source));\n    }\n    revealAllCursors(source, revealHorizontal, minimalReveal = false) {\n        this._withViewEventsCollector(eventsCollector => this._cursor.revealAll(eventsCollector, source, minimalReveal, 0 /* viewEvents.VerticalRevealType.Simple */, revealHorizontal, 0 /* ScrollType.Smooth */));\n    }\n    revealPrimaryCursor(source, revealHorizontal, minimalReveal = false) {\n        this._withViewEventsCollector(eventsCollector => this._cursor.revealPrimary(eventsCollector, source, minimalReveal, 0 /* viewEvents.VerticalRevealType.Simple */, revealHorizontal, 0 /* ScrollType.Smooth */));\n    }\n    revealTopMostCursor(source) {\n        const viewPosition = this._cursor.getTopMostViewPosition();\n        const viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\n        this._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, 0 /* viewEvents.VerticalRevealType.Simple */, true, 0 /* ScrollType.Smooth */)));\n    }\n    revealBottomMostCursor(source) {\n        const viewPosition = this._cursor.getBottomMostViewPosition();\n        const viewRange = new Range(viewPosition.lineNumber, viewPosition.column, viewPosition.lineNumber, viewPosition.column);\n        this._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, 0 /* viewEvents.VerticalRevealType.Simple */, true, 0 /* ScrollType.Smooth */)));\n    }\n    revealRange(source, revealHorizontal, viewRange, verticalType, scrollType) {\n        this._withViewEventsCollector(eventsCollector => eventsCollector.emitViewEvent(new viewEvents.ViewRevealRangeRequestEvent(source, false, viewRange, null, verticalType, revealHorizontal, scrollType)));\n    }\n    //#endregion\n    //#region viewLayout\n    changeWhitespace(callback) {\n        const hadAChange = this.viewLayout.changeWhitespace(callback);\n        if (hadAChange) {\n            this._eventDispatcher.emitSingleViewEvent(new viewEvents.ViewZonesChangedEvent());\n            this._eventDispatcher.emitOutgoingEvent(new ViewZonesChangedEvent());\n        }\n    }\n    //#endregion\n    _withViewEventsCollector(callback) {\n        return this._transactionalTarget.batchChanges(() => {\n            try {\n                const eventsCollector = this._eventDispatcher.beginEmitViewEvents();\n                return callback(eventsCollector);\n            }\n            finally {\n                this._eventDispatcher.endEmitViewEvents();\n            }\n        });\n    }\n    batchEvents(callback) {\n        this._withViewEventsCollector(() => { callback(); });\n    }\n    normalizePosition(position, affinity) {\n        return this._lines.normalizePosition(position, affinity);\n    }\n    /**\n     * Gets the column at which indentation stops at a given line.\n     * @internal\n    */\n    getLineIndentColumn(lineNumber) {\n        return this._lines.getLineIndentColumn(lineNumber);\n    }\n}\nclass ViewportStart {\n    static create(model) {\n        const viewportStartLineTrackedRange = model._setTrackedRange(null, new Range(1, 1, 1, 1), 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */);\n        return new ViewportStart(model, 1, false, viewportStartLineTrackedRange, 0);\n    }\n    get viewLineNumber() {\n        return this._viewLineNumber;\n    }\n    get isValid() {\n        return this._isValid;\n    }\n    get modelTrackedRange() {\n        return this._modelTrackedRange;\n    }\n    get startLineDelta() {\n        return this._startLineDelta;\n    }\n    constructor(_model, _viewLineNumber, _isValid, _modelTrackedRange, _startLineDelta) {\n        this._model = _model;\n        this._viewLineNumber = _viewLineNumber;\n        this._isValid = _isValid;\n        this._modelTrackedRange = _modelTrackedRange;\n        this._startLineDelta = _startLineDelta;\n    }\n    dispose() {\n        this._model._setTrackedRange(this._modelTrackedRange, null, 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */);\n    }\n    update(viewModel, startLineNumber) {\n        const position = viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(startLineNumber, viewModel.getLineMinColumn(startLineNumber)));\n        const viewportStartLineTrackedRange = viewModel.model._setTrackedRange(this._modelTrackedRange, new Range(position.lineNumber, position.column, position.lineNumber, position.column), 1 /* TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges */);\n        const viewportStartLineTop = viewModel.viewLayout.getVerticalOffsetForLineNumber(startLineNumber);\n        const scrollTop = viewModel.viewLayout.getCurrentScrollTop();\n        this._viewLineNumber = startLineNumber;\n        this._isValid = true;\n        this._modelTrackedRange = viewportStartLineTrackedRange;\n        this._startLineDelta = scrollTop - viewportStartLineTop;\n    }\n    invalidate() {\n        this._isValid = false;\n    }\n}\nclass OverviewRulerDecorations {\n    constructor() {\n        this._asMap = Object.create(null);\n        this.asArray = [];\n    }\n    accept(color, zIndex, startLineNumber, endLineNumber, lane) {\n        const prevGroup = this._asMap[color];\n        if (prevGroup) {\n            const prevData = prevGroup.data;\n            const prevLane = prevData[prevData.length - 3];\n            const prevEndLineNumber = prevData[prevData.length - 1];\n            if (prevLane === lane && prevEndLineNumber + 1 >= startLineNumber) {\n                // merge into prev\n                if (endLineNumber > prevEndLineNumber) {\n                    prevData[prevData.length - 1] = endLineNumber;\n                }\n                return;\n            }\n            // push\n            prevData.push(lane, startLineNumber, endLineNumber);\n        }\n        else {\n            const group = new OverviewRulerDecorationsGroup(color, zIndex, [lane, startLineNumber, endLineNumber]);\n            this._asMap[color] = group;\n            this.asArray.push(group);\n        }\n    }\n}\nclass HiddenAreasModel {\n    constructor() {\n        this.hiddenAreas = new Map();\n        this.shouldRecompute = false;\n        this.ranges = [];\n    }\n    setHiddenAreas(source, ranges) {\n        const existing = this.hiddenAreas.get(source);\n        if (existing && rangeArraysEqual(existing, ranges)) {\n            return;\n        }\n        this.hiddenAreas.set(source, ranges);\n        this.shouldRecompute = true;\n    }\n    /**\n     * The returned array is immutable.\n    */\n    getMergedRanges() {\n        if (!this.shouldRecompute) {\n            return this.ranges;\n        }\n        this.shouldRecompute = false;\n        const newRanges = Array.from(this.hiddenAreas.values()).reduce((r, hiddenAreas) => mergeLineRangeArray(r, hiddenAreas), []);\n        if (rangeArraysEqual(this.ranges, newRanges)) {\n            return this.ranges;\n        }\n        this.ranges = newRanges;\n        return this.ranges;\n    }\n}\nfunction mergeLineRangeArray(arr1, arr2) {\n    const result = [];\n    let i = 0;\n    let j = 0;\n    while (i < arr1.length && j < arr2.length) {\n        const item1 = arr1[i];\n        const item2 = arr2[j];\n        if (item1.endLineNumber < item2.startLineNumber - 1) {\n            result.push(arr1[i++]);\n        }\n        else if (item2.endLineNumber < item1.startLineNumber - 1) {\n            result.push(arr2[j++]);\n        }\n        else {\n            const startLineNumber = Math.min(item1.startLineNumber, item2.startLineNumber);\n            const endLineNumber = Math.max(item1.endLineNumber, item2.endLineNumber);\n            result.push(new Range(startLineNumber, 1, endLineNumber, 1));\n            i++;\n            j++;\n        }\n    }\n    while (i < arr1.length) {\n        result.push(arr1[i++]);\n    }\n    while (j < arr2.length) {\n        result.push(arr2[j++]);\n    }\n    return result;\n}\nfunction rangeArraysEqual(arr1, arr2) {\n    if (arr1.length !== arr2.length) {\n        return false;\n    }\n    for (let i = 0; i < arr1.length; i++) {\n        if (!arr1[i].equalsRange(arr2[i])) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Maintain a stable viewport by trying to keep the first line in the viewport constant.\n */\nclass StableViewport {\n    constructor(viewportStartModelPosition, startLineDelta) {\n        this.viewportStartModelPosition = viewportStartModelPosition;\n        this.startLineDelta = startLineDelta;\n    }\n    recoverViewportStart(coordinatesConverter, viewLayout) {\n        if (!this.viewportStartModelPosition) {\n            return;\n        }\n        const viewPosition = coordinatesConverter.convertModelPositionToViewPosition(this.viewportStartModelPosition);\n        const viewPositionTop = viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n        viewLayout.setScrollPosition({ scrollTop: viewPositionTop + this.startLineDelta }, 1 /* ScrollType.Immediate */);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}