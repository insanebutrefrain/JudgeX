{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { Color } from '../../../../base/common/color.js';\nimport { registerColor, transparent } from '../colorUtils.js';\n// Import the colors we need\nimport { contrastBorder, focusBorder } from './baseColors.js';\n// ----- sash\nexport const sashHoverBorder = registerColor('sash.hoverBorder', focusBorder, nls.localize('sashActiveBorder', \"Border color of active sashes.\"));\n// ----- badge\nexport const badgeBackground = registerColor('badge.background', {\n  dark: '#4D4D4D',\n  light: '#C4C4C4',\n  hcDark: Color.black,\n  hcLight: '#0F4A85'\n}, nls.localize('badgeBackground', \"Badge background color. Badges are small information labels, e.g. for search results count.\"));\nexport const badgeForeground = registerColor('badge.foreground', {\n  dark: Color.white,\n  light: '#333',\n  hcDark: Color.white,\n  hcLight: Color.white\n}, nls.localize('badgeForeground', \"Badge foreground color. Badges are small information labels, e.g. for search results count.\"));\n// ----- scrollbar\nexport const scrollbarShadow = registerColor('scrollbar.shadow', {\n  dark: '#000000',\n  light: '#DDDDDD',\n  hcDark: null,\n  hcLight: null\n}, nls.localize('scrollbarShadow', \"Scrollbar shadow to indicate that the view is scrolled.\"));\nexport const scrollbarSliderBackground = registerColor('scrollbarSlider.background', {\n  dark: Color.fromHex('#797979').transparent(0.4),\n  light: Color.fromHex('#646464').transparent(0.4),\n  hcDark: transparent(contrastBorder, 0.6),\n  hcLight: transparent(contrastBorder, 0.4)\n}, nls.localize('scrollbarSliderBackground', \"Scrollbar slider background color.\"));\nexport const scrollbarSliderHoverBackground = registerColor('scrollbarSlider.hoverBackground', {\n  dark: Color.fromHex('#646464').transparent(0.7),\n  light: Color.fromHex('#646464').transparent(0.7),\n  hcDark: transparent(contrastBorder, 0.8),\n  hcLight: transparent(contrastBorder, 0.8)\n}, nls.localize('scrollbarSliderHoverBackground', \"Scrollbar slider background color when hovering.\"));\nexport const scrollbarSliderActiveBackground = registerColor('scrollbarSlider.activeBackground', {\n  dark: Color.fromHex('#BFBFBF').transparent(0.4),\n  light: Color.fromHex('#000000').transparent(0.6),\n  hcDark: contrastBorder,\n  hcLight: contrastBorder\n}, nls.localize('scrollbarSliderActiveBackground', \"Scrollbar slider background color when clicked on.\"));\n// ----- progress bar\nexport const progressBarBackground = registerColor('progressBar.background', {\n  dark: Color.fromHex('#0E70C0'),\n  light: Color.fromHex('#0E70C0'),\n  hcDark: contrastBorder,\n  hcLight: contrastBorder\n}, nls.localize('progressBarBackground', \"Background color of the progress bar that can show for long running operations.\"));","map":{"version":3,"names":["nls","Color","registerColor","transparent","contrastBorder","focusBorder","sashHoverBorder","localize","badgeBackground","dark","light","hcDark","black","hcLight","badgeForeground","white","scrollbarShadow","scrollbarSliderBackground","fromHex","scrollbarSliderHoverBackground","scrollbarSliderActiveBackground","progressBarBackground"],"sources":["P:/WebStorm/judgex_front/node_modules/monaco-editor/esm/vs/platform/theme/common/colors/miscColors.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { Color } from '../../../../base/common/color.js';\nimport { registerColor, transparent } from '../colorUtils.js';\n// Import the colors we need\nimport { contrastBorder, focusBorder } from './baseColors.js';\n// ----- sash\nexport const sashHoverBorder = registerColor('sash.hoverBorder', focusBorder, nls.localize('sashActiveBorder', \"Border color of active sashes.\"));\n// ----- badge\nexport const badgeBackground = registerColor('badge.background', { dark: '#4D4D4D', light: '#C4C4C4', hcDark: Color.black, hcLight: '#0F4A85' }, nls.localize('badgeBackground', \"Badge background color. Badges are small information labels, e.g. for search results count.\"));\nexport const badgeForeground = registerColor('badge.foreground', { dark: Color.white, light: '#333', hcDark: Color.white, hcLight: Color.white }, nls.localize('badgeForeground', \"Badge foreground color. Badges are small information labels, e.g. for search results count.\"));\n// ----- scrollbar\nexport const scrollbarShadow = registerColor('scrollbar.shadow', { dark: '#000000', light: '#DDDDDD', hcDark: null, hcLight: null }, nls.localize('scrollbarShadow', \"Scrollbar shadow to indicate that the view is scrolled.\"));\nexport const scrollbarSliderBackground = registerColor('scrollbarSlider.background', { dark: Color.fromHex('#797979').transparent(0.4), light: Color.fromHex('#646464').transparent(0.4), hcDark: transparent(contrastBorder, 0.6), hcLight: transparent(contrastBorder, 0.4) }, nls.localize('scrollbarSliderBackground', \"Scrollbar slider background color.\"));\nexport const scrollbarSliderHoverBackground = registerColor('scrollbarSlider.hoverBackground', { dark: Color.fromHex('#646464').transparent(0.7), light: Color.fromHex('#646464').transparent(0.7), hcDark: transparent(contrastBorder, 0.8), hcLight: transparent(contrastBorder, 0.8) }, nls.localize('scrollbarSliderHoverBackground', \"Scrollbar slider background color when hovering.\"));\nexport const scrollbarSliderActiveBackground = registerColor('scrollbarSlider.activeBackground', { dark: Color.fromHex('#BFBFBF').transparent(0.4), light: Color.fromHex('#000000').transparent(0.6), hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('scrollbarSliderActiveBackground', \"Scrollbar slider background color when clicked on.\"));\n// ----- progress bar\nexport const progressBarBackground = registerColor('progressBar.background', { dark: Color.fromHex('#0E70C0'), light: Color.fromHex('#0E70C0'), hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('progressBarBackground', \"Background color of the progress bar that can show for long running operations.\"));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}