{"ast":null,"code":"var _EventProfiling, _LeakageMonitor;\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { onUnexpectedError } from './errors.js';\nimport { createSingleCallFunction } from './functional.js';\nimport { combinedDisposable, Disposable, DisposableStore, toDisposable } from './lifecycle.js';\nimport { LinkedList } from './linkedList.js';\nimport { StopWatch } from './stopwatch.js';\n// -----------------------------------------------------------------------------------------------------------------------\n// Uncomment the next line to print warnings whenever a listener is GC'ed without having been disposed. This is a LEAK.\n// -----------------------------------------------------------------------------------------------------------------------\nconst _enableListenerGCedWarning = false;\n// -----------------------------------------------------------------------------------------------------------------------\n// Uncomment the next line to print warnings whenever an emitter with listeners is disposed. That is a sign of code smell.\n// -----------------------------------------------------------------------------------------------------------------------\nconst _enableDisposeWithListenerWarning = false;\n// -----------------------------------------------------------------------------------------------------------------------\n// Uncomment the next line to print warnings whenever a snapshotted event is used repeatedly without cleanup.\n// See https://github.com/microsoft/vscode/issues/142851\n// -----------------------------------------------------------------------------------------------------------------------\nconst _enableSnapshotPotentialLeakWarning = false;\nexport var Event;\n(function (Event) {\n  Event.None = () => Disposable.None;\n  function _addLeakageTraceLogic(options) {\n    if (_enableSnapshotPotentialLeakWarning) {\n      const {\n        onDidAddListener: origListenerDidAdd\n      } = options;\n      const stack = Stacktrace.create();\n      let count = 0;\n      options.onDidAddListener = () => {\n        if (++count === 2) {\n          console.warn('snapshotted emitter LIKELY used public and SHOULD HAVE BEEN created with DisposableStore. snapshotted here');\n          stack.print();\n        }\n        origListenerDidAdd?.();\n      };\n    }\n  }\n  /**\n   * Given an event, returns another event which debounces calls and defers the listeners to a later task via a shared\n   * `setTimeout`. The event is converted into a signal (`Event<void>`) to avoid additional object creation as a\n   * result of merging events and to try prevent race conditions that could arise when using related deferred and\n   * non-deferred events.\n   *\n   * This is useful for deferring non-critical work (eg. general UI updates) to ensure it does not block critical work\n   * (eg. latency of keypress to text rendered).\n   *\n   * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n   * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n   * returned event causes this utility to leak a listener on the original event.\n   *\n   * @param event The event source for the new event.\n   * @param disposable A disposable store to add the new EventEmitter to.\n   */\n  function defer(event, disposable) {\n    return debounce(event, () => void 0, 0, undefined, true, undefined, disposable);\n  }\n  Event.defer = defer;\n  /**\n   * Given an event, returns another event which only fires once.\n   *\n   * @param event The event source for the new event.\n   */\n  function once(event) {\n    return (listener, thisArgs = null, disposables) => {\n      // we need this, in case the event fires during the listener call\n      let didFire = false;\n      let result = undefined;\n      result = event(e => {\n        if (didFire) {\n          return;\n        } else if (result) {\n          result.dispose();\n        } else {\n          didFire = true;\n        }\n        return listener.call(thisArgs, e);\n      }, null, disposables);\n      if (didFire) {\n        result.dispose();\n      }\n      return result;\n    };\n  }\n  Event.once = once;\n  /**\n   * Given an event, returns another event which only fires once, and only when the condition is met.\n   *\n   * @param event The event source for the new event.\n   */\n  function onceIf(event, condition) {\n    return Event.once(Event.filter(event, condition));\n  }\n  Event.onceIf = onceIf;\n  /**\n   * Maps an event of one type into an event of another type using a mapping function, similar to how\n   * `Array.prototype.map` works.\n   *\n   * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n   * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n   * returned event causes this utility to leak a listener on the original event.\n   *\n   * @param event The event source for the new event.\n   * @param map The mapping function.\n   * @param disposable A disposable store to add the new EventEmitter to.\n   */\n  function map(event, map, disposable) {\n    return snapshot((listener, thisArgs = null, disposables) => event(i => listener.call(thisArgs, map(i)), null, disposables), disposable);\n  }\n  Event.map = map;\n  /**\n   * Wraps an event in another event that performs some function on the event object before firing.\n   *\n   * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n   * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n   * returned event causes this utility to leak a listener on the original event.\n   *\n   * @param event The event source for the new event.\n   * @param each The function to perform on the event object.\n   * @param disposable A disposable store to add the new EventEmitter to.\n   */\n  function forEach(event, each, disposable) {\n    return snapshot((listener, thisArgs = null, disposables) => event(i => {\n      each(i);\n      listener.call(thisArgs, i);\n    }, null, disposables), disposable);\n  }\n  Event.forEach = forEach;\n  function filter(event, filter, disposable) {\n    return snapshot((listener, thisArgs = null, disposables) => event(e => filter(e) && listener.call(thisArgs, e), null, disposables), disposable);\n  }\n  Event.filter = filter;\n  /**\n   * Given an event, returns the same event but typed as `Event<void>`.\n   */\n  function signal(event) {\n    return event;\n  }\n  Event.signal = signal;\n  function any(...events) {\n    return (listener, thisArgs = null, disposables) => {\n      const disposable = combinedDisposable(...events.map(event => event(e => listener.call(thisArgs, e))));\n      return addAndReturnDisposable(disposable, disposables);\n    };\n  }\n  Event.any = any;\n  /**\n   * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n   * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n   * returned event causes this utility to leak a listener on the original event.\n   */\n  function reduce(event, merge, initial, disposable) {\n    let output = initial;\n    return map(event, e => {\n      output = merge(output, e);\n      return output;\n    }, disposable);\n  }\n  Event.reduce = reduce;\n  function snapshot(event, disposable) {\n    let listener;\n    const options = {\n      onWillAddFirstListener() {\n        listener = event(emitter.fire, emitter);\n      },\n      onDidRemoveLastListener() {\n        listener?.dispose();\n      }\n    };\n    if (!disposable) {\n      _addLeakageTraceLogic(options);\n    }\n    const emitter = new Emitter(options);\n    disposable?.add(emitter);\n    return emitter.event;\n  }\n  /**\n   * Adds the IDisposable to the store if it's set, and returns it. Useful to\n   * Event function implementation.\n   */\n  function addAndReturnDisposable(d, store) {\n    if (store instanceof Array) {\n      store.push(d);\n    } else if (store) {\n      store.add(d);\n    }\n    return d;\n  }\n  function debounce(event, merge, delay = 100, leading = false, flushOnListenerRemove = false, leakWarningThreshold, disposable) {\n    let subscription;\n    let output = undefined;\n    let handle = undefined;\n    let numDebouncedCalls = 0;\n    let doFire;\n    const options = {\n      leakWarningThreshold,\n      onWillAddFirstListener() {\n        subscription = event(cur => {\n          numDebouncedCalls++;\n          output = merge(output, cur);\n          if (leading && !handle) {\n            emitter.fire(output);\n            output = undefined;\n          }\n          doFire = () => {\n            const _output = output;\n            output = undefined;\n            handle = undefined;\n            if (!leading || numDebouncedCalls > 1) {\n              emitter.fire(_output);\n            }\n            numDebouncedCalls = 0;\n          };\n          if (typeof delay === 'number') {\n            clearTimeout(handle);\n            handle = setTimeout(doFire, delay);\n          } else {\n            if (handle === undefined) {\n              handle = 0;\n              queueMicrotask(doFire);\n            }\n          }\n        });\n      },\n      onWillRemoveListener() {\n        if (flushOnListenerRemove && numDebouncedCalls > 0) {\n          doFire?.();\n        }\n      },\n      onDidRemoveLastListener() {\n        doFire = undefined;\n        subscription.dispose();\n      }\n    };\n    if (!disposable) {\n      _addLeakageTraceLogic(options);\n    }\n    const emitter = new Emitter(options);\n    disposable?.add(emitter);\n    return emitter.event;\n  }\n  Event.debounce = debounce;\n  /**\n   * Debounces an event, firing after some delay (default=0) with an array of all event original objects.\n   *\n   * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n   * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n   * returned event causes this utility to leak a listener on the original event.\n   */\n  function accumulate(event, delay = 0, disposable) {\n    return Event.debounce(event, (last, e) => {\n      if (!last) {\n        return [e];\n      }\n      last.push(e);\n      return last;\n    }, delay, undefined, true, undefined, disposable);\n  }\n  Event.accumulate = accumulate;\n  /**\n   * Filters an event such that some condition is _not_ met more than once in a row, effectively ensuring duplicate\n   * event objects from different sources do not fire the same event object.\n   *\n   * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n   * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n   * returned event causes this utility to leak a listener on the original event.\n   *\n   * @param event The event source for the new event.\n   * @param equals The equality condition.\n   * @param disposable A disposable store to add the new EventEmitter to.\n   *\n   * @example\n   * ```\n   * // Fire only one time when a single window is opened or focused\n   * Event.latch(Event.any(onDidOpenWindow, onDidFocusWindow))\n   * ```\n   */\n  function latch(event, equals = (a, b) => a === b, disposable) {\n    let firstCall = true;\n    let cache;\n    return filter(event, value => {\n      const shouldEmit = firstCall || !equals(value, cache);\n      firstCall = false;\n      cache = value;\n      return shouldEmit;\n    }, disposable);\n  }\n  Event.latch = latch;\n  /**\n   * Splits an event whose parameter is a union type into 2 separate events for each type in the union.\n   *\n   * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n   * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n   * returned event causes this utility to leak a listener on the original event.\n   *\n   * @example\n   * ```\n   * const event = new EventEmitter<number | undefined>().event;\n   * const [numberEvent, undefinedEvent] = Event.split(event, isUndefined);\n   * ```\n   *\n   * @param event The event source for the new event.\n   * @param isT A function that determines what event is of the first type.\n   * @param disposable A disposable store to add the new EventEmitter to.\n   */\n  function split(event, isT, disposable) {\n    return [Event.filter(event, isT, disposable), Event.filter(event, e => !isT(e), disposable)];\n  }\n  Event.split = split;\n  /**\n   * Buffers an event until it has a listener attached.\n   *\n   * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n   * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n   * returned event causes this utility to leak a listener on the original event.\n   *\n   * @param event The event source for the new event.\n   * @param flushAfterTimeout Determines whether to flush the buffer after a timeout immediately or after a\n   * `setTimeout` when the first event listener is added.\n   * @param _buffer Internal: A source event array used for tests.\n   *\n   * @example\n   * ```\n   * // Start accumulating events, when the first listener is attached, flush\n   * // the event after a timeout such that multiple listeners attached before\n   * // the timeout would receive the event\n   * this.onInstallExtension = Event.buffer(service.onInstallExtension, true);\n   * ```\n   */\n  function buffer(event, flushAfterTimeout = false, _buffer = [], disposable) {\n    let buffer = _buffer.slice();\n    let listener = event(e => {\n      if (buffer) {\n        buffer.push(e);\n      } else {\n        emitter.fire(e);\n      }\n    });\n    if (disposable) {\n      disposable.add(listener);\n    }\n    const flush = () => {\n      buffer?.forEach(e => emitter.fire(e));\n      buffer = null;\n    };\n    const emitter = new Emitter({\n      onWillAddFirstListener() {\n        if (!listener) {\n          listener = event(e => emitter.fire(e));\n          if (disposable) {\n            disposable.add(listener);\n          }\n        }\n      },\n      onDidAddFirstListener() {\n        if (buffer) {\n          if (flushAfterTimeout) {\n            setTimeout(flush);\n          } else {\n            flush();\n          }\n        }\n      },\n      onDidRemoveLastListener() {\n        if (listener) {\n          listener.dispose();\n        }\n        listener = null;\n      }\n    });\n    if (disposable) {\n      disposable.add(emitter);\n    }\n    return emitter.event;\n  }\n  Event.buffer = buffer;\n  /**\n   * Wraps the event in an {@link IChainableEvent}, allowing a more functional programming style.\n   *\n   * @example\n   * ```\n   * // Normal\n   * const onEnterPressNormal = Event.filter(\n   *   Event.map(onKeyPress.event, e => new StandardKeyboardEvent(e)),\n   *   e.keyCode === KeyCode.Enter\n   * ).event;\n   *\n   * // Using chain\n   * const onEnterPressChain = Event.chain(onKeyPress.event, $ => $\n   *   .map(e => new StandardKeyboardEvent(e))\n   *   .filter(e => e.keyCode === KeyCode.Enter)\n   * );\n   * ```\n   */\n  function chain(event, sythensize) {\n    const fn = (listener, thisArgs, disposables) => {\n      const cs = sythensize(new ChainableSynthesis());\n      return event(function (value) {\n        const result = cs.evaluate(value);\n        if (result !== HaltChainable) {\n          listener.call(thisArgs, result);\n        }\n      }, undefined, disposables);\n    };\n    return fn;\n  }\n  Event.chain = chain;\n  const HaltChainable = Symbol('HaltChainable');\n  class ChainableSynthesis {\n    constructor() {\n      this.steps = [];\n    }\n    map(fn) {\n      this.steps.push(fn);\n      return this;\n    }\n    forEach(fn) {\n      this.steps.push(v => {\n        fn(v);\n        return v;\n      });\n      return this;\n    }\n    filter(fn) {\n      this.steps.push(v => fn(v) ? v : HaltChainable);\n      return this;\n    }\n    reduce(merge, initial) {\n      let last = initial;\n      this.steps.push(v => {\n        last = merge(last, v);\n        return last;\n      });\n      return this;\n    }\n    latch(equals = (a, b) => a === b) {\n      let firstCall = true;\n      let cache;\n      this.steps.push(value => {\n        const shouldEmit = firstCall || !equals(value, cache);\n        firstCall = false;\n        cache = value;\n        return shouldEmit ? value : HaltChainable;\n      });\n      return this;\n    }\n    evaluate(value) {\n      for (const step of this.steps) {\n        value = step(value);\n        if (value === HaltChainable) {\n          break;\n        }\n      }\n      return value;\n    }\n  }\n  /**\n   * Creates an {@link Event} from a node event emitter.\n   */\n  function fromNodeEventEmitter(emitter, eventName, map = id => id) {\n    const fn = (...args) => result.fire(map(...args));\n    const onFirstListenerAdd = () => emitter.on(eventName, fn);\n    const onLastListenerRemove = () => emitter.removeListener(eventName, fn);\n    const result = new Emitter({\n      onWillAddFirstListener: onFirstListenerAdd,\n      onDidRemoveLastListener: onLastListenerRemove\n    });\n    return result.event;\n  }\n  Event.fromNodeEventEmitter = fromNodeEventEmitter;\n  /**\n   * Creates an {@link Event} from a DOM event emitter.\n   */\n  function fromDOMEventEmitter(emitter, eventName, map = id => id) {\n    const fn = (...args) => result.fire(map(...args));\n    const onFirstListenerAdd = () => emitter.addEventListener(eventName, fn);\n    const onLastListenerRemove = () => emitter.removeEventListener(eventName, fn);\n    const result = new Emitter({\n      onWillAddFirstListener: onFirstListenerAdd,\n      onDidRemoveLastListener: onLastListenerRemove\n    });\n    return result.event;\n  }\n  Event.fromDOMEventEmitter = fromDOMEventEmitter;\n  /**\n   * Creates a promise out of an event, using the {@link Event.once} helper.\n   */\n  function toPromise(event) {\n    return new Promise(resolve => once(event)(resolve));\n  }\n  Event.toPromise = toPromise;\n  /**\n   * Creates an event out of a promise that fires once when the promise is\n   * resolved with the result of the promise or `undefined`.\n   */\n  function fromPromise(promise) {\n    const result = new Emitter();\n    promise.then(res => {\n      result.fire(res);\n    }, () => {\n      result.fire(undefined);\n    }).finally(() => {\n      result.dispose();\n    });\n    return result.event;\n  }\n  Event.fromPromise = fromPromise;\n  /**\n   * A convenience function for forwarding an event to another emitter which\n   * improves readability.\n   *\n   * This is similar to {@link Relay} but allows instantiating and forwarding\n   * on a single line and also allows for multiple source events.\n   * @param from The event to forward.\n   * @param to The emitter to forward the event to.\n   * @example\n   * Event.forward(event, emitter);\n   * // equivalent to\n   * event(e => emitter.fire(e));\n   * // equivalent to\n   * event(emitter.fire, emitter);\n   */\n  function forward(from, to) {\n    return from(e => to.fire(e));\n  }\n  Event.forward = forward;\n  function runAndSubscribe(event, handler, initial) {\n    handler(initial);\n    return event(e => handler(e));\n  }\n  Event.runAndSubscribe = runAndSubscribe;\n  class EmitterObserver {\n    constructor(_observable, store) {\n      this._observable = _observable;\n      this._counter = 0;\n      this._hasChanged = false;\n      const options = {\n        onWillAddFirstListener: () => {\n          _observable.addObserver(this);\n          // Communicate to the observable that we received its current value and would like to be notified about future changes.\n          this._observable.reportChanges();\n        },\n        onDidRemoveLastListener: () => {\n          _observable.removeObserver(this);\n        }\n      };\n      if (!store) {\n        _addLeakageTraceLogic(options);\n      }\n      this.emitter = new Emitter(options);\n      if (store) {\n        store.add(this.emitter);\n      }\n    }\n    beginUpdate(_observable) {\n      // assert(_observable === this.obs);\n      this._counter++;\n    }\n    handlePossibleChange(_observable) {\n      // assert(_observable === this.obs);\n    }\n    handleChange(_observable, _change) {\n      // assert(_observable === this.obs);\n      this._hasChanged = true;\n    }\n    endUpdate(_observable) {\n      // assert(_observable === this.obs);\n      this._counter--;\n      if (this._counter === 0) {\n        this._observable.reportChanges();\n        if (this._hasChanged) {\n          this._hasChanged = false;\n          this.emitter.fire(this._observable.get());\n        }\n      }\n    }\n  }\n  /**\n   * Creates an event emitter that is fired when the observable changes.\n   * Each listeners subscribes to the emitter.\n   */\n  function fromObservable(obs, store) {\n    const observer = new EmitterObserver(obs, store);\n    return observer.emitter.event;\n  }\n  Event.fromObservable = fromObservable;\n  /**\n   * Each listener is attached to the observable directly.\n   */\n  function fromObservableLight(observable) {\n    return (listener, thisArgs, disposables) => {\n      let count = 0;\n      let didChange = false;\n      const observer = {\n        beginUpdate() {\n          count++;\n        },\n        endUpdate() {\n          count--;\n          if (count === 0) {\n            observable.reportChanges();\n            if (didChange) {\n              didChange = false;\n              listener.call(thisArgs);\n            }\n          }\n        },\n        handlePossibleChange() {\n          // noop\n        },\n        handleChange() {\n          didChange = true;\n        }\n      };\n      observable.addObserver(observer);\n      observable.reportChanges();\n      const disposable = {\n        dispose() {\n          observable.removeObserver(observer);\n        }\n      };\n      if (disposables instanceof DisposableStore) {\n        disposables.add(disposable);\n      } else if (Array.isArray(disposables)) {\n        disposables.push(disposable);\n      }\n      return disposable;\n    };\n  }\n  Event.fromObservableLight = fromObservableLight;\n})(Event || (Event = {}));\nexport class EventProfiling {\n  constructor(name) {\n    this.listenerCount = 0;\n    this.invocationCount = 0;\n    this.elapsedOverall = 0;\n    this.durations = [];\n    this.name = `${name}_${EventProfiling._idPool++}`;\n    EventProfiling.all.add(this);\n  }\n  start(listenerCount) {\n    this._stopWatch = new StopWatch();\n    this.listenerCount = listenerCount;\n  }\n  stop() {\n    if (this._stopWatch) {\n      const elapsed = this._stopWatch.elapsed();\n      this.durations.push(elapsed);\n      this.elapsedOverall += elapsed;\n      this.invocationCount += 1;\n      this._stopWatch = undefined;\n    }\n  }\n}\n_EventProfiling = EventProfiling;\n_EventProfiling.all = new Set();\n_EventProfiling._idPool = 0;\nlet _globalLeakWarningThreshold = -1;\nclass LeakageMonitor {\n  constructor(_errorHandler, threshold, name = (LeakageMonitor._idPool++).toString(16).padStart(3, '0')) {\n    this._errorHandler = _errorHandler;\n    this.threshold = threshold;\n    this.name = name;\n    this._warnCountdown = 0;\n  }\n  dispose() {\n    this._stacks?.clear();\n  }\n  check(stack, listenerCount) {\n    const threshold = this.threshold;\n    if (threshold <= 0 || listenerCount < threshold) {\n      return undefined;\n    }\n    if (!this._stacks) {\n      this._stacks = new Map();\n    }\n    const count = this._stacks.get(stack.value) || 0;\n    this._stacks.set(stack.value, count + 1);\n    this._warnCountdown -= 1;\n    if (this._warnCountdown <= 0) {\n      // only warn on first exceed and then every time the limit\n      // is exceeded by 50% again\n      this._warnCountdown = threshold * 0.5;\n      const [topStack, topCount] = this.getMostFrequentStack();\n      const message = `[${this.name}] potential listener LEAK detected, having ${listenerCount} listeners already. MOST frequent listener (${topCount}):`;\n      console.warn(message);\n      console.warn(topStack);\n      const error = new ListenerLeakError(message, topStack);\n      this._errorHandler(error);\n    }\n    return () => {\n      const count = this._stacks.get(stack.value) || 0;\n      this._stacks.set(stack.value, count - 1);\n    };\n  }\n  getMostFrequentStack() {\n    if (!this._stacks) {\n      return undefined;\n    }\n    let topStack;\n    let topCount = 0;\n    for (const [stack, count] of this._stacks) {\n      if (!topStack || topCount < count) {\n        topStack = [stack, count];\n        topCount = count;\n      }\n    }\n    return topStack;\n  }\n}\n_LeakageMonitor = LeakageMonitor;\n_LeakageMonitor._idPool = 1;\nclass Stacktrace {\n  static create() {\n    const err = new Error();\n    return new Stacktrace(err.stack ?? '');\n  }\n  constructor(value) {\n    this.value = value;\n  }\n  print() {\n    console.warn(this.value.split('\\n').slice(2).join('\\n'));\n  }\n}\n// error that is logged when going over the configured listener threshold\nexport class ListenerLeakError extends Error {\n  constructor(message, stack) {\n    super(message);\n    this.name = 'ListenerLeakError';\n    this.stack = stack;\n  }\n}\n// SEVERE error that is logged when having gone way over the configured listener\n// threshold so that the emitter refuses to accept more listeners\nexport class ListenerRefusalError extends Error {\n  constructor(message, stack) {\n    super(message);\n    this.name = 'ListenerRefusalError';\n    this.stack = stack;\n  }\n}\nclass UniqueContainer {\n  constructor(value) {\n    this.value = value;\n  }\n}\nconst compactionThreshold = 2;\nconst forEachListener = (listeners, fn) => {\n  if (listeners instanceof UniqueContainer) {\n    fn(listeners);\n  } else {\n    for (let i = 0; i < listeners.length; i++) {\n      const l = listeners[i];\n      if (l) {\n        fn(l);\n      }\n    }\n  }\n};\nlet _listenerFinalizers;\nif (_enableListenerGCedWarning) {\n  const leaks = [];\n  setInterval(() => {\n    if (leaks.length === 0) {\n      return;\n    }\n    console.warn('[LEAKING LISTENERS] GC\\'ed these listeners that were NOT yet disposed:');\n    console.warn(leaks.join('\\n'));\n    leaks.length = 0;\n  }, 3000);\n  _listenerFinalizers = new FinalizationRegistry(heldValue => {\n    if (typeof heldValue === 'string') {\n      leaks.push(heldValue);\n    }\n  });\n}\n/**\n * The Emitter can be used to expose an Event to the public\n * to fire it from the insides.\n * Sample:\n    class Document {\n\n        private readonly _onDidChange = new Emitter<(value:string)=>any>();\n\n        public onDidChange = this._onDidChange.event;\n\n        // getter-style\n        // get onDidChange(): Event<(value:string)=>any> {\n        // \treturn this._onDidChange.event;\n        // }\n\n        private _doIt() {\n            //...\n            this._onDidChange.fire(value);\n        }\n    }\n */\nexport class Emitter {\n  constructor(options) {\n    this._size = 0;\n    this._options = options;\n    this._leakageMon = _globalLeakWarningThreshold > 0 || this._options?.leakWarningThreshold ? new LeakageMonitor(options?.onListenerError ?? onUnexpectedError, this._options?.leakWarningThreshold ?? _globalLeakWarningThreshold) : undefined;\n    this._perfMon = this._options?._profName ? new EventProfiling(this._options._profName) : undefined;\n    this._deliveryQueue = this._options?.deliveryQueue;\n  }\n  dispose() {\n    if (!this._disposed) {\n      this._disposed = true;\n      // It is bad to have listeners at the time of disposing an emitter, it is worst to have listeners keep the emitter\n      // alive via the reference that's embedded in their disposables. Therefore we loop over all remaining listeners and\n      // unset their subscriptions/disposables. Looping and blaming remaining listeners is done on next tick because the\n      // the following programming pattern is very popular:\n      //\n      // const someModel = this._disposables.add(new ModelObject()); // (1) create and register model\n      // this._disposables.add(someModel.onDidChange(() => { ... }); // (2) subscribe and register model-event listener\n      // ...later...\n      // this._disposables.dispose(); disposes (1) then (2): don't warn after (1) but after the \"overall dispose\" is done\n      if (this._deliveryQueue?.current === this) {\n        this._deliveryQueue.reset();\n      }\n      if (this._listeners) {\n        if (_enableDisposeWithListenerWarning) {\n          const listeners = this._listeners;\n          queueMicrotask(() => {\n            forEachListener(listeners, l => l.stack?.print());\n          });\n        }\n        this._listeners = undefined;\n        this._size = 0;\n      }\n      this._options?.onDidRemoveLastListener?.();\n      this._leakageMon?.dispose();\n    }\n  }\n  /**\n   * For the public to allow to subscribe\n   * to events from this Emitter\n   */\n  get event() {\n    this._event ??= (callback, thisArgs, disposables) => {\n      if (this._leakageMon && this._size > this._leakageMon.threshold ** 2) {\n        const message = `[${this._leakageMon.name}] REFUSES to accept new listeners because it exceeded its threshold by far (${this._size} vs ${this._leakageMon.threshold})`;\n        console.warn(message);\n        const tuple = this._leakageMon.getMostFrequentStack() ?? ['UNKNOWN stack', -1];\n        const error = new ListenerRefusalError(`${message}. HINT: Stack shows most frequent listener (${tuple[1]}-times)`, tuple[0]);\n        const errorHandler = this._options?.onListenerError || onUnexpectedError;\n        errorHandler(error);\n        return Disposable.None;\n      }\n      if (this._disposed) {\n        // todo: should we warn if a listener is added to a disposed emitter? This happens often\n        return Disposable.None;\n      }\n      if (thisArgs) {\n        callback = callback.bind(thisArgs);\n      }\n      const contained = new UniqueContainer(callback);\n      let removeMonitor;\n      let stack;\n      if (this._leakageMon && this._size >= Math.ceil(this._leakageMon.threshold * 0.2)) {\n        // check and record this emitter for potential leakage\n        contained.stack = Stacktrace.create();\n        removeMonitor = this._leakageMon.check(contained.stack, this._size + 1);\n      }\n      if (_enableDisposeWithListenerWarning) {\n        contained.stack = stack ?? Stacktrace.create();\n      }\n      if (!this._listeners) {\n        this._options?.onWillAddFirstListener?.(this);\n        this._listeners = contained;\n        this._options?.onDidAddFirstListener?.(this);\n      } else if (this._listeners instanceof UniqueContainer) {\n        this._deliveryQueue ??= new EventDeliveryQueuePrivate();\n        this._listeners = [this._listeners, contained];\n      } else {\n        this._listeners.push(contained);\n      }\n      this._size++;\n      const result = toDisposable(() => {\n        _listenerFinalizers?.unregister(result);\n        removeMonitor?.();\n        this._removeListener(contained);\n      });\n      if (disposables instanceof DisposableStore) {\n        disposables.add(result);\n      } else if (Array.isArray(disposables)) {\n        disposables.push(result);\n      }\n      if (_listenerFinalizers) {\n        const stack = new Error().stack.split('\\n').slice(2, 3).join('\\n').trim();\n        const match = /(file:|vscode-file:\\/\\/vscode-app)?(\\/[^:]*:\\d+:\\d+)/.exec(stack);\n        _listenerFinalizers.register(result, match?.[2] ?? stack, result);\n      }\n      return result;\n    };\n    return this._event;\n  }\n  _removeListener(listener) {\n    this._options?.onWillRemoveListener?.(this);\n    if (!this._listeners) {\n      return; // expected if a listener gets disposed\n    }\n    if (this._size === 1) {\n      this._listeners = undefined;\n      this._options?.onDidRemoveLastListener?.(this);\n      this._size = 0;\n      return;\n    }\n    // size > 1 which requires that listeners be a list:\n    const listeners = this._listeners;\n    const index = listeners.indexOf(listener);\n    if (index === -1) {\n      console.log('disposed?', this._disposed);\n      console.log('size?', this._size);\n      console.log('arr?', JSON.stringify(this._listeners));\n      throw new Error('Attempted to dispose unknown listener');\n    }\n    this._size--;\n    listeners[index] = undefined;\n    const adjustDeliveryQueue = this._deliveryQueue.current === this;\n    if (this._size * compactionThreshold <= listeners.length) {\n      let n = 0;\n      for (let i = 0; i < listeners.length; i++) {\n        if (listeners[i]) {\n          listeners[n++] = listeners[i];\n        } else if (adjustDeliveryQueue) {\n          this._deliveryQueue.end--;\n          if (n < this._deliveryQueue.i) {\n            this._deliveryQueue.i--;\n          }\n        }\n      }\n      listeners.length = n;\n    }\n  }\n  _deliver(listener, value) {\n    if (!listener) {\n      return;\n    }\n    const errorHandler = this._options?.onListenerError || onUnexpectedError;\n    if (!errorHandler) {\n      listener.value(value);\n      return;\n    }\n    try {\n      listener.value(value);\n    } catch (e) {\n      errorHandler(e);\n    }\n  }\n  /** Delivers items in the queue. Assumes the queue is ready to go. */\n  _deliverQueue(dq) {\n    const listeners = dq.current._listeners;\n    while (dq.i < dq.end) {\n      // important: dq.i is incremented before calling deliver() because it might reenter deliverQueue()\n      this._deliver(listeners[dq.i++], dq.value);\n    }\n    dq.reset();\n  }\n  /**\n   * To be kept private to fire an event to\n   * subscribers\n   */\n  fire(event) {\n    if (this._deliveryQueue?.current) {\n      this._deliverQueue(this._deliveryQueue);\n      this._perfMon?.stop(); // last fire() will have starting perfmon, stop it before starting the next dispatch\n    }\n    this._perfMon?.start(this._size);\n    if (!this._listeners) {\n      // no-op\n    } else if (this._listeners instanceof UniqueContainer) {\n      this._deliver(this._listeners, event);\n    } else {\n      const dq = this._deliveryQueue;\n      dq.enqueue(this, event, this._listeners.length);\n      this._deliverQueue(dq);\n    }\n    this._perfMon?.stop();\n  }\n  hasListeners() {\n    return this._size > 0;\n  }\n}\nexport const createEventDeliveryQueue = () => new EventDeliveryQueuePrivate();\nclass EventDeliveryQueuePrivate {\n  constructor() {\n    /**\n     * Index in current's listener list.\n     */\n    this.i = -1;\n    /**\n     * The last index in the listener's list to deliver.\n     */\n    this.end = 0;\n  }\n  enqueue(emitter, value, end) {\n    this.i = 0;\n    this.end = end;\n    this.current = emitter;\n    this.value = value;\n  }\n  reset() {\n    this.i = this.end; // force any current emission loop to stop, mainly for during dispose\n    this.current = undefined;\n    this.value = undefined;\n  }\n}\nexport class PauseableEmitter extends Emitter {\n  constructor(options) {\n    super(options);\n    this._isPaused = 0;\n    this._eventQueue = new LinkedList();\n    this._mergeFn = options?.merge;\n  }\n  pause() {\n    this._isPaused++;\n  }\n  resume() {\n    if (this._isPaused !== 0 && --this._isPaused === 0) {\n      if (this._mergeFn) {\n        // use the merge function to create a single composite\n        // event. make a copy in case firing pauses this emitter\n        if (this._eventQueue.size > 0) {\n          const events = Array.from(this._eventQueue);\n          this._eventQueue.clear();\n          super.fire(this._mergeFn(events));\n        }\n      } else {\n        // no merging, fire each event individually and test\n        // that this emitter isn't paused halfway through\n        while (!this._isPaused && this._eventQueue.size !== 0) {\n          super.fire(this._eventQueue.shift());\n        }\n      }\n    }\n  }\n  fire(event) {\n    if (this._size) {\n      if (this._isPaused !== 0) {\n        this._eventQueue.push(event);\n      } else {\n        super.fire(event);\n      }\n    }\n  }\n}\nexport class DebounceEmitter extends PauseableEmitter {\n  constructor(options) {\n    super(options);\n    this._delay = options.delay ?? 100;\n  }\n  fire(event) {\n    if (!this._handle) {\n      this.pause();\n      this._handle = setTimeout(() => {\n        this._handle = undefined;\n        this.resume();\n      }, this._delay);\n    }\n    super.fire(event);\n  }\n}\n/**\n * An emitter which queue all events and then process them at the\n * end of the event loop.\n */\nexport class MicrotaskEmitter extends Emitter {\n  constructor(options) {\n    super(options);\n    this._queuedEvents = [];\n    this._mergeFn = options?.merge;\n  }\n  fire(event) {\n    if (!this.hasListeners()) {\n      return;\n    }\n    this._queuedEvents.push(event);\n    if (this._queuedEvents.length === 1) {\n      queueMicrotask(() => {\n        if (this._mergeFn) {\n          super.fire(this._mergeFn(this._queuedEvents));\n        } else {\n          this._queuedEvents.forEach(e => super.fire(e));\n        }\n        this._queuedEvents = [];\n      });\n    }\n  }\n}\n/**\n * An event emitter that multiplexes many events into a single event.\n *\n * @example Listen to the `onData` event of all `Thing`s, dynamically adding and removing `Thing`s\n * to the multiplexer as needed.\n *\n * ```typescript\n * const anythingDataMultiplexer = new EventMultiplexer<{ data: string }>();\n *\n * const thingListeners = DisposableMap<Thing, IDisposable>();\n *\n * thingService.onDidAddThing(thing => {\n *   thingListeners.set(thing, anythingDataMultiplexer.add(thing.onData);\n * });\n * thingService.onDidRemoveThing(thing => {\n *   thingListeners.deleteAndDispose(thing);\n * });\n *\n * anythingDataMultiplexer.event(e => {\n *   console.log('Something fired data ' + e.data)\n * });\n * ```\n */\nexport class EventMultiplexer {\n  constructor() {\n    this.hasListeners = false;\n    this.events = [];\n    this.emitter = new Emitter({\n      onWillAddFirstListener: () => this.onFirstListenerAdd(),\n      onDidRemoveLastListener: () => this.onLastListenerRemove()\n    });\n  }\n  get event() {\n    return this.emitter.event;\n  }\n  add(event) {\n    const e = {\n      event: event,\n      listener: null\n    };\n    this.events.push(e);\n    if (this.hasListeners) {\n      this.hook(e);\n    }\n    const dispose = () => {\n      if (this.hasListeners) {\n        this.unhook(e);\n      }\n      const idx = this.events.indexOf(e);\n      this.events.splice(idx, 1);\n    };\n    return toDisposable(createSingleCallFunction(dispose));\n  }\n  onFirstListenerAdd() {\n    this.hasListeners = true;\n    this.events.forEach(e => this.hook(e));\n  }\n  onLastListenerRemove() {\n    this.hasListeners = false;\n    this.events.forEach(e => this.unhook(e));\n  }\n  hook(e) {\n    e.listener = e.event(r => this.emitter.fire(r));\n  }\n  unhook(e) {\n    e.listener?.dispose();\n    e.listener = null;\n  }\n  dispose() {\n    this.emitter.dispose();\n    for (const e of this.events) {\n      e.listener?.dispose();\n    }\n    this.events = [];\n  }\n}\n/**\n * The EventBufferer is useful in situations in which you want\n * to delay firing your events during some code.\n * You can wrap that code and be sure that the event will not\n * be fired during that wrap.\n *\n * ```\n * const emitter: Emitter;\n * const delayer = new EventDelayer();\n * const delayedEvent = delayer.wrapEvent(emitter.event);\n *\n * delayedEvent(console.log);\n *\n * delayer.bufferEvents(() => {\n *   emitter.fire(); // event will not be fired yet\n * });\n *\n * // event will only be fired at this point\n * ```\n */\nexport class EventBufferer {\n  constructor() {\n    this.data = [];\n  }\n  wrapEvent(event, reduce, initial) {\n    return (listener, thisArgs, disposables) => {\n      return event(i => {\n        const data = this.data[this.data.length - 1];\n        // Non-reduce scenario\n        if (!reduce) {\n          // Buffering case\n          if (data) {\n            data.buffers.push(() => listener.call(thisArgs, i));\n          } else {\n            // Not buffering case\n            listener.call(thisArgs, i);\n          }\n          return;\n        }\n        // Reduce scenario\n        const reduceData = data;\n        // Not buffering case\n        if (!reduceData) {\n          // TODO: Is there a way to cache this reduce call for all listeners?\n          listener.call(thisArgs, reduce(initial, i));\n          return;\n        }\n        // Buffering case\n        reduceData.items ??= [];\n        reduceData.items.push(i);\n        if (reduceData.buffers.length === 0) {\n          // Include a single buffered function that will reduce all events when we're done buffering events\n          data.buffers.push(() => {\n            // cache the reduced result so that the value can be shared across all listeners\n            reduceData.reducedResult ??= initial ? reduceData.items.reduce(reduce, initial) : reduceData.items.reduce(reduce);\n            listener.call(thisArgs, reduceData.reducedResult);\n          });\n        }\n      }, undefined, disposables);\n    };\n  }\n  bufferEvents(fn) {\n    const data = {\n      buffers: new Array()\n    };\n    this.data.push(data);\n    const r = fn();\n    this.data.pop();\n    data.buffers.forEach(flush => flush());\n    return r;\n  }\n}\n/**\n * A Relay is an event forwarder which functions as a replugabble event pipe.\n * Once created, you can connect an input event to it and it will simply forward\n * events from that input event through its own `event` property. The `input`\n * can be changed at any point in time.\n */\nexport class Relay {\n  constructor() {\n    this.listening = false;\n    this.inputEvent = Event.None;\n    this.inputEventListener = Disposable.None;\n    this.emitter = new Emitter({\n      onDidAddFirstListener: () => {\n        this.listening = true;\n        this.inputEventListener = this.inputEvent(this.emitter.fire, this.emitter);\n      },\n      onDidRemoveLastListener: () => {\n        this.listening = false;\n        this.inputEventListener.dispose();\n      }\n    });\n    this.event = this.emitter.event;\n  }\n  set input(event) {\n    this.inputEvent = event;\n    if (this.listening) {\n      this.inputEventListener.dispose();\n      this.inputEventListener = event(this.emitter.fire, this.emitter);\n    }\n  }\n  dispose() {\n    this.inputEventListener.dispose();\n    this.emitter.dispose();\n  }\n}","map":{"version":3,"names":["onUnexpectedError","createSingleCallFunction","combinedDisposable","Disposable","DisposableStore","toDisposable","LinkedList","StopWatch","_enableListenerGCedWarning","_enableDisposeWithListenerWarning","_enableSnapshotPotentialLeakWarning","Event","None","_addLeakageTraceLogic","options","onDidAddListener","origListenerDidAdd","stack","Stacktrace","create","count","console","warn","print","defer","event","disposable","debounce","undefined","once","listener","thisArgs","disposables","didFire","result","e","dispose","call","onceIf","condition","filter","map","snapshot","i","forEach","each","signal","any","events","addAndReturnDisposable","reduce","merge","initial","output","onWillAddFirstListener","emitter","fire","onDidRemoveLastListener","Emitter","add","d","store","Array","push","delay","leading","flushOnListenerRemove","leakWarningThreshold","subscription","handle","numDebouncedCalls","doFire","cur","_output","clearTimeout","setTimeout","queueMicrotask","onWillRemoveListener","accumulate","last","latch","equals","a","b","firstCall","cache","value","shouldEmit","split","isT","buffer","flushAfterTimeout","_buffer","slice","flush","onDidAddFirstListener","chain","sythensize","fn","cs","ChainableSynthesis","evaluate","HaltChainable","Symbol","constructor","steps","v","step","fromNodeEventEmitter","eventName","id","args","onFirstListenerAdd","on","onLastListenerRemove","removeListener","fromDOMEventEmitter","addEventListener","removeEventListener","toPromise","Promise","resolve","fromPromise","promise","then","res","finally","forward","from","to","runAndSubscribe","handler","EmitterObserver","_observable","_counter","_hasChanged","addObserver","reportChanges","removeObserver","beginUpdate","handlePossibleChange","handleChange","_change","endUpdate","get","fromObservable","obs","observer","fromObservableLight","observable","didChange","isArray","EventProfiling","name","listenerCount","invocationCount","elapsedOverall","durations","_idPool","all","start","_stopWatch","stop","elapsed","_EventProfiling","Set","_globalLeakWarningThreshold","LeakageMonitor","_errorHandler","threshold","toString","padStart","_warnCountdown","_stacks","clear","check","Map","set","topStack","topCount","getMostFrequentStack","message","error","ListenerLeakError","_LeakageMonitor","err","Error","join","ListenerRefusalError","UniqueContainer","compactionThreshold","forEachListener","listeners","length","l","_listenerFinalizers","leaks","setInterval","FinalizationRegistry","heldValue","_size","_options","_leakageMon","onListenerError","_perfMon","_profName","_deliveryQueue","deliveryQueue","_disposed","current","reset","_listeners","_event","callback","tuple","errorHandler","bind","contained","removeMonitor","Math","ceil","EventDeliveryQueuePrivate","unregister","_removeListener","trim","match","exec","register","index","indexOf","log","JSON","stringify","adjustDeliveryQueue","n","end","_deliver","_deliverQueue","dq","enqueue","hasListeners","createEventDeliveryQueue","PauseableEmitter","_isPaused","_eventQueue","_mergeFn","pause","resume","size","shift","DebounceEmitter","_delay","_handle","MicrotaskEmitter","_queuedEvents","EventMultiplexer","hook","unhook","idx","splice","r","EventBufferer","data","wrapEvent","buffers","reduceData","items","reducedResult","bufferEvents","pop","Relay","listening","inputEvent","inputEventListener","input"],"sources":["P:/WebStorm/judgex_front/node_modules/monaco-editor/esm/vs/base/common/event.js"],"sourcesContent":["import { onUnexpectedError } from './errors.js';\nimport { createSingleCallFunction } from './functional.js';\nimport { combinedDisposable, Disposable, DisposableStore, toDisposable } from './lifecycle.js';\nimport { LinkedList } from './linkedList.js';\nimport { StopWatch } from './stopwatch.js';\n// -----------------------------------------------------------------------------------------------------------------------\n// Uncomment the next line to print warnings whenever a listener is GC'ed without having been disposed. This is a LEAK.\n// -----------------------------------------------------------------------------------------------------------------------\nconst _enableListenerGCedWarning = false;\n// -----------------------------------------------------------------------------------------------------------------------\n// Uncomment the next line to print warnings whenever an emitter with listeners is disposed. That is a sign of code smell.\n// -----------------------------------------------------------------------------------------------------------------------\nconst _enableDisposeWithListenerWarning = false;\n// -----------------------------------------------------------------------------------------------------------------------\n// Uncomment the next line to print warnings whenever a snapshotted event is used repeatedly without cleanup.\n// See https://github.com/microsoft/vscode/issues/142851\n// -----------------------------------------------------------------------------------------------------------------------\nconst _enableSnapshotPotentialLeakWarning = false;\nexport var Event;\n(function (Event) {\n    Event.None = () => Disposable.None;\n    function _addLeakageTraceLogic(options) {\n        if (_enableSnapshotPotentialLeakWarning) {\n            const { onDidAddListener: origListenerDidAdd } = options;\n            const stack = Stacktrace.create();\n            let count = 0;\n            options.onDidAddListener = () => {\n                if (++count === 2) {\n                    console.warn('snapshotted emitter LIKELY used public and SHOULD HAVE BEEN created with DisposableStore. snapshotted here');\n                    stack.print();\n                }\n                origListenerDidAdd?.();\n            };\n        }\n    }\n    /**\n     * Given an event, returns another event which debounces calls and defers the listeners to a later task via a shared\n     * `setTimeout`. The event is converted into a signal (`Event<void>`) to avoid additional object creation as a\n     * result of merging events and to try prevent race conditions that could arise when using related deferred and\n     * non-deferred events.\n     *\n     * This is useful for deferring non-critical work (eg. general UI updates) to ensure it does not block critical work\n     * (eg. latency of keypress to text rendered).\n     *\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     *\n     * @param event The event source for the new event.\n     * @param disposable A disposable store to add the new EventEmitter to.\n     */\n    function defer(event, disposable) {\n        return debounce(event, () => void 0, 0, undefined, true, undefined, disposable);\n    }\n    Event.defer = defer;\n    /**\n     * Given an event, returns another event which only fires once.\n     *\n     * @param event The event source for the new event.\n     */\n    function once(event) {\n        return (listener, thisArgs = null, disposables) => {\n            // we need this, in case the event fires during the listener call\n            let didFire = false;\n            let result = undefined;\n            result = event(e => {\n                if (didFire) {\n                    return;\n                }\n                else if (result) {\n                    result.dispose();\n                }\n                else {\n                    didFire = true;\n                }\n                return listener.call(thisArgs, e);\n            }, null, disposables);\n            if (didFire) {\n                result.dispose();\n            }\n            return result;\n        };\n    }\n    Event.once = once;\n    /**\n     * Given an event, returns another event which only fires once, and only when the condition is met.\n     *\n     * @param event The event source for the new event.\n     */\n    function onceIf(event, condition) {\n        return Event.once(Event.filter(event, condition));\n    }\n    Event.onceIf = onceIf;\n    /**\n     * Maps an event of one type into an event of another type using a mapping function, similar to how\n     * `Array.prototype.map` works.\n     *\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     *\n     * @param event The event source for the new event.\n     * @param map The mapping function.\n     * @param disposable A disposable store to add the new EventEmitter to.\n     */\n    function map(event, map, disposable) {\n        return snapshot((listener, thisArgs = null, disposables) => event(i => listener.call(thisArgs, map(i)), null, disposables), disposable);\n    }\n    Event.map = map;\n    /**\n     * Wraps an event in another event that performs some function on the event object before firing.\n     *\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     *\n     * @param event The event source for the new event.\n     * @param each The function to perform on the event object.\n     * @param disposable A disposable store to add the new EventEmitter to.\n     */\n    function forEach(event, each, disposable) {\n        return snapshot((listener, thisArgs = null, disposables) => event(i => { each(i); listener.call(thisArgs, i); }, null, disposables), disposable);\n    }\n    Event.forEach = forEach;\n    function filter(event, filter, disposable) {\n        return snapshot((listener, thisArgs = null, disposables) => event(e => filter(e) && listener.call(thisArgs, e), null, disposables), disposable);\n    }\n    Event.filter = filter;\n    /**\n     * Given an event, returns the same event but typed as `Event<void>`.\n     */\n    function signal(event) {\n        return event;\n    }\n    Event.signal = signal;\n    function any(...events) {\n        return (listener, thisArgs = null, disposables) => {\n            const disposable = combinedDisposable(...events.map(event => event(e => listener.call(thisArgs, e))));\n            return addAndReturnDisposable(disposable, disposables);\n        };\n    }\n    Event.any = any;\n    /**\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     */\n    function reduce(event, merge, initial, disposable) {\n        let output = initial;\n        return map(event, e => {\n            output = merge(output, e);\n            return output;\n        }, disposable);\n    }\n    Event.reduce = reduce;\n    function snapshot(event, disposable) {\n        let listener;\n        const options = {\n            onWillAddFirstListener() {\n                listener = event(emitter.fire, emitter);\n            },\n            onDidRemoveLastListener() {\n                listener?.dispose();\n            }\n        };\n        if (!disposable) {\n            _addLeakageTraceLogic(options);\n        }\n        const emitter = new Emitter(options);\n        disposable?.add(emitter);\n        return emitter.event;\n    }\n    /**\n     * Adds the IDisposable to the store if it's set, and returns it. Useful to\n     * Event function implementation.\n     */\n    function addAndReturnDisposable(d, store) {\n        if (store instanceof Array) {\n            store.push(d);\n        }\n        else if (store) {\n            store.add(d);\n        }\n        return d;\n    }\n    function debounce(event, merge, delay = 100, leading = false, flushOnListenerRemove = false, leakWarningThreshold, disposable) {\n        let subscription;\n        let output = undefined;\n        let handle = undefined;\n        let numDebouncedCalls = 0;\n        let doFire;\n        const options = {\n            leakWarningThreshold,\n            onWillAddFirstListener() {\n                subscription = event(cur => {\n                    numDebouncedCalls++;\n                    output = merge(output, cur);\n                    if (leading && !handle) {\n                        emitter.fire(output);\n                        output = undefined;\n                    }\n                    doFire = () => {\n                        const _output = output;\n                        output = undefined;\n                        handle = undefined;\n                        if (!leading || numDebouncedCalls > 1) {\n                            emitter.fire(_output);\n                        }\n                        numDebouncedCalls = 0;\n                    };\n                    if (typeof delay === 'number') {\n                        clearTimeout(handle);\n                        handle = setTimeout(doFire, delay);\n                    }\n                    else {\n                        if (handle === undefined) {\n                            handle = 0;\n                            queueMicrotask(doFire);\n                        }\n                    }\n                });\n            },\n            onWillRemoveListener() {\n                if (flushOnListenerRemove && numDebouncedCalls > 0) {\n                    doFire?.();\n                }\n            },\n            onDidRemoveLastListener() {\n                doFire = undefined;\n                subscription.dispose();\n            }\n        };\n        if (!disposable) {\n            _addLeakageTraceLogic(options);\n        }\n        const emitter = new Emitter(options);\n        disposable?.add(emitter);\n        return emitter.event;\n    }\n    Event.debounce = debounce;\n    /**\n     * Debounces an event, firing after some delay (default=0) with an array of all event original objects.\n     *\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     */\n    function accumulate(event, delay = 0, disposable) {\n        return Event.debounce(event, (last, e) => {\n            if (!last) {\n                return [e];\n            }\n            last.push(e);\n            return last;\n        }, delay, undefined, true, undefined, disposable);\n    }\n    Event.accumulate = accumulate;\n    /**\n     * Filters an event such that some condition is _not_ met more than once in a row, effectively ensuring duplicate\n     * event objects from different sources do not fire the same event object.\n     *\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     *\n     * @param event The event source for the new event.\n     * @param equals The equality condition.\n     * @param disposable A disposable store to add the new EventEmitter to.\n     *\n     * @example\n     * ```\n     * // Fire only one time when a single window is opened or focused\n     * Event.latch(Event.any(onDidOpenWindow, onDidFocusWindow))\n     * ```\n     */\n    function latch(event, equals = (a, b) => a === b, disposable) {\n        let firstCall = true;\n        let cache;\n        return filter(event, value => {\n            const shouldEmit = firstCall || !equals(value, cache);\n            firstCall = false;\n            cache = value;\n            return shouldEmit;\n        }, disposable);\n    }\n    Event.latch = latch;\n    /**\n     * Splits an event whose parameter is a union type into 2 separate events for each type in the union.\n     *\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     *\n     * @example\n     * ```\n     * const event = new EventEmitter<number | undefined>().event;\n     * const [numberEvent, undefinedEvent] = Event.split(event, isUndefined);\n     * ```\n     *\n     * @param event The event source for the new event.\n     * @param isT A function that determines what event is of the first type.\n     * @param disposable A disposable store to add the new EventEmitter to.\n     */\n    function split(event, isT, disposable) {\n        return [\n            Event.filter(event, isT, disposable),\n            Event.filter(event, e => !isT(e), disposable),\n        ];\n    }\n    Event.split = split;\n    /**\n     * Buffers an event until it has a listener attached.\n     *\n     * *NOTE* that this function returns an `Event` and it MUST be called with a `DisposableStore` whenever the returned\n     * event is accessible to \"third parties\", e.g the event is a public property. Otherwise a leaked listener on the\n     * returned event causes this utility to leak a listener on the original event.\n     *\n     * @param event The event source for the new event.\n     * @param flushAfterTimeout Determines whether to flush the buffer after a timeout immediately or after a\n     * `setTimeout` when the first event listener is added.\n     * @param _buffer Internal: A source event array used for tests.\n     *\n     * @example\n     * ```\n     * // Start accumulating events, when the first listener is attached, flush\n     * // the event after a timeout such that multiple listeners attached before\n     * // the timeout would receive the event\n     * this.onInstallExtension = Event.buffer(service.onInstallExtension, true);\n     * ```\n     */\n    function buffer(event, flushAfterTimeout = false, _buffer = [], disposable) {\n        let buffer = _buffer.slice();\n        let listener = event(e => {\n            if (buffer) {\n                buffer.push(e);\n            }\n            else {\n                emitter.fire(e);\n            }\n        });\n        if (disposable) {\n            disposable.add(listener);\n        }\n        const flush = () => {\n            buffer?.forEach(e => emitter.fire(e));\n            buffer = null;\n        };\n        const emitter = new Emitter({\n            onWillAddFirstListener() {\n                if (!listener) {\n                    listener = event(e => emitter.fire(e));\n                    if (disposable) {\n                        disposable.add(listener);\n                    }\n                }\n            },\n            onDidAddFirstListener() {\n                if (buffer) {\n                    if (flushAfterTimeout) {\n                        setTimeout(flush);\n                    }\n                    else {\n                        flush();\n                    }\n                }\n            },\n            onDidRemoveLastListener() {\n                if (listener) {\n                    listener.dispose();\n                }\n                listener = null;\n            }\n        });\n        if (disposable) {\n            disposable.add(emitter);\n        }\n        return emitter.event;\n    }\n    Event.buffer = buffer;\n    /**\n     * Wraps the event in an {@link IChainableEvent}, allowing a more functional programming style.\n     *\n     * @example\n     * ```\n     * // Normal\n     * const onEnterPressNormal = Event.filter(\n     *   Event.map(onKeyPress.event, e => new StandardKeyboardEvent(e)),\n     *   e.keyCode === KeyCode.Enter\n     * ).event;\n     *\n     * // Using chain\n     * const onEnterPressChain = Event.chain(onKeyPress.event, $ => $\n     *   .map(e => new StandardKeyboardEvent(e))\n     *   .filter(e => e.keyCode === KeyCode.Enter)\n     * );\n     * ```\n     */\n    function chain(event, sythensize) {\n        const fn = (listener, thisArgs, disposables) => {\n            const cs = sythensize(new ChainableSynthesis());\n            return event(function (value) {\n                const result = cs.evaluate(value);\n                if (result !== HaltChainable) {\n                    listener.call(thisArgs, result);\n                }\n            }, undefined, disposables);\n        };\n        return fn;\n    }\n    Event.chain = chain;\n    const HaltChainable = Symbol('HaltChainable');\n    class ChainableSynthesis {\n        constructor() {\n            this.steps = [];\n        }\n        map(fn) {\n            this.steps.push(fn);\n            return this;\n        }\n        forEach(fn) {\n            this.steps.push(v => {\n                fn(v);\n                return v;\n            });\n            return this;\n        }\n        filter(fn) {\n            this.steps.push(v => fn(v) ? v : HaltChainable);\n            return this;\n        }\n        reduce(merge, initial) {\n            let last = initial;\n            this.steps.push(v => {\n                last = merge(last, v);\n                return last;\n            });\n            return this;\n        }\n        latch(equals = (a, b) => a === b) {\n            let firstCall = true;\n            let cache;\n            this.steps.push(value => {\n                const shouldEmit = firstCall || !equals(value, cache);\n                firstCall = false;\n                cache = value;\n                return shouldEmit ? value : HaltChainable;\n            });\n            return this;\n        }\n        evaluate(value) {\n            for (const step of this.steps) {\n                value = step(value);\n                if (value === HaltChainable) {\n                    break;\n                }\n            }\n            return value;\n        }\n    }\n    /**\n     * Creates an {@link Event} from a node event emitter.\n     */\n    function fromNodeEventEmitter(emitter, eventName, map = id => id) {\n        const fn = (...args) => result.fire(map(...args));\n        const onFirstListenerAdd = () => emitter.on(eventName, fn);\n        const onLastListenerRemove = () => emitter.removeListener(eventName, fn);\n        const result = new Emitter({ onWillAddFirstListener: onFirstListenerAdd, onDidRemoveLastListener: onLastListenerRemove });\n        return result.event;\n    }\n    Event.fromNodeEventEmitter = fromNodeEventEmitter;\n    /**\n     * Creates an {@link Event} from a DOM event emitter.\n     */\n    function fromDOMEventEmitter(emitter, eventName, map = id => id) {\n        const fn = (...args) => result.fire(map(...args));\n        const onFirstListenerAdd = () => emitter.addEventListener(eventName, fn);\n        const onLastListenerRemove = () => emitter.removeEventListener(eventName, fn);\n        const result = new Emitter({ onWillAddFirstListener: onFirstListenerAdd, onDidRemoveLastListener: onLastListenerRemove });\n        return result.event;\n    }\n    Event.fromDOMEventEmitter = fromDOMEventEmitter;\n    /**\n     * Creates a promise out of an event, using the {@link Event.once} helper.\n     */\n    function toPromise(event) {\n        return new Promise(resolve => once(event)(resolve));\n    }\n    Event.toPromise = toPromise;\n    /**\n     * Creates an event out of a promise that fires once when the promise is\n     * resolved with the result of the promise or `undefined`.\n     */\n    function fromPromise(promise) {\n        const result = new Emitter();\n        promise.then(res => {\n            result.fire(res);\n        }, () => {\n            result.fire(undefined);\n        }).finally(() => {\n            result.dispose();\n        });\n        return result.event;\n    }\n    Event.fromPromise = fromPromise;\n    /**\n     * A convenience function for forwarding an event to another emitter which\n     * improves readability.\n     *\n     * This is similar to {@link Relay} but allows instantiating and forwarding\n     * on a single line and also allows for multiple source events.\n     * @param from The event to forward.\n     * @param to The emitter to forward the event to.\n     * @example\n     * Event.forward(event, emitter);\n     * // equivalent to\n     * event(e => emitter.fire(e));\n     * // equivalent to\n     * event(emitter.fire, emitter);\n     */\n    function forward(from, to) {\n        return from(e => to.fire(e));\n    }\n    Event.forward = forward;\n    function runAndSubscribe(event, handler, initial) {\n        handler(initial);\n        return event(e => handler(e));\n    }\n    Event.runAndSubscribe = runAndSubscribe;\n    class EmitterObserver {\n        constructor(_observable, store) {\n            this._observable = _observable;\n            this._counter = 0;\n            this._hasChanged = false;\n            const options = {\n                onWillAddFirstListener: () => {\n                    _observable.addObserver(this);\n                    // Communicate to the observable that we received its current value and would like to be notified about future changes.\n                    this._observable.reportChanges();\n                },\n                onDidRemoveLastListener: () => {\n                    _observable.removeObserver(this);\n                }\n            };\n            if (!store) {\n                _addLeakageTraceLogic(options);\n            }\n            this.emitter = new Emitter(options);\n            if (store) {\n                store.add(this.emitter);\n            }\n        }\n        beginUpdate(_observable) {\n            // assert(_observable === this.obs);\n            this._counter++;\n        }\n        handlePossibleChange(_observable) {\n            // assert(_observable === this.obs);\n        }\n        handleChange(_observable, _change) {\n            // assert(_observable === this.obs);\n            this._hasChanged = true;\n        }\n        endUpdate(_observable) {\n            // assert(_observable === this.obs);\n            this._counter--;\n            if (this._counter === 0) {\n                this._observable.reportChanges();\n                if (this._hasChanged) {\n                    this._hasChanged = false;\n                    this.emitter.fire(this._observable.get());\n                }\n            }\n        }\n    }\n    /**\n     * Creates an event emitter that is fired when the observable changes.\n     * Each listeners subscribes to the emitter.\n     */\n    function fromObservable(obs, store) {\n        const observer = new EmitterObserver(obs, store);\n        return observer.emitter.event;\n    }\n    Event.fromObservable = fromObservable;\n    /**\n     * Each listener is attached to the observable directly.\n     */\n    function fromObservableLight(observable) {\n        return (listener, thisArgs, disposables) => {\n            let count = 0;\n            let didChange = false;\n            const observer = {\n                beginUpdate() {\n                    count++;\n                },\n                endUpdate() {\n                    count--;\n                    if (count === 0) {\n                        observable.reportChanges();\n                        if (didChange) {\n                            didChange = false;\n                            listener.call(thisArgs);\n                        }\n                    }\n                },\n                handlePossibleChange() {\n                    // noop\n                },\n                handleChange() {\n                    didChange = true;\n                }\n            };\n            observable.addObserver(observer);\n            observable.reportChanges();\n            const disposable = {\n                dispose() {\n                    observable.removeObserver(observer);\n                }\n            };\n            if (disposables instanceof DisposableStore) {\n                disposables.add(disposable);\n            }\n            else if (Array.isArray(disposables)) {\n                disposables.push(disposable);\n            }\n            return disposable;\n        };\n    }\n    Event.fromObservableLight = fromObservableLight;\n})(Event || (Event = {}));\nexport class EventProfiling {\n    static { this.all = new Set(); }\n    static { this._idPool = 0; }\n    constructor(name) {\n        this.listenerCount = 0;\n        this.invocationCount = 0;\n        this.elapsedOverall = 0;\n        this.durations = [];\n        this.name = `${name}_${EventProfiling._idPool++}`;\n        EventProfiling.all.add(this);\n    }\n    start(listenerCount) {\n        this._stopWatch = new StopWatch();\n        this.listenerCount = listenerCount;\n    }\n    stop() {\n        if (this._stopWatch) {\n            const elapsed = this._stopWatch.elapsed();\n            this.durations.push(elapsed);\n            this.elapsedOverall += elapsed;\n            this.invocationCount += 1;\n            this._stopWatch = undefined;\n        }\n    }\n}\nlet _globalLeakWarningThreshold = -1;\nclass LeakageMonitor {\n    static { this._idPool = 1; }\n    constructor(_errorHandler, threshold, name = (LeakageMonitor._idPool++).toString(16).padStart(3, '0')) {\n        this._errorHandler = _errorHandler;\n        this.threshold = threshold;\n        this.name = name;\n        this._warnCountdown = 0;\n    }\n    dispose() {\n        this._stacks?.clear();\n    }\n    check(stack, listenerCount) {\n        const threshold = this.threshold;\n        if (threshold <= 0 || listenerCount < threshold) {\n            return undefined;\n        }\n        if (!this._stacks) {\n            this._stacks = new Map();\n        }\n        const count = (this._stacks.get(stack.value) || 0);\n        this._stacks.set(stack.value, count + 1);\n        this._warnCountdown -= 1;\n        if (this._warnCountdown <= 0) {\n            // only warn on first exceed and then every time the limit\n            // is exceeded by 50% again\n            this._warnCountdown = threshold * 0.5;\n            const [topStack, topCount] = this.getMostFrequentStack();\n            const message = `[${this.name}] potential listener LEAK detected, having ${listenerCount} listeners already. MOST frequent listener (${topCount}):`;\n            console.warn(message);\n            console.warn(topStack);\n            const error = new ListenerLeakError(message, topStack);\n            this._errorHandler(error);\n        }\n        return () => {\n            const count = (this._stacks.get(stack.value) || 0);\n            this._stacks.set(stack.value, count - 1);\n        };\n    }\n    getMostFrequentStack() {\n        if (!this._stacks) {\n            return undefined;\n        }\n        let topStack;\n        let topCount = 0;\n        for (const [stack, count] of this._stacks) {\n            if (!topStack || topCount < count) {\n                topStack = [stack, count];\n                topCount = count;\n            }\n        }\n        return topStack;\n    }\n}\nclass Stacktrace {\n    static create() {\n        const err = new Error();\n        return new Stacktrace(err.stack ?? '');\n    }\n    constructor(value) {\n        this.value = value;\n    }\n    print() {\n        console.warn(this.value.split('\\n').slice(2).join('\\n'));\n    }\n}\n// error that is logged when going over the configured listener threshold\nexport class ListenerLeakError extends Error {\n    constructor(message, stack) {\n        super(message);\n        this.name = 'ListenerLeakError';\n        this.stack = stack;\n    }\n}\n// SEVERE error that is logged when having gone way over the configured listener\n// threshold so that the emitter refuses to accept more listeners\nexport class ListenerRefusalError extends Error {\n    constructor(message, stack) {\n        super(message);\n        this.name = 'ListenerRefusalError';\n        this.stack = stack;\n    }\n}\nclass UniqueContainer {\n    constructor(value) {\n        this.value = value;\n    }\n}\nconst compactionThreshold = 2;\nconst forEachListener = (listeners, fn) => {\n    if (listeners instanceof UniqueContainer) {\n        fn(listeners);\n    }\n    else {\n        for (let i = 0; i < listeners.length; i++) {\n            const l = listeners[i];\n            if (l) {\n                fn(l);\n            }\n        }\n    }\n};\nlet _listenerFinalizers;\nif (_enableListenerGCedWarning) {\n    const leaks = [];\n    setInterval(() => {\n        if (leaks.length === 0) {\n            return;\n        }\n        console.warn('[LEAKING LISTENERS] GC\\'ed these listeners that were NOT yet disposed:');\n        console.warn(leaks.join('\\n'));\n        leaks.length = 0;\n    }, 3000);\n    _listenerFinalizers = new FinalizationRegistry(heldValue => {\n        if (typeof heldValue === 'string') {\n            leaks.push(heldValue);\n        }\n    });\n}\n/**\n * The Emitter can be used to expose an Event to the public\n * to fire it from the insides.\n * Sample:\n    class Document {\n\n        private readonly _onDidChange = new Emitter<(value:string)=>any>();\n\n        public onDidChange = this._onDidChange.event;\n\n        // getter-style\n        // get onDidChange(): Event<(value:string)=>any> {\n        // \treturn this._onDidChange.event;\n        // }\n\n        private _doIt() {\n            //...\n            this._onDidChange.fire(value);\n        }\n    }\n */\nexport class Emitter {\n    constructor(options) {\n        this._size = 0;\n        this._options = options;\n        this._leakageMon = (_globalLeakWarningThreshold > 0 || this._options?.leakWarningThreshold)\n            ? new LeakageMonitor(options?.onListenerError ?? onUnexpectedError, this._options?.leakWarningThreshold ?? _globalLeakWarningThreshold) :\n            undefined;\n        this._perfMon = this._options?._profName ? new EventProfiling(this._options._profName) : undefined;\n        this._deliveryQueue = this._options?.deliveryQueue;\n    }\n    dispose() {\n        if (!this._disposed) {\n            this._disposed = true;\n            // It is bad to have listeners at the time of disposing an emitter, it is worst to have listeners keep the emitter\n            // alive via the reference that's embedded in their disposables. Therefore we loop over all remaining listeners and\n            // unset their subscriptions/disposables. Looping and blaming remaining listeners is done on next tick because the\n            // the following programming pattern is very popular:\n            //\n            // const someModel = this._disposables.add(new ModelObject()); // (1) create and register model\n            // this._disposables.add(someModel.onDidChange(() => { ... }); // (2) subscribe and register model-event listener\n            // ...later...\n            // this._disposables.dispose(); disposes (1) then (2): don't warn after (1) but after the \"overall dispose\" is done\n            if (this._deliveryQueue?.current === this) {\n                this._deliveryQueue.reset();\n            }\n            if (this._listeners) {\n                if (_enableDisposeWithListenerWarning) {\n                    const listeners = this._listeners;\n                    queueMicrotask(() => {\n                        forEachListener(listeners, l => l.stack?.print());\n                    });\n                }\n                this._listeners = undefined;\n                this._size = 0;\n            }\n            this._options?.onDidRemoveLastListener?.();\n            this._leakageMon?.dispose();\n        }\n    }\n    /**\n     * For the public to allow to subscribe\n     * to events from this Emitter\n     */\n    get event() {\n        this._event ??= (callback, thisArgs, disposables) => {\n            if (this._leakageMon && this._size > this._leakageMon.threshold ** 2) {\n                const message = `[${this._leakageMon.name}] REFUSES to accept new listeners because it exceeded its threshold by far (${this._size} vs ${this._leakageMon.threshold})`;\n                console.warn(message);\n                const tuple = this._leakageMon.getMostFrequentStack() ?? ['UNKNOWN stack', -1];\n                const error = new ListenerRefusalError(`${message}. HINT: Stack shows most frequent listener (${tuple[1]}-times)`, tuple[0]);\n                const errorHandler = this._options?.onListenerError || onUnexpectedError;\n                errorHandler(error);\n                return Disposable.None;\n            }\n            if (this._disposed) {\n                // todo: should we warn if a listener is added to a disposed emitter? This happens often\n                return Disposable.None;\n            }\n            if (thisArgs) {\n                callback = callback.bind(thisArgs);\n            }\n            const contained = new UniqueContainer(callback);\n            let removeMonitor;\n            let stack;\n            if (this._leakageMon && this._size >= Math.ceil(this._leakageMon.threshold * 0.2)) {\n                // check and record this emitter for potential leakage\n                contained.stack = Stacktrace.create();\n                removeMonitor = this._leakageMon.check(contained.stack, this._size + 1);\n            }\n            if (_enableDisposeWithListenerWarning) {\n                contained.stack = stack ?? Stacktrace.create();\n            }\n            if (!this._listeners) {\n                this._options?.onWillAddFirstListener?.(this);\n                this._listeners = contained;\n                this._options?.onDidAddFirstListener?.(this);\n            }\n            else if (this._listeners instanceof UniqueContainer) {\n                this._deliveryQueue ??= new EventDeliveryQueuePrivate();\n                this._listeners = [this._listeners, contained];\n            }\n            else {\n                this._listeners.push(contained);\n            }\n            this._size++;\n            const result = toDisposable(() => {\n                _listenerFinalizers?.unregister(result);\n                removeMonitor?.();\n                this._removeListener(contained);\n            });\n            if (disposables instanceof DisposableStore) {\n                disposables.add(result);\n            }\n            else if (Array.isArray(disposables)) {\n                disposables.push(result);\n            }\n            if (_listenerFinalizers) {\n                const stack = new Error().stack.split('\\n').slice(2, 3).join('\\n').trim();\n                const match = /(file:|vscode-file:\\/\\/vscode-app)?(\\/[^:]*:\\d+:\\d+)/.exec(stack);\n                _listenerFinalizers.register(result, match?.[2] ?? stack, result);\n            }\n            return result;\n        };\n        return this._event;\n    }\n    _removeListener(listener) {\n        this._options?.onWillRemoveListener?.(this);\n        if (!this._listeners) {\n            return; // expected if a listener gets disposed\n        }\n        if (this._size === 1) {\n            this._listeners = undefined;\n            this._options?.onDidRemoveLastListener?.(this);\n            this._size = 0;\n            return;\n        }\n        // size > 1 which requires that listeners be a list:\n        const listeners = this._listeners;\n        const index = listeners.indexOf(listener);\n        if (index === -1) {\n            console.log('disposed?', this._disposed);\n            console.log('size?', this._size);\n            console.log('arr?', JSON.stringify(this._listeners));\n            throw new Error('Attempted to dispose unknown listener');\n        }\n        this._size--;\n        listeners[index] = undefined;\n        const adjustDeliveryQueue = this._deliveryQueue.current === this;\n        if (this._size * compactionThreshold <= listeners.length) {\n            let n = 0;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listeners[i]) {\n                    listeners[n++] = listeners[i];\n                }\n                else if (adjustDeliveryQueue) {\n                    this._deliveryQueue.end--;\n                    if (n < this._deliveryQueue.i) {\n                        this._deliveryQueue.i--;\n                    }\n                }\n            }\n            listeners.length = n;\n        }\n    }\n    _deliver(listener, value) {\n        if (!listener) {\n            return;\n        }\n        const errorHandler = this._options?.onListenerError || onUnexpectedError;\n        if (!errorHandler) {\n            listener.value(value);\n            return;\n        }\n        try {\n            listener.value(value);\n        }\n        catch (e) {\n            errorHandler(e);\n        }\n    }\n    /** Delivers items in the queue. Assumes the queue is ready to go. */\n    _deliverQueue(dq) {\n        const listeners = dq.current._listeners;\n        while (dq.i < dq.end) {\n            // important: dq.i is incremented before calling deliver() because it might reenter deliverQueue()\n            this._deliver(listeners[dq.i++], dq.value);\n        }\n        dq.reset();\n    }\n    /**\n     * To be kept private to fire an event to\n     * subscribers\n     */\n    fire(event) {\n        if (this._deliveryQueue?.current) {\n            this._deliverQueue(this._deliveryQueue);\n            this._perfMon?.stop(); // last fire() will have starting perfmon, stop it before starting the next dispatch\n        }\n        this._perfMon?.start(this._size);\n        if (!this._listeners) {\n            // no-op\n        }\n        else if (this._listeners instanceof UniqueContainer) {\n            this._deliver(this._listeners, event);\n        }\n        else {\n            const dq = this._deliveryQueue;\n            dq.enqueue(this, event, this._listeners.length);\n            this._deliverQueue(dq);\n        }\n        this._perfMon?.stop();\n    }\n    hasListeners() {\n        return this._size > 0;\n    }\n}\nexport const createEventDeliveryQueue = () => new EventDeliveryQueuePrivate();\nclass EventDeliveryQueuePrivate {\n    constructor() {\n        /**\n         * Index in current's listener list.\n         */\n        this.i = -1;\n        /**\n         * The last index in the listener's list to deliver.\n         */\n        this.end = 0;\n    }\n    enqueue(emitter, value, end) {\n        this.i = 0;\n        this.end = end;\n        this.current = emitter;\n        this.value = value;\n    }\n    reset() {\n        this.i = this.end; // force any current emission loop to stop, mainly for during dispose\n        this.current = undefined;\n        this.value = undefined;\n    }\n}\nexport class PauseableEmitter extends Emitter {\n    constructor(options) {\n        super(options);\n        this._isPaused = 0;\n        this._eventQueue = new LinkedList();\n        this._mergeFn = options?.merge;\n    }\n    pause() {\n        this._isPaused++;\n    }\n    resume() {\n        if (this._isPaused !== 0 && --this._isPaused === 0) {\n            if (this._mergeFn) {\n                // use the merge function to create a single composite\n                // event. make a copy in case firing pauses this emitter\n                if (this._eventQueue.size > 0) {\n                    const events = Array.from(this._eventQueue);\n                    this._eventQueue.clear();\n                    super.fire(this._mergeFn(events));\n                }\n            }\n            else {\n                // no merging, fire each event individually and test\n                // that this emitter isn't paused halfway through\n                while (!this._isPaused && this._eventQueue.size !== 0) {\n                    super.fire(this._eventQueue.shift());\n                }\n            }\n        }\n    }\n    fire(event) {\n        if (this._size) {\n            if (this._isPaused !== 0) {\n                this._eventQueue.push(event);\n            }\n            else {\n                super.fire(event);\n            }\n        }\n    }\n}\nexport class DebounceEmitter extends PauseableEmitter {\n    constructor(options) {\n        super(options);\n        this._delay = options.delay ?? 100;\n    }\n    fire(event) {\n        if (!this._handle) {\n            this.pause();\n            this._handle = setTimeout(() => {\n                this._handle = undefined;\n                this.resume();\n            }, this._delay);\n        }\n        super.fire(event);\n    }\n}\n/**\n * An emitter which queue all events and then process them at the\n * end of the event loop.\n */\nexport class MicrotaskEmitter extends Emitter {\n    constructor(options) {\n        super(options);\n        this._queuedEvents = [];\n        this._mergeFn = options?.merge;\n    }\n    fire(event) {\n        if (!this.hasListeners()) {\n            return;\n        }\n        this._queuedEvents.push(event);\n        if (this._queuedEvents.length === 1) {\n            queueMicrotask(() => {\n                if (this._mergeFn) {\n                    super.fire(this._mergeFn(this._queuedEvents));\n                }\n                else {\n                    this._queuedEvents.forEach(e => super.fire(e));\n                }\n                this._queuedEvents = [];\n            });\n        }\n    }\n}\n/**\n * An event emitter that multiplexes many events into a single event.\n *\n * @example Listen to the `onData` event of all `Thing`s, dynamically adding and removing `Thing`s\n * to the multiplexer as needed.\n *\n * ```typescript\n * const anythingDataMultiplexer = new EventMultiplexer<{ data: string }>();\n *\n * const thingListeners = DisposableMap<Thing, IDisposable>();\n *\n * thingService.onDidAddThing(thing => {\n *   thingListeners.set(thing, anythingDataMultiplexer.add(thing.onData);\n * });\n * thingService.onDidRemoveThing(thing => {\n *   thingListeners.deleteAndDispose(thing);\n * });\n *\n * anythingDataMultiplexer.event(e => {\n *   console.log('Something fired data ' + e.data)\n * });\n * ```\n */\nexport class EventMultiplexer {\n    constructor() {\n        this.hasListeners = false;\n        this.events = [];\n        this.emitter = new Emitter({\n            onWillAddFirstListener: () => this.onFirstListenerAdd(),\n            onDidRemoveLastListener: () => this.onLastListenerRemove()\n        });\n    }\n    get event() {\n        return this.emitter.event;\n    }\n    add(event) {\n        const e = { event: event, listener: null };\n        this.events.push(e);\n        if (this.hasListeners) {\n            this.hook(e);\n        }\n        const dispose = () => {\n            if (this.hasListeners) {\n                this.unhook(e);\n            }\n            const idx = this.events.indexOf(e);\n            this.events.splice(idx, 1);\n        };\n        return toDisposable(createSingleCallFunction(dispose));\n    }\n    onFirstListenerAdd() {\n        this.hasListeners = true;\n        this.events.forEach(e => this.hook(e));\n    }\n    onLastListenerRemove() {\n        this.hasListeners = false;\n        this.events.forEach(e => this.unhook(e));\n    }\n    hook(e) {\n        e.listener = e.event(r => this.emitter.fire(r));\n    }\n    unhook(e) {\n        e.listener?.dispose();\n        e.listener = null;\n    }\n    dispose() {\n        this.emitter.dispose();\n        for (const e of this.events) {\n            e.listener?.dispose();\n        }\n        this.events = [];\n    }\n}\n/**\n * The EventBufferer is useful in situations in which you want\n * to delay firing your events during some code.\n * You can wrap that code and be sure that the event will not\n * be fired during that wrap.\n *\n * ```\n * const emitter: Emitter;\n * const delayer = new EventDelayer();\n * const delayedEvent = delayer.wrapEvent(emitter.event);\n *\n * delayedEvent(console.log);\n *\n * delayer.bufferEvents(() => {\n *   emitter.fire(); // event will not be fired yet\n * });\n *\n * // event will only be fired at this point\n * ```\n */\nexport class EventBufferer {\n    constructor() {\n        this.data = [];\n    }\n    wrapEvent(event, reduce, initial) {\n        return (listener, thisArgs, disposables) => {\n            return event(i => {\n                const data = this.data[this.data.length - 1];\n                // Non-reduce scenario\n                if (!reduce) {\n                    // Buffering case\n                    if (data) {\n                        data.buffers.push(() => listener.call(thisArgs, i));\n                    }\n                    else {\n                        // Not buffering case\n                        listener.call(thisArgs, i);\n                    }\n                    return;\n                }\n                // Reduce scenario\n                const reduceData = data;\n                // Not buffering case\n                if (!reduceData) {\n                    // TODO: Is there a way to cache this reduce call for all listeners?\n                    listener.call(thisArgs, reduce(initial, i));\n                    return;\n                }\n                // Buffering case\n                reduceData.items ??= [];\n                reduceData.items.push(i);\n                if (reduceData.buffers.length === 0) {\n                    // Include a single buffered function that will reduce all events when we're done buffering events\n                    data.buffers.push(() => {\n                        // cache the reduced result so that the value can be shared across all listeners\n                        reduceData.reducedResult ??= initial\n                            ? reduceData.items.reduce(reduce, initial)\n                            : reduceData.items.reduce(reduce);\n                        listener.call(thisArgs, reduceData.reducedResult);\n                    });\n                }\n            }, undefined, disposables);\n        };\n    }\n    bufferEvents(fn) {\n        const data = { buffers: new Array() };\n        this.data.push(data);\n        const r = fn();\n        this.data.pop();\n        data.buffers.forEach(flush => flush());\n        return r;\n    }\n}\n/**\n * A Relay is an event forwarder which functions as a replugabble event pipe.\n * Once created, you can connect an input event to it and it will simply forward\n * events from that input event through its own `event` property. The `input`\n * can be changed at any point in time.\n */\nexport class Relay {\n    constructor() {\n        this.listening = false;\n        this.inputEvent = Event.None;\n        this.inputEventListener = Disposable.None;\n        this.emitter = new Emitter({\n            onDidAddFirstListener: () => {\n                this.listening = true;\n                this.inputEventListener = this.inputEvent(this.emitter.fire, this.emitter);\n            },\n            onDidRemoveLastListener: () => {\n                this.listening = false;\n                this.inputEventListener.dispose();\n            }\n        });\n        this.event = this.emitter.event;\n    }\n    set input(event) {\n        this.inputEvent = event;\n        if (this.listening) {\n            this.inputEventListener.dispose();\n            this.inputEventListener = event(this.emitter.fire, this.emitter);\n        }\n    }\n    dispose() {\n        this.inputEventListener.dispose();\n        this.emitter.dispose();\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}