{"ast":null,"code":"var _ViewLayerRenderer;\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { createTrustedTypesPolicy } from '../../../base/browser/trustedTypes.js';\nimport { BugIndicatingError } from '../../../base/common/errors.js';\nimport { StringBuilder } from '../../common/core/stringBuilder.js';\nexport class RenderedLinesCollection {\n  constructor(_lineFactory) {\n    this._lineFactory = _lineFactory;\n    this._set(1, []);\n  }\n  flush() {\n    this._set(1, []);\n  }\n  _set(rendLineNumberStart, lines) {\n    this._lines = lines;\n    this._rendLineNumberStart = rendLineNumberStart;\n  }\n  _get() {\n    return {\n      rendLineNumberStart: this._rendLineNumberStart,\n      lines: this._lines\n    };\n  }\n  /**\n   * @returns Inclusive line number that is inside this collection\n   */\n  getStartLineNumber() {\n    return this._rendLineNumberStart;\n  }\n  /**\n   * @returns Inclusive line number that is inside this collection\n   */\n  getEndLineNumber() {\n    return this._rendLineNumberStart + this._lines.length - 1;\n  }\n  getCount() {\n    return this._lines.length;\n  }\n  getLine(lineNumber) {\n    const lineIndex = lineNumber - this._rendLineNumberStart;\n    if (lineIndex < 0 || lineIndex >= this._lines.length) {\n      throw new BugIndicatingError('Illegal value for lineNumber');\n    }\n    return this._lines[lineIndex];\n  }\n  /**\n   * @returns Lines that were removed from this collection\n   */\n  onLinesDeleted(deleteFromLineNumber, deleteToLineNumber) {\n    if (this.getCount() === 0) {\n      // no lines\n      return null;\n    }\n    const startLineNumber = this.getStartLineNumber();\n    const endLineNumber = this.getEndLineNumber();\n    if (deleteToLineNumber < startLineNumber) {\n      // deleting above the viewport\n      const deleteCnt = deleteToLineNumber - deleteFromLineNumber + 1;\n      this._rendLineNumberStart -= deleteCnt;\n      return null;\n    }\n    if (deleteFromLineNumber > endLineNumber) {\n      // deleted below the viewport\n      return null;\n    }\n    // Record what needs to be deleted\n    let deleteStartIndex = 0;\n    let deleteCount = 0;\n    for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n      const lineIndex = lineNumber - this._rendLineNumberStart;\n      if (deleteFromLineNumber <= lineNumber && lineNumber <= deleteToLineNumber) {\n        // this is a line to be deleted\n        if (deleteCount === 0) {\n          // this is the first line to be deleted\n          deleteStartIndex = lineIndex;\n          deleteCount = 1;\n        } else {\n          deleteCount++;\n        }\n      }\n    }\n    // Adjust this._rendLineNumberStart for lines deleted above\n    if (deleteFromLineNumber < startLineNumber) {\n      // Something was deleted above\n      let deleteAboveCount = 0;\n      if (deleteToLineNumber < startLineNumber) {\n        // the entire deleted lines are above\n        deleteAboveCount = deleteToLineNumber - deleteFromLineNumber + 1;\n      } else {\n        deleteAboveCount = startLineNumber - deleteFromLineNumber;\n      }\n      this._rendLineNumberStart -= deleteAboveCount;\n    }\n    const deleted = this._lines.splice(deleteStartIndex, deleteCount);\n    return deleted;\n  }\n  onLinesChanged(changeFromLineNumber, changeCount) {\n    const changeToLineNumber = changeFromLineNumber + changeCount - 1;\n    if (this.getCount() === 0) {\n      // no lines\n      return false;\n    }\n    const startLineNumber = this.getStartLineNumber();\n    const endLineNumber = this.getEndLineNumber();\n    let someoneNotified = false;\n    for (let changedLineNumber = changeFromLineNumber; changedLineNumber <= changeToLineNumber; changedLineNumber++) {\n      if (changedLineNumber >= startLineNumber && changedLineNumber <= endLineNumber) {\n        // Notify the line\n        this._lines[changedLineNumber - this._rendLineNumberStart].onContentChanged();\n        someoneNotified = true;\n      }\n    }\n    return someoneNotified;\n  }\n  onLinesInserted(insertFromLineNumber, insertToLineNumber) {\n    if (this.getCount() === 0) {\n      // no lines\n      return null;\n    }\n    const insertCnt = insertToLineNumber - insertFromLineNumber + 1;\n    const startLineNumber = this.getStartLineNumber();\n    const endLineNumber = this.getEndLineNumber();\n    if (insertFromLineNumber <= startLineNumber) {\n      // inserting above the viewport\n      this._rendLineNumberStart += insertCnt;\n      return null;\n    }\n    if (insertFromLineNumber > endLineNumber) {\n      // inserting below the viewport\n      return null;\n    }\n    if (insertCnt + insertFromLineNumber > endLineNumber) {\n      // insert inside the viewport in such a way that all remaining lines are pushed outside\n      const deleted = this._lines.splice(insertFromLineNumber - this._rendLineNumberStart, endLineNumber - insertFromLineNumber + 1);\n      return deleted;\n    }\n    // insert inside the viewport, push out some lines, but not all remaining lines\n    const newLines = [];\n    for (let i = 0; i < insertCnt; i++) {\n      newLines[i] = this._lineFactory.createLine();\n    }\n    const insertIndex = insertFromLineNumber - this._rendLineNumberStart;\n    const beforeLines = this._lines.slice(0, insertIndex);\n    const afterLines = this._lines.slice(insertIndex, this._lines.length - insertCnt);\n    const deletedLines = this._lines.slice(this._lines.length - insertCnt, this._lines.length);\n    this._lines = beforeLines.concat(newLines).concat(afterLines);\n    return deletedLines;\n  }\n  onTokensChanged(ranges) {\n    if (this.getCount() === 0) {\n      // no lines\n      return false;\n    }\n    const startLineNumber = this.getStartLineNumber();\n    const endLineNumber = this.getEndLineNumber();\n    let notifiedSomeone = false;\n    for (let i = 0, len = ranges.length; i < len; i++) {\n      const rng = ranges[i];\n      if (rng.toLineNumber < startLineNumber || rng.fromLineNumber > endLineNumber) {\n        // range outside viewport\n        continue;\n      }\n      const from = Math.max(startLineNumber, rng.fromLineNumber);\n      const to = Math.min(endLineNumber, rng.toLineNumber);\n      for (let lineNumber = from; lineNumber <= to; lineNumber++) {\n        const lineIndex = lineNumber - this._rendLineNumberStart;\n        this._lines[lineIndex].onTokensChanged();\n        notifiedSomeone = true;\n      }\n    }\n    return notifiedSomeone;\n  }\n}\nexport class VisibleLinesCollection {\n  constructor(_lineFactory) {\n    this._lineFactory = _lineFactory;\n    this.domNode = this._createDomNode();\n    this._linesCollection = new RenderedLinesCollection(this._lineFactory);\n  }\n  _createDomNode() {\n    const domNode = createFastDomNode(document.createElement('div'));\n    domNode.setClassName('view-layer');\n    domNode.setPosition('absolute');\n    domNode.domNode.setAttribute('role', 'presentation');\n    domNode.domNode.setAttribute('aria-hidden', 'true');\n    return domNode;\n  }\n  // ---- begin view event handlers\n  onConfigurationChanged(e) {\n    if (e.hasChanged(146 /* EditorOption.layoutInfo */)) {\n      return true;\n    }\n    return false;\n  }\n  onFlushed(e) {\n    this._linesCollection.flush();\n    // No need to clear the dom node because a full .innerHTML will occur in ViewLayerRenderer._render\n    return true;\n  }\n  onLinesChanged(e) {\n    return this._linesCollection.onLinesChanged(e.fromLineNumber, e.count);\n  }\n  onLinesDeleted(e) {\n    const deleted = this._linesCollection.onLinesDeleted(e.fromLineNumber, e.toLineNumber);\n    if (deleted) {\n      // Remove from DOM\n      for (let i = 0, len = deleted.length; i < len; i++) {\n        const lineDomNode = deleted[i].getDomNode();\n        lineDomNode?.remove();\n      }\n    }\n    return true;\n  }\n  onLinesInserted(e) {\n    const deleted = this._linesCollection.onLinesInserted(e.fromLineNumber, e.toLineNumber);\n    if (deleted) {\n      // Remove from DOM\n      for (let i = 0, len = deleted.length; i < len; i++) {\n        const lineDomNode = deleted[i].getDomNode();\n        lineDomNode?.remove();\n      }\n    }\n    return true;\n  }\n  onScrollChanged(e) {\n    return e.scrollTopChanged;\n  }\n  onTokensChanged(e) {\n    return this._linesCollection.onTokensChanged(e.ranges);\n  }\n  onZonesChanged(e) {\n    return true;\n  }\n  // ---- end view event handlers\n  getStartLineNumber() {\n    return this._linesCollection.getStartLineNumber();\n  }\n  getEndLineNumber() {\n    return this._linesCollection.getEndLineNumber();\n  }\n  getVisibleLine(lineNumber) {\n    return this._linesCollection.getLine(lineNumber);\n  }\n  renderLines(viewportData) {\n    const inp = this._linesCollection._get();\n    const renderer = new ViewLayerRenderer(this.domNode.domNode, this._lineFactory, viewportData);\n    const ctx = {\n      rendLineNumberStart: inp.rendLineNumberStart,\n      lines: inp.lines,\n      linesLength: inp.lines.length\n    };\n    // Decide if this render will do a single update (single large .innerHTML) or many updates (inserting/removing dom nodes)\n    const resCtx = renderer.render(ctx, viewportData.startLineNumber, viewportData.endLineNumber, viewportData.relativeVerticalOffset);\n    this._linesCollection._set(resCtx.rendLineNumberStart, resCtx.lines);\n  }\n}\nclass ViewLayerRenderer {\n  constructor(_domNode, _lineFactory, _viewportData) {\n    this._domNode = _domNode;\n    this._lineFactory = _lineFactory;\n    this._viewportData = _viewportData;\n  }\n  render(inContext, startLineNumber, stopLineNumber, deltaTop) {\n    const ctx = {\n      rendLineNumberStart: inContext.rendLineNumberStart,\n      lines: inContext.lines.slice(0),\n      linesLength: inContext.linesLength\n    };\n    if (ctx.rendLineNumberStart + ctx.linesLength - 1 < startLineNumber || stopLineNumber < ctx.rendLineNumberStart) {\n      // There is no overlap whatsoever\n      ctx.rendLineNumberStart = startLineNumber;\n      ctx.linesLength = stopLineNumber - startLineNumber + 1;\n      ctx.lines = [];\n      for (let x = startLineNumber; x <= stopLineNumber; x++) {\n        ctx.lines[x - startLineNumber] = this._lineFactory.createLine();\n      }\n      this._finishRendering(ctx, true, deltaTop);\n      return ctx;\n    }\n    // Update lines which will remain untouched\n    this._renderUntouchedLines(ctx, Math.max(startLineNumber - ctx.rendLineNumberStart, 0), Math.min(stopLineNumber - ctx.rendLineNumberStart, ctx.linesLength - 1), deltaTop, startLineNumber);\n    if (ctx.rendLineNumberStart > startLineNumber) {\n      // Insert lines before\n      const fromLineNumber = startLineNumber;\n      const toLineNumber = Math.min(stopLineNumber, ctx.rendLineNumberStart - 1);\n      if (fromLineNumber <= toLineNumber) {\n        this._insertLinesBefore(ctx, fromLineNumber, toLineNumber, deltaTop, startLineNumber);\n        ctx.linesLength += toLineNumber - fromLineNumber + 1;\n      }\n    } else if (ctx.rendLineNumberStart < startLineNumber) {\n      // Remove lines before\n      const removeCnt = Math.min(ctx.linesLength, startLineNumber - ctx.rendLineNumberStart);\n      if (removeCnt > 0) {\n        this._removeLinesBefore(ctx, removeCnt);\n        ctx.linesLength -= removeCnt;\n      }\n    }\n    ctx.rendLineNumberStart = startLineNumber;\n    if (ctx.rendLineNumberStart + ctx.linesLength - 1 < stopLineNumber) {\n      // Insert lines after\n      const fromLineNumber = ctx.rendLineNumberStart + ctx.linesLength;\n      const toLineNumber = stopLineNumber;\n      if (fromLineNumber <= toLineNumber) {\n        this._insertLinesAfter(ctx, fromLineNumber, toLineNumber, deltaTop, startLineNumber);\n        ctx.linesLength += toLineNumber - fromLineNumber + 1;\n      }\n    } else if (ctx.rendLineNumberStart + ctx.linesLength - 1 > stopLineNumber) {\n      // Remove lines after\n      const fromLineNumber = Math.max(0, stopLineNumber - ctx.rendLineNumberStart + 1);\n      const toLineNumber = ctx.linesLength - 1;\n      const removeCnt = toLineNumber - fromLineNumber + 1;\n      if (removeCnt > 0) {\n        this._removeLinesAfter(ctx, removeCnt);\n        ctx.linesLength -= removeCnt;\n      }\n    }\n    this._finishRendering(ctx, false, deltaTop);\n    return ctx;\n  }\n  _renderUntouchedLines(ctx, startIndex, endIndex, deltaTop, deltaLN) {\n    const rendLineNumberStart = ctx.rendLineNumberStart;\n    const lines = ctx.lines;\n    for (let i = startIndex; i <= endIndex; i++) {\n      const lineNumber = rendLineNumberStart + i;\n      lines[i].layoutLine(lineNumber, deltaTop[lineNumber - deltaLN], this._viewportData.lineHeight);\n    }\n  }\n  _insertLinesBefore(ctx, fromLineNumber, toLineNumber, deltaTop, deltaLN) {\n    const newLines = [];\n    let newLinesLen = 0;\n    for (let lineNumber = fromLineNumber; lineNumber <= toLineNumber; lineNumber++) {\n      newLines[newLinesLen++] = this._lineFactory.createLine();\n    }\n    ctx.lines = newLines.concat(ctx.lines);\n  }\n  _removeLinesBefore(ctx, removeCount) {\n    for (let i = 0; i < removeCount; i++) {\n      const lineDomNode = ctx.lines[i].getDomNode();\n      lineDomNode?.remove();\n    }\n    ctx.lines.splice(0, removeCount);\n  }\n  _insertLinesAfter(ctx, fromLineNumber, toLineNumber, deltaTop, deltaLN) {\n    const newLines = [];\n    let newLinesLen = 0;\n    for (let lineNumber = fromLineNumber; lineNumber <= toLineNumber; lineNumber++) {\n      newLines[newLinesLen++] = this._lineFactory.createLine();\n    }\n    ctx.lines = ctx.lines.concat(newLines);\n  }\n  _removeLinesAfter(ctx, removeCount) {\n    const removeIndex = ctx.linesLength - removeCount;\n    for (let i = 0; i < removeCount; i++) {\n      const lineDomNode = ctx.lines[removeIndex + i].getDomNode();\n      lineDomNode?.remove();\n    }\n    ctx.lines.splice(removeIndex, removeCount);\n  }\n  _finishRenderingNewLines(ctx, domNodeIsEmpty, newLinesHTML, wasNew) {\n    if (ViewLayerRenderer._ttPolicy) {\n      newLinesHTML = ViewLayerRenderer._ttPolicy.createHTML(newLinesHTML);\n    }\n    const lastChild = this._domNode.lastChild;\n    if (domNodeIsEmpty || !lastChild) {\n      this._domNode.innerHTML = newLinesHTML; // explains the ugly casts -> https://github.com/microsoft/vscode/issues/106396#issuecomment-692625393;\n    } else {\n      lastChild.insertAdjacentHTML('afterend', newLinesHTML);\n    }\n    let currChild = this._domNode.lastChild;\n    for (let i = ctx.linesLength - 1; i >= 0; i--) {\n      const line = ctx.lines[i];\n      if (wasNew[i]) {\n        line.setDomNode(currChild);\n        currChild = currChild.previousSibling;\n      }\n    }\n  }\n  _finishRenderingInvalidLines(ctx, invalidLinesHTML, wasInvalid) {\n    const hugeDomNode = document.createElement('div');\n    if (ViewLayerRenderer._ttPolicy) {\n      invalidLinesHTML = ViewLayerRenderer._ttPolicy.createHTML(invalidLinesHTML);\n    }\n    hugeDomNode.innerHTML = invalidLinesHTML;\n    for (let i = 0; i < ctx.linesLength; i++) {\n      const line = ctx.lines[i];\n      if (wasInvalid[i]) {\n        const source = hugeDomNode.firstChild;\n        const lineDomNode = line.getDomNode();\n        lineDomNode.parentNode.replaceChild(source, lineDomNode);\n        line.setDomNode(source);\n      }\n    }\n  }\n  _finishRendering(ctx, domNodeIsEmpty, deltaTop) {\n    const sb = ViewLayerRenderer._sb;\n    const linesLength = ctx.linesLength;\n    const lines = ctx.lines;\n    const rendLineNumberStart = ctx.rendLineNumberStart;\n    const wasNew = [];\n    {\n      sb.reset();\n      let hadNewLine = false;\n      for (let i = 0; i < linesLength; i++) {\n        const line = lines[i];\n        wasNew[i] = false;\n        const lineDomNode = line.getDomNode();\n        if (lineDomNode) {\n          // line is not new\n          continue;\n        }\n        const renderResult = line.renderLine(i + rendLineNumberStart, deltaTop[i], this._viewportData.lineHeight, this._viewportData, sb);\n        if (!renderResult) {\n          // line does not need rendering\n          continue;\n        }\n        wasNew[i] = true;\n        hadNewLine = true;\n      }\n      if (hadNewLine) {\n        this._finishRenderingNewLines(ctx, domNodeIsEmpty, sb.build(), wasNew);\n      }\n    }\n    {\n      sb.reset();\n      let hadInvalidLine = false;\n      const wasInvalid = [];\n      for (let i = 0; i < linesLength; i++) {\n        const line = lines[i];\n        wasInvalid[i] = false;\n        if (wasNew[i]) {\n          // line was new\n          continue;\n        }\n        const renderResult = line.renderLine(i + rendLineNumberStart, deltaTop[i], this._viewportData.lineHeight, this._viewportData, sb);\n        if (!renderResult) {\n          // line does not need rendering\n          continue;\n        }\n        wasInvalid[i] = true;\n        hadInvalidLine = true;\n      }\n      if (hadInvalidLine) {\n        this._finishRenderingInvalidLines(ctx, sb.build(), wasInvalid);\n      }\n    }\n  }\n}\n_ViewLayerRenderer = ViewLayerRenderer;\n_ViewLayerRenderer._ttPolicy = createTrustedTypesPolicy('editorViewLayer', {\n  createHTML: value => value\n});\n_ViewLayerRenderer._sb = new StringBuilder(100000);","map":{"version":3,"names":["createFastDomNode","createTrustedTypesPolicy","BugIndicatingError","StringBuilder","RenderedLinesCollection","constructor","_lineFactory","_set","flush","rendLineNumberStart","lines","_lines","_rendLineNumberStart","_get","getStartLineNumber","getEndLineNumber","length","getCount","getLine","lineNumber","lineIndex","onLinesDeleted","deleteFromLineNumber","deleteToLineNumber","startLineNumber","endLineNumber","deleteCnt","deleteStartIndex","deleteCount","deleteAboveCount","deleted","splice","onLinesChanged","changeFromLineNumber","changeCount","changeToLineNumber","someoneNotified","changedLineNumber","onContentChanged","onLinesInserted","insertFromLineNumber","insertToLineNumber","insertCnt","newLines","i","createLine","insertIndex","beforeLines","slice","afterLines","deletedLines","concat","onTokensChanged","ranges","notifiedSomeone","len","rng","toLineNumber","fromLineNumber","from","Math","max","to","min","VisibleLinesCollection","domNode","_createDomNode","_linesCollection","document","createElement","setClassName","setPosition","setAttribute","onConfigurationChanged","e","hasChanged","onFlushed","count","lineDomNode","getDomNode","remove","onScrollChanged","scrollTopChanged","onZonesChanged","getVisibleLine","renderLines","viewportData","inp","renderer","ViewLayerRenderer","ctx","linesLength","resCtx","render","relativeVerticalOffset","_domNode","_viewportData","inContext","stopLineNumber","deltaTop","x","_finishRendering","_renderUntouchedLines","_insertLinesBefore","removeCnt","_removeLinesBefore","_insertLinesAfter","_removeLinesAfter","startIndex","endIndex","deltaLN","layoutLine","lineHeight","newLinesLen","removeCount","removeIndex","_finishRenderingNewLines","domNodeIsEmpty","newLinesHTML","wasNew","_ttPolicy","createHTML","lastChild","innerHTML","insertAdjacentHTML","currChild","line","setDomNode","previousSibling","_finishRenderingInvalidLines","invalidLinesHTML","wasInvalid","hugeDomNode","source","firstChild","parentNode","replaceChild","sb","_sb","reset","hadNewLine","renderResult","renderLine","build","hadInvalidLine","_ViewLayerRenderer","value"],"sources":["P:/IDEA/JudgeX/JudgeX_front/node_modules/monaco-editor/esm/vs/editor/browser/view/viewLayer.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { createTrustedTypesPolicy } from '../../../base/browser/trustedTypes.js';\nimport { BugIndicatingError } from '../../../base/common/errors.js';\nimport { StringBuilder } from '../../common/core/stringBuilder.js';\nexport class RenderedLinesCollection {\n    constructor(_lineFactory) {\n        this._lineFactory = _lineFactory;\n        this._set(1, []);\n    }\n    flush() {\n        this._set(1, []);\n    }\n    _set(rendLineNumberStart, lines) {\n        this._lines = lines;\n        this._rendLineNumberStart = rendLineNumberStart;\n    }\n    _get() {\n        return {\n            rendLineNumberStart: this._rendLineNumberStart,\n            lines: this._lines\n        };\n    }\n    /**\n     * @returns Inclusive line number that is inside this collection\n     */\n    getStartLineNumber() {\n        return this._rendLineNumberStart;\n    }\n    /**\n     * @returns Inclusive line number that is inside this collection\n     */\n    getEndLineNumber() {\n        return this._rendLineNumberStart + this._lines.length - 1;\n    }\n    getCount() {\n        return this._lines.length;\n    }\n    getLine(lineNumber) {\n        const lineIndex = lineNumber - this._rendLineNumberStart;\n        if (lineIndex < 0 || lineIndex >= this._lines.length) {\n            throw new BugIndicatingError('Illegal value for lineNumber');\n        }\n        return this._lines[lineIndex];\n    }\n    /**\n     * @returns Lines that were removed from this collection\n     */\n    onLinesDeleted(deleteFromLineNumber, deleteToLineNumber) {\n        if (this.getCount() === 0) {\n            // no lines\n            return null;\n        }\n        const startLineNumber = this.getStartLineNumber();\n        const endLineNumber = this.getEndLineNumber();\n        if (deleteToLineNumber < startLineNumber) {\n            // deleting above the viewport\n            const deleteCnt = deleteToLineNumber - deleteFromLineNumber + 1;\n            this._rendLineNumberStart -= deleteCnt;\n            return null;\n        }\n        if (deleteFromLineNumber > endLineNumber) {\n            // deleted below the viewport\n            return null;\n        }\n        // Record what needs to be deleted\n        let deleteStartIndex = 0;\n        let deleteCount = 0;\n        for (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n            const lineIndex = lineNumber - this._rendLineNumberStart;\n            if (deleteFromLineNumber <= lineNumber && lineNumber <= deleteToLineNumber) {\n                // this is a line to be deleted\n                if (deleteCount === 0) {\n                    // this is the first line to be deleted\n                    deleteStartIndex = lineIndex;\n                    deleteCount = 1;\n                }\n                else {\n                    deleteCount++;\n                }\n            }\n        }\n        // Adjust this._rendLineNumberStart for lines deleted above\n        if (deleteFromLineNumber < startLineNumber) {\n            // Something was deleted above\n            let deleteAboveCount = 0;\n            if (deleteToLineNumber < startLineNumber) {\n                // the entire deleted lines are above\n                deleteAboveCount = deleteToLineNumber - deleteFromLineNumber + 1;\n            }\n            else {\n                deleteAboveCount = startLineNumber - deleteFromLineNumber;\n            }\n            this._rendLineNumberStart -= deleteAboveCount;\n        }\n        const deleted = this._lines.splice(deleteStartIndex, deleteCount);\n        return deleted;\n    }\n    onLinesChanged(changeFromLineNumber, changeCount) {\n        const changeToLineNumber = changeFromLineNumber + changeCount - 1;\n        if (this.getCount() === 0) {\n            // no lines\n            return false;\n        }\n        const startLineNumber = this.getStartLineNumber();\n        const endLineNumber = this.getEndLineNumber();\n        let someoneNotified = false;\n        for (let changedLineNumber = changeFromLineNumber; changedLineNumber <= changeToLineNumber; changedLineNumber++) {\n            if (changedLineNumber >= startLineNumber && changedLineNumber <= endLineNumber) {\n                // Notify the line\n                this._lines[changedLineNumber - this._rendLineNumberStart].onContentChanged();\n                someoneNotified = true;\n            }\n        }\n        return someoneNotified;\n    }\n    onLinesInserted(insertFromLineNumber, insertToLineNumber) {\n        if (this.getCount() === 0) {\n            // no lines\n            return null;\n        }\n        const insertCnt = insertToLineNumber - insertFromLineNumber + 1;\n        const startLineNumber = this.getStartLineNumber();\n        const endLineNumber = this.getEndLineNumber();\n        if (insertFromLineNumber <= startLineNumber) {\n            // inserting above the viewport\n            this._rendLineNumberStart += insertCnt;\n            return null;\n        }\n        if (insertFromLineNumber > endLineNumber) {\n            // inserting below the viewport\n            return null;\n        }\n        if (insertCnt + insertFromLineNumber > endLineNumber) {\n            // insert inside the viewport in such a way that all remaining lines are pushed outside\n            const deleted = this._lines.splice(insertFromLineNumber - this._rendLineNumberStart, endLineNumber - insertFromLineNumber + 1);\n            return deleted;\n        }\n        // insert inside the viewport, push out some lines, but not all remaining lines\n        const newLines = [];\n        for (let i = 0; i < insertCnt; i++) {\n            newLines[i] = this._lineFactory.createLine();\n        }\n        const insertIndex = insertFromLineNumber - this._rendLineNumberStart;\n        const beforeLines = this._lines.slice(0, insertIndex);\n        const afterLines = this._lines.slice(insertIndex, this._lines.length - insertCnt);\n        const deletedLines = this._lines.slice(this._lines.length - insertCnt, this._lines.length);\n        this._lines = beforeLines.concat(newLines).concat(afterLines);\n        return deletedLines;\n    }\n    onTokensChanged(ranges) {\n        if (this.getCount() === 0) {\n            // no lines\n            return false;\n        }\n        const startLineNumber = this.getStartLineNumber();\n        const endLineNumber = this.getEndLineNumber();\n        let notifiedSomeone = false;\n        for (let i = 0, len = ranges.length; i < len; i++) {\n            const rng = ranges[i];\n            if (rng.toLineNumber < startLineNumber || rng.fromLineNumber > endLineNumber) {\n                // range outside viewport\n                continue;\n            }\n            const from = Math.max(startLineNumber, rng.fromLineNumber);\n            const to = Math.min(endLineNumber, rng.toLineNumber);\n            for (let lineNumber = from; lineNumber <= to; lineNumber++) {\n                const lineIndex = lineNumber - this._rendLineNumberStart;\n                this._lines[lineIndex].onTokensChanged();\n                notifiedSomeone = true;\n            }\n        }\n        return notifiedSomeone;\n    }\n}\nexport class VisibleLinesCollection {\n    constructor(_lineFactory) {\n        this._lineFactory = _lineFactory;\n        this.domNode = this._createDomNode();\n        this._linesCollection = new RenderedLinesCollection(this._lineFactory);\n    }\n    _createDomNode() {\n        const domNode = createFastDomNode(document.createElement('div'));\n        domNode.setClassName('view-layer');\n        domNode.setPosition('absolute');\n        domNode.domNode.setAttribute('role', 'presentation');\n        domNode.domNode.setAttribute('aria-hidden', 'true');\n        return domNode;\n    }\n    // ---- begin view event handlers\n    onConfigurationChanged(e) {\n        if (e.hasChanged(146 /* EditorOption.layoutInfo */)) {\n            return true;\n        }\n        return false;\n    }\n    onFlushed(e) {\n        this._linesCollection.flush();\n        // No need to clear the dom node because a full .innerHTML will occur in ViewLayerRenderer._render\n        return true;\n    }\n    onLinesChanged(e) {\n        return this._linesCollection.onLinesChanged(e.fromLineNumber, e.count);\n    }\n    onLinesDeleted(e) {\n        const deleted = this._linesCollection.onLinesDeleted(e.fromLineNumber, e.toLineNumber);\n        if (deleted) {\n            // Remove from DOM\n            for (let i = 0, len = deleted.length; i < len; i++) {\n                const lineDomNode = deleted[i].getDomNode();\n                lineDomNode?.remove();\n            }\n        }\n        return true;\n    }\n    onLinesInserted(e) {\n        const deleted = this._linesCollection.onLinesInserted(e.fromLineNumber, e.toLineNumber);\n        if (deleted) {\n            // Remove from DOM\n            for (let i = 0, len = deleted.length; i < len; i++) {\n                const lineDomNode = deleted[i].getDomNode();\n                lineDomNode?.remove();\n            }\n        }\n        return true;\n    }\n    onScrollChanged(e) {\n        return e.scrollTopChanged;\n    }\n    onTokensChanged(e) {\n        return this._linesCollection.onTokensChanged(e.ranges);\n    }\n    onZonesChanged(e) {\n        return true;\n    }\n    // ---- end view event handlers\n    getStartLineNumber() {\n        return this._linesCollection.getStartLineNumber();\n    }\n    getEndLineNumber() {\n        return this._linesCollection.getEndLineNumber();\n    }\n    getVisibleLine(lineNumber) {\n        return this._linesCollection.getLine(lineNumber);\n    }\n    renderLines(viewportData) {\n        const inp = this._linesCollection._get();\n        const renderer = new ViewLayerRenderer(this.domNode.domNode, this._lineFactory, viewportData);\n        const ctx = {\n            rendLineNumberStart: inp.rendLineNumberStart,\n            lines: inp.lines,\n            linesLength: inp.lines.length\n        };\n        // Decide if this render will do a single update (single large .innerHTML) or many updates (inserting/removing dom nodes)\n        const resCtx = renderer.render(ctx, viewportData.startLineNumber, viewportData.endLineNumber, viewportData.relativeVerticalOffset);\n        this._linesCollection._set(resCtx.rendLineNumberStart, resCtx.lines);\n    }\n}\nclass ViewLayerRenderer {\n    static { this._ttPolicy = createTrustedTypesPolicy('editorViewLayer', { createHTML: value => value }); }\n    constructor(_domNode, _lineFactory, _viewportData) {\n        this._domNode = _domNode;\n        this._lineFactory = _lineFactory;\n        this._viewportData = _viewportData;\n    }\n    render(inContext, startLineNumber, stopLineNumber, deltaTop) {\n        const ctx = {\n            rendLineNumberStart: inContext.rendLineNumberStart,\n            lines: inContext.lines.slice(0),\n            linesLength: inContext.linesLength\n        };\n        if ((ctx.rendLineNumberStart + ctx.linesLength - 1 < startLineNumber) || (stopLineNumber < ctx.rendLineNumberStart)) {\n            // There is no overlap whatsoever\n            ctx.rendLineNumberStart = startLineNumber;\n            ctx.linesLength = stopLineNumber - startLineNumber + 1;\n            ctx.lines = [];\n            for (let x = startLineNumber; x <= stopLineNumber; x++) {\n                ctx.lines[x - startLineNumber] = this._lineFactory.createLine();\n            }\n            this._finishRendering(ctx, true, deltaTop);\n            return ctx;\n        }\n        // Update lines which will remain untouched\n        this._renderUntouchedLines(ctx, Math.max(startLineNumber - ctx.rendLineNumberStart, 0), Math.min(stopLineNumber - ctx.rendLineNumberStart, ctx.linesLength - 1), deltaTop, startLineNumber);\n        if (ctx.rendLineNumberStart > startLineNumber) {\n            // Insert lines before\n            const fromLineNumber = startLineNumber;\n            const toLineNumber = Math.min(stopLineNumber, ctx.rendLineNumberStart - 1);\n            if (fromLineNumber <= toLineNumber) {\n                this._insertLinesBefore(ctx, fromLineNumber, toLineNumber, deltaTop, startLineNumber);\n                ctx.linesLength += toLineNumber - fromLineNumber + 1;\n            }\n        }\n        else if (ctx.rendLineNumberStart < startLineNumber) {\n            // Remove lines before\n            const removeCnt = Math.min(ctx.linesLength, startLineNumber - ctx.rendLineNumberStart);\n            if (removeCnt > 0) {\n                this._removeLinesBefore(ctx, removeCnt);\n                ctx.linesLength -= removeCnt;\n            }\n        }\n        ctx.rendLineNumberStart = startLineNumber;\n        if (ctx.rendLineNumberStart + ctx.linesLength - 1 < stopLineNumber) {\n            // Insert lines after\n            const fromLineNumber = ctx.rendLineNumberStart + ctx.linesLength;\n            const toLineNumber = stopLineNumber;\n            if (fromLineNumber <= toLineNumber) {\n                this._insertLinesAfter(ctx, fromLineNumber, toLineNumber, deltaTop, startLineNumber);\n                ctx.linesLength += toLineNumber - fromLineNumber + 1;\n            }\n        }\n        else if (ctx.rendLineNumberStart + ctx.linesLength - 1 > stopLineNumber) {\n            // Remove lines after\n            const fromLineNumber = Math.max(0, stopLineNumber - ctx.rendLineNumberStart + 1);\n            const toLineNumber = ctx.linesLength - 1;\n            const removeCnt = toLineNumber - fromLineNumber + 1;\n            if (removeCnt > 0) {\n                this._removeLinesAfter(ctx, removeCnt);\n                ctx.linesLength -= removeCnt;\n            }\n        }\n        this._finishRendering(ctx, false, deltaTop);\n        return ctx;\n    }\n    _renderUntouchedLines(ctx, startIndex, endIndex, deltaTop, deltaLN) {\n        const rendLineNumberStart = ctx.rendLineNumberStart;\n        const lines = ctx.lines;\n        for (let i = startIndex; i <= endIndex; i++) {\n            const lineNumber = rendLineNumberStart + i;\n            lines[i].layoutLine(lineNumber, deltaTop[lineNumber - deltaLN], this._viewportData.lineHeight);\n        }\n    }\n    _insertLinesBefore(ctx, fromLineNumber, toLineNumber, deltaTop, deltaLN) {\n        const newLines = [];\n        let newLinesLen = 0;\n        for (let lineNumber = fromLineNumber; lineNumber <= toLineNumber; lineNumber++) {\n            newLines[newLinesLen++] = this._lineFactory.createLine();\n        }\n        ctx.lines = newLines.concat(ctx.lines);\n    }\n    _removeLinesBefore(ctx, removeCount) {\n        for (let i = 0; i < removeCount; i++) {\n            const lineDomNode = ctx.lines[i].getDomNode();\n            lineDomNode?.remove();\n        }\n        ctx.lines.splice(0, removeCount);\n    }\n    _insertLinesAfter(ctx, fromLineNumber, toLineNumber, deltaTop, deltaLN) {\n        const newLines = [];\n        let newLinesLen = 0;\n        for (let lineNumber = fromLineNumber; lineNumber <= toLineNumber; lineNumber++) {\n            newLines[newLinesLen++] = this._lineFactory.createLine();\n        }\n        ctx.lines = ctx.lines.concat(newLines);\n    }\n    _removeLinesAfter(ctx, removeCount) {\n        const removeIndex = ctx.linesLength - removeCount;\n        for (let i = 0; i < removeCount; i++) {\n            const lineDomNode = ctx.lines[removeIndex + i].getDomNode();\n            lineDomNode?.remove();\n        }\n        ctx.lines.splice(removeIndex, removeCount);\n    }\n    _finishRenderingNewLines(ctx, domNodeIsEmpty, newLinesHTML, wasNew) {\n        if (ViewLayerRenderer._ttPolicy) {\n            newLinesHTML = ViewLayerRenderer._ttPolicy.createHTML(newLinesHTML);\n        }\n        const lastChild = this._domNode.lastChild;\n        if (domNodeIsEmpty || !lastChild) {\n            this._domNode.innerHTML = newLinesHTML; // explains the ugly casts -> https://github.com/microsoft/vscode/issues/106396#issuecomment-692625393;\n        }\n        else {\n            lastChild.insertAdjacentHTML('afterend', newLinesHTML);\n        }\n        let currChild = this._domNode.lastChild;\n        for (let i = ctx.linesLength - 1; i >= 0; i--) {\n            const line = ctx.lines[i];\n            if (wasNew[i]) {\n                line.setDomNode(currChild);\n                currChild = currChild.previousSibling;\n            }\n        }\n    }\n    _finishRenderingInvalidLines(ctx, invalidLinesHTML, wasInvalid) {\n        const hugeDomNode = document.createElement('div');\n        if (ViewLayerRenderer._ttPolicy) {\n            invalidLinesHTML = ViewLayerRenderer._ttPolicy.createHTML(invalidLinesHTML);\n        }\n        hugeDomNode.innerHTML = invalidLinesHTML;\n        for (let i = 0; i < ctx.linesLength; i++) {\n            const line = ctx.lines[i];\n            if (wasInvalid[i]) {\n                const source = hugeDomNode.firstChild;\n                const lineDomNode = line.getDomNode();\n                lineDomNode.parentNode.replaceChild(source, lineDomNode);\n                line.setDomNode(source);\n            }\n        }\n    }\n    static { this._sb = new StringBuilder(100000); }\n    _finishRendering(ctx, domNodeIsEmpty, deltaTop) {\n        const sb = ViewLayerRenderer._sb;\n        const linesLength = ctx.linesLength;\n        const lines = ctx.lines;\n        const rendLineNumberStart = ctx.rendLineNumberStart;\n        const wasNew = [];\n        {\n            sb.reset();\n            let hadNewLine = false;\n            for (let i = 0; i < linesLength; i++) {\n                const line = lines[i];\n                wasNew[i] = false;\n                const lineDomNode = line.getDomNode();\n                if (lineDomNode) {\n                    // line is not new\n                    continue;\n                }\n                const renderResult = line.renderLine(i + rendLineNumberStart, deltaTop[i], this._viewportData.lineHeight, this._viewportData, sb);\n                if (!renderResult) {\n                    // line does not need rendering\n                    continue;\n                }\n                wasNew[i] = true;\n                hadNewLine = true;\n            }\n            if (hadNewLine) {\n                this._finishRenderingNewLines(ctx, domNodeIsEmpty, sb.build(), wasNew);\n            }\n        }\n        {\n            sb.reset();\n            let hadInvalidLine = false;\n            const wasInvalid = [];\n            for (let i = 0; i < linesLength; i++) {\n                const line = lines[i];\n                wasInvalid[i] = false;\n                if (wasNew[i]) {\n                    // line was new\n                    continue;\n                }\n                const renderResult = line.renderLine(i + rendLineNumberStart, deltaTop[i], this._viewportData.lineHeight, this._viewportData, sb);\n                if (!renderResult) {\n                    // line does not need rendering\n                    continue;\n                }\n                wasInvalid[i] = true;\n                hadInvalidLine = true;\n            }\n            if (hadInvalidLine) {\n                this._finishRenderingInvalidLines(ctx, sb.build(), wasInvalid);\n            }\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}