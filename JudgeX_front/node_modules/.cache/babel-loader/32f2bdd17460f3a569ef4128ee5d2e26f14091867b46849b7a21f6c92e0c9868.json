{"ast":null,"code":"var _FormattingConflicts;\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.iterator.some.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { asArray, isNonEmptyArray } from '../../../../base/common/arrays.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { LinkedList } from '../../../../base/common/linkedList.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { EditorStateCancellationTokenSource, TextModelCancellationTokenSource } from '../../editorState/browser/editorState.js';\nimport { isCodeEditor } from '../../../browser/editorBrowser.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { IEditorWorkerService } from '../../../common/services/editorWorker.js';\nimport { ITextModelService } from '../../../common/services/resolverService.js';\nimport { FormattingEdit } from './formattingEdit.js';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { ExtensionIdentifierSet } from '../../../../platform/extensions/common/extensions.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { AccessibilitySignal, IAccessibilitySignalService } from '../../../../platform/accessibilitySignal/browser/accessibilitySignalService.js';\nexport function getRealAndSyntheticDocumentFormattersOrdered(documentFormattingEditProvider, documentRangeFormattingEditProvider, model) {\n  const result = [];\n  const seen = new ExtensionIdentifierSet();\n  // (1) add all document formatter\n  const docFormatter = documentFormattingEditProvider.ordered(model);\n  for (const formatter of docFormatter) {\n    result.push(formatter);\n    if (formatter.extensionId) {\n      seen.add(formatter.extensionId);\n    }\n  }\n  // (2) add all range formatter as document formatter (unless the same extension already did that)\n  const rangeFormatter = documentRangeFormattingEditProvider.ordered(model);\n  for (const formatter of rangeFormatter) {\n    if (formatter.extensionId) {\n      if (seen.has(formatter.extensionId)) {\n        continue;\n      }\n      seen.add(formatter.extensionId);\n    }\n    result.push({\n      displayName: formatter.displayName,\n      extensionId: formatter.extensionId,\n      provideDocumentFormattingEdits(model, options, token) {\n        return formatter.provideDocumentRangeFormattingEdits(model, model.getFullModelRange(), options, token);\n      }\n    });\n  }\n  return result;\n}\nexport class FormattingConflicts {\n  static setFormatterSelector(selector) {\n    const remove = FormattingConflicts._selectors.unshift(selector);\n    return {\n      dispose: remove\n    };\n  }\n  static async select(formatter, document, mode, kind) {\n    if (formatter.length === 0) {\n      return undefined;\n    }\n    const selector = Iterable.first(FormattingConflicts._selectors);\n    if (selector) {\n      return await selector(formatter, document, mode, kind);\n    }\n    return undefined;\n  }\n}\n_FormattingConflicts = FormattingConflicts;\n_FormattingConflicts._selectors = new LinkedList();\nexport async function formatDocumentRangesWithSelectedProvider(accessor, editorOrModel, rangeOrRanges, mode, progress, token, userGesture) {\n  const instaService = accessor.get(IInstantiationService);\n  const {\n    documentRangeFormattingEditProvider: documentRangeFormattingEditProviderRegistry\n  } = accessor.get(ILanguageFeaturesService);\n  const model = isCodeEditor(editorOrModel) ? editorOrModel.getModel() : editorOrModel;\n  const provider = documentRangeFormattingEditProviderRegistry.ordered(model);\n  const selected = await FormattingConflicts.select(provider, model, mode, 2 /* FormattingKind.Selection */);\n  if (selected) {\n    progress.report(selected);\n    await instaService.invokeFunction(formatDocumentRangesWithProvider, selected, editorOrModel, rangeOrRanges, token, userGesture);\n  }\n}\nexport async function formatDocumentRangesWithProvider(accessor, provider, editorOrModel, rangeOrRanges, token, userGesture) {\n  const workerService = accessor.get(IEditorWorkerService);\n  const logService = accessor.get(ILogService);\n  const accessibilitySignalService = accessor.get(IAccessibilitySignalService);\n  let model;\n  let cts;\n  if (isCodeEditor(editorOrModel)) {\n    model = editorOrModel.getModel();\n    cts = new EditorStateCancellationTokenSource(editorOrModel, 1 /* CodeEditorStateFlag.Value */ | 4 /* CodeEditorStateFlag.Position */, undefined, token);\n  } else {\n    model = editorOrModel;\n    cts = new TextModelCancellationTokenSource(editorOrModel, token);\n  }\n  // make sure that ranges don't overlap nor touch each other\n  const ranges = [];\n  let len = 0;\n  for (const range of asArray(rangeOrRanges).sort(Range.compareRangesUsingStarts)) {\n    if (len > 0 && Range.areIntersectingOrTouching(ranges[len - 1], range)) {\n      ranges[len - 1] = Range.fromPositions(ranges[len - 1].getStartPosition(), range.getEndPosition());\n    } else {\n      len = ranges.push(range);\n    }\n  }\n  const computeEdits = async range => {\n    logService.trace(`[format][provideDocumentRangeFormattingEdits] (request)`, provider.extensionId?.value, range);\n    const result = (await provider.provideDocumentRangeFormattingEdits(model, range, model.getFormattingOptions(), cts.token)) || [];\n    logService.trace(`[format][provideDocumentRangeFormattingEdits] (response)`, provider.extensionId?.value, result);\n    return result;\n  };\n  const hasIntersectingEdit = (a, b) => {\n    if (!a.length || !b.length) {\n      return false;\n    }\n    // quick exit if the list of ranges are completely unrelated [O(n)]\n    const mergedA = a.reduce((acc, val) => {\n      return Range.plusRange(acc, val.range);\n    }, a[0].range);\n    if (!b.some(x => {\n      return Range.intersectRanges(mergedA, x.range);\n    })) {\n      return false;\n    }\n    // fallback to a complete check [O(n^2)]\n    for (const edit of a) {\n      for (const otherEdit of b) {\n        if (Range.intersectRanges(edit.range, otherEdit.range)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n  const allEdits = [];\n  const rawEditsList = [];\n  try {\n    if (typeof provider.provideDocumentRangesFormattingEdits === 'function') {\n      logService.trace(`[format][provideDocumentRangeFormattingEdits] (request)`, provider.extensionId?.value, ranges);\n      const result = (await provider.provideDocumentRangesFormattingEdits(model, ranges, model.getFormattingOptions(), cts.token)) || [];\n      logService.trace(`[format][provideDocumentRangeFormattingEdits] (response)`, provider.extensionId?.value, result);\n      rawEditsList.push(result);\n    } else {\n      for (const range of ranges) {\n        if (cts.token.isCancellationRequested) {\n          return true;\n        }\n        rawEditsList.push(await computeEdits(range));\n      }\n      for (let i = 0; i < ranges.length; ++i) {\n        for (let j = i + 1; j < ranges.length; ++j) {\n          if (cts.token.isCancellationRequested) {\n            return true;\n          }\n          if (hasIntersectingEdit(rawEditsList[i], rawEditsList[j])) {\n            // Merge ranges i and j into a single range, recompute the associated edits\n            const mergedRange = Range.plusRange(ranges[i], ranges[j]);\n            const edits = await computeEdits(mergedRange);\n            ranges.splice(j, 1);\n            ranges.splice(i, 1);\n            ranges.push(mergedRange);\n            rawEditsList.splice(j, 1);\n            rawEditsList.splice(i, 1);\n            rawEditsList.push(edits);\n            // Restart scanning\n            i = 0;\n            j = 0;\n          }\n        }\n      }\n    }\n    for (const rawEdits of rawEditsList) {\n      if (cts.token.isCancellationRequested) {\n        return true;\n      }\n      const minimalEdits = await workerService.computeMoreMinimalEdits(model.uri, rawEdits);\n      if (minimalEdits) {\n        allEdits.push(...minimalEdits);\n      }\n    }\n  } finally {\n    cts.dispose();\n  }\n  if (allEdits.length === 0) {\n    return false;\n  }\n  if (isCodeEditor(editorOrModel)) {\n    // use editor to apply edits\n    FormattingEdit.execute(editorOrModel, allEdits, true);\n    editorOrModel.revealPositionInCenterIfOutsideViewport(editorOrModel.getPosition(), 1 /* ScrollType.Immediate */);\n  } else {\n    // use model to apply edits\n    const [{\n      range\n    }] = allEdits;\n    const initialSelection = new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n    model.pushEditOperations([initialSelection], allEdits.map(edit => {\n      return {\n        text: edit.text,\n        range: Range.lift(edit.range),\n        forceMoveMarkers: true\n      };\n    }), undoEdits => {\n      for (const {\n        range\n      } of undoEdits) {\n        if (Range.areIntersectingOrTouching(range, initialSelection)) {\n          return [new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn)];\n        }\n      }\n      return null;\n    });\n  }\n  accessibilitySignalService.playSignal(AccessibilitySignal.format, {\n    userGesture\n  });\n  return true;\n}\nexport async function formatDocumentWithSelectedProvider(accessor, editorOrModel, mode, progress, token, userGesture) {\n  const instaService = accessor.get(IInstantiationService);\n  const languageFeaturesService = accessor.get(ILanguageFeaturesService);\n  const model = isCodeEditor(editorOrModel) ? editorOrModel.getModel() : editorOrModel;\n  const provider = getRealAndSyntheticDocumentFormattersOrdered(languageFeaturesService.documentFormattingEditProvider, languageFeaturesService.documentRangeFormattingEditProvider, model);\n  const selected = await FormattingConflicts.select(provider, model, mode, 1 /* FormattingKind.File */);\n  if (selected) {\n    progress.report(selected);\n    await instaService.invokeFunction(formatDocumentWithProvider, selected, editorOrModel, mode, token, userGesture);\n  }\n}\nexport async function formatDocumentWithProvider(accessor, provider, editorOrModel, mode, token, userGesture) {\n  const workerService = accessor.get(IEditorWorkerService);\n  const accessibilitySignalService = accessor.get(IAccessibilitySignalService);\n  let model;\n  let cts;\n  if (isCodeEditor(editorOrModel)) {\n    model = editorOrModel.getModel();\n    cts = new EditorStateCancellationTokenSource(editorOrModel, 1 /* CodeEditorStateFlag.Value */ | 4 /* CodeEditorStateFlag.Position */, undefined, token);\n  } else {\n    model = editorOrModel;\n    cts = new TextModelCancellationTokenSource(editorOrModel, token);\n  }\n  let edits;\n  try {\n    const rawEdits = await provider.provideDocumentFormattingEdits(model, model.getFormattingOptions(), cts.token);\n    edits = await workerService.computeMoreMinimalEdits(model.uri, rawEdits);\n    if (cts.token.isCancellationRequested) {\n      return true;\n    }\n  } finally {\n    cts.dispose();\n  }\n  if (!edits || edits.length === 0) {\n    return false;\n  }\n  if (isCodeEditor(editorOrModel)) {\n    // use editor to apply edits\n    FormattingEdit.execute(editorOrModel, edits, mode !== 2 /* FormattingMode.Silent */);\n    if (mode !== 2 /* FormattingMode.Silent */) {\n      editorOrModel.revealPositionInCenterIfOutsideViewport(editorOrModel.getPosition(), 1 /* ScrollType.Immediate */);\n    }\n  } else {\n    // use model to apply edits\n    const [{\n      range\n    }] = edits;\n    const initialSelection = new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n    model.pushEditOperations([initialSelection], edits.map(edit => {\n      return {\n        text: edit.text,\n        range: Range.lift(edit.range),\n        forceMoveMarkers: true\n      };\n    }), undoEdits => {\n      for (const {\n        range\n      } of undoEdits) {\n        if (Range.areIntersectingOrTouching(range, initialSelection)) {\n          return [new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn)];\n        }\n      }\n      return null;\n    });\n  }\n  accessibilitySignalService.playSignal(AccessibilitySignal.format, {\n    userGesture\n  });\n  return true;\n}\nexport async function getDocumentRangeFormattingEditsUntilResult(workerService, languageFeaturesService, model, range, options, token) {\n  const providers = languageFeaturesService.documentRangeFormattingEditProvider.ordered(model);\n  for (const provider of providers) {\n    const rawEdits = await Promise.resolve(provider.provideDocumentRangeFormattingEdits(model, range, options, token)).catch(onUnexpectedExternalError);\n    if (isNonEmptyArray(rawEdits)) {\n      return await workerService.computeMoreMinimalEdits(model.uri, rawEdits);\n    }\n  }\n  return undefined;\n}\nexport async function getDocumentFormattingEditsUntilResult(workerService, languageFeaturesService, model, options, token) {\n  const providers = getRealAndSyntheticDocumentFormattersOrdered(languageFeaturesService.documentFormattingEditProvider, languageFeaturesService.documentRangeFormattingEditProvider, model);\n  for (const provider of providers) {\n    const rawEdits = await Promise.resolve(provider.provideDocumentFormattingEdits(model, options, token)).catch(onUnexpectedExternalError);\n    if (isNonEmptyArray(rawEdits)) {\n      return await workerService.computeMoreMinimalEdits(model.uri, rawEdits);\n    }\n  }\n  return undefined;\n}\nexport function getOnTypeFormattingEdits(workerService, languageFeaturesService, model, position, ch, options, token) {\n  const providers = languageFeaturesService.onTypeFormattingEditProvider.ordered(model);\n  if (providers.length === 0) {\n    return Promise.resolve(undefined);\n  }\n  if (providers[0].autoFormatTriggerCharacters.indexOf(ch) < 0) {\n    return Promise.resolve(undefined);\n  }\n  return Promise.resolve(providers[0].provideOnTypeFormattingEdits(model, position, ch, options, token)).catch(onUnexpectedExternalError).then(edits => {\n    return workerService.computeMoreMinimalEdits(model.uri, edits);\n  });\n}\nCommandsRegistry.registerCommand('_executeFormatRangeProvider', async function (accessor, ...args) {\n  const [resource, range, options] = args;\n  assertType(URI.isUri(resource));\n  assertType(Range.isIRange(range));\n  const resolverService = accessor.get(ITextModelService);\n  const workerService = accessor.get(IEditorWorkerService);\n  const languageFeaturesService = accessor.get(ILanguageFeaturesService);\n  const reference = await resolverService.createModelReference(resource);\n  try {\n    return getDocumentRangeFormattingEditsUntilResult(workerService, languageFeaturesService, reference.object.textEditorModel, Range.lift(range), options, CancellationToken.None);\n  } finally {\n    reference.dispose();\n  }\n});\nCommandsRegistry.registerCommand('_executeFormatDocumentProvider', async function (accessor, ...args) {\n  const [resource, options] = args;\n  assertType(URI.isUri(resource));\n  const resolverService = accessor.get(ITextModelService);\n  const workerService = accessor.get(IEditorWorkerService);\n  const languageFeaturesService = accessor.get(ILanguageFeaturesService);\n  const reference = await resolverService.createModelReference(resource);\n  try {\n    return getDocumentFormattingEditsUntilResult(workerService, languageFeaturesService, reference.object.textEditorModel, options, CancellationToken.None);\n  } finally {\n    reference.dispose();\n  }\n});\nCommandsRegistry.registerCommand('_executeFormatOnTypeProvider', async function (accessor, ...args) {\n  const [resource, position, ch, options] = args;\n  assertType(URI.isUri(resource));\n  assertType(Position.isIPosition(position));\n  assertType(typeof ch === 'string');\n  const resolverService = accessor.get(ITextModelService);\n  const workerService = accessor.get(IEditorWorkerService);\n  const languageFeaturesService = accessor.get(ILanguageFeaturesService);\n  const reference = await resolverService.createModelReference(resource);\n  try {\n    return getOnTypeFormattingEdits(workerService, languageFeaturesService, reference.object.textEditorModel, Position.lift(position), ch, options, CancellationToken.None);\n  } finally {\n    reference.dispose();\n  }\n});","map":{"version":3,"names":["asArray","isNonEmptyArray","CancellationToken","onUnexpectedExternalError","Iterable","LinkedList","assertType","URI","EditorStateCancellationTokenSource","TextModelCancellationTokenSource","isCodeEditor","Position","Range","Selection","IEditorWorkerService","ITextModelService","FormattingEdit","CommandsRegistry","ExtensionIdentifierSet","IInstantiationService","ILanguageFeaturesService","ILogService","AccessibilitySignal","IAccessibilitySignalService","getRealAndSyntheticDocumentFormattersOrdered","documentFormattingEditProvider","documentRangeFormattingEditProvider","model","result","seen","docFormatter","ordered","formatter","push","extensionId","add","rangeFormatter","has","displayName","provideDocumentFormattingEdits","options","token","provideDocumentRangeFormattingEdits","getFullModelRange","FormattingConflicts","setFormatterSelector","selector","remove","_selectors","unshift","dispose","select","document","mode","kind","length","undefined","first","_FormattingConflicts","formatDocumentRangesWithSelectedProvider","accessor","editorOrModel","rangeOrRanges","progress","userGesture","instaService","get","documentRangeFormattingEditProviderRegistry","getModel","provider","selected","report","invokeFunction","formatDocumentRangesWithProvider","workerService","logService","accessibilitySignalService","cts","ranges","len","range","sort","compareRangesUsingStarts","areIntersectingOrTouching","fromPositions","getStartPosition","getEndPosition","computeEdits","trace","value","getFormattingOptions","hasIntersectingEdit","a","b","mergedA","reduce","acc","val","plusRange","some","x","intersectRanges","edit","otherEdit","allEdits","rawEditsList","provideDocumentRangesFormattingEdits","isCancellationRequested","i","j","mergedRange","edits","splice","rawEdits","minimalEdits","computeMoreMinimalEdits","uri","execute","revealPositionInCenterIfOutsideViewport","getPosition","initialSelection","startLineNumber","startColumn","endLineNumber","endColumn","pushEditOperations","map","text","lift","forceMoveMarkers","undoEdits","playSignal","format","formatDocumentWithSelectedProvider","languageFeaturesService","formatDocumentWithProvider","getDocumentRangeFormattingEditsUntilResult","providers","Promise","resolve","catch","getDocumentFormattingEditsUntilResult","getOnTypeFormattingEdits","position","ch","onTypeFormattingEditProvider","autoFormatTriggerCharacters","indexOf","provideOnTypeFormattingEdits","then","registerCommand","args","resource","isUri","isIRange","resolverService","reference","createModelReference","object","textEditorModel","None","isIPosition"],"sources":["P:/IDEA/JudgeX/JudgeX_front/node_modules/monaco-editor/esm/vs/editor/contrib/format/browser/format.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { asArray, isNonEmptyArray } from '../../../../base/common/arrays.js';\nimport { CancellationToken } from '../../../../base/common/cancellation.js';\nimport { onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { Iterable } from '../../../../base/common/iterator.js';\nimport { LinkedList } from '../../../../base/common/linkedList.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { URI } from '../../../../base/common/uri.js';\nimport { EditorStateCancellationTokenSource, TextModelCancellationTokenSource } from '../../editorState/browser/editorState.js';\nimport { isCodeEditor } from '../../../browser/editorBrowser.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Selection } from '../../../common/core/selection.js';\nimport { IEditorWorkerService } from '../../../common/services/editorWorker.js';\nimport { ITextModelService } from '../../../common/services/resolverService.js';\nimport { FormattingEdit } from './formattingEdit.js';\nimport { CommandsRegistry } from '../../../../platform/commands/common/commands.js';\nimport { ExtensionIdentifierSet } from '../../../../platform/extensions/common/extensions.js';\nimport { IInstantiationService } from '../../../../platform/instantiation/common/instantiation.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { AccessibilitySignal, IAccessibilitySignalService } from '../../../../platform/accessibilitySignal/browser/accessibilitySignalService.js';\nexport function getRealAndSyntheticDocumentFormattersOrdered(documentFormattingEditProvider, documentRangeFormattingEditProvider, model) {\n    const result = [];\n    const seen = new ExtensionIdentifierSet();\n    // (1) add all document formatter\n    const docFormatter = documentFormattingEditProvider.ordered(model);\n    for (const formatter of docFormatter) {\n        result.push(formatter);\n        if (formatter.extensionId) {\n            seen.add(formatter.extensionId);\n        }\n    }\n    // (2) add all range formatter as document formatter (unless the same extension already did that)\n    const rangeFormatter = documentRangeFormattingEditProvider.ordered(model);\n    for (const formatter of rangeFormatter) {\n        if (formatter.extensionId) {\n            if (seen.has(formatter.extensionId)) {\n                continue;\n            }\n            seen.add(formatter.extensionId);\n        }\n        result.push({\n            displayName: formatter.displayName,\n            extensionId: formatter.extensionId,\n            provideDocumentFormattingEdits(model, options, token) {\n                return formatter.provideDocumentRangeFormattingEdits(model, model.getFullModelRange(), options, token);\n            }\n        });\n    }\n    return result;\n}\nexport class FormattingConflicts {\n    static { this._selectors = new LinkedList(); }\n    static setFormatterSelector(selector) {\n        const remove = FormattingConflicts._selectors.unshift(selector);\n        return { dispose: remove };\n    }\n    static async select(formatter, document, mode, kind) {\n        if (formatter.length === 0) {\n            return undefined;\n        }\n        const selector = Iterable.first(FormattingConflicts._selectors);\n        if (selector) {\n            return await selector(formatter, document, mode, kind);\n        }\n        return undefined;\n    }\n}\nexport async function formatDocumentRangesWithSelectedProvider(accessor, editorOrModel, rangeOrRanges, mode, progress, token, userGesture) {\n    const instaService = accessor.get(IInstantiationService);\n    const { documentRangeFormattingEditProvider: documentRangeFormattingEditProviderRegistry } = accessor.get(ILanguageFeaturesService);\n    const model = isCodeEditor(editorOrModel) ? editorOrModel.getModel() : editorOrModel;\n    const provider = documentRangeFormattingEditProviderRegistry.ordered(model);\n    const selected = await FormattingConflicts.select(provider, model, mode, 2 /* FormattingKind.Selection */);\n    if (selected) {\n        progress.report(selected);\n        await instaService.invokeFunction(formatDocumentRangesWithProvider, selected, editorOrModel, rangeOrRanges, token, userGesture);\n    }\n}\nexport async function formatDocumentRangesWithProvider(accessor, provider, editorOrModel, rangeOrRanges, token, userGesture) {\n    const workerService = accessor.get(IEditorWorkerService);\n    const logService = accessor.get(ILogService);\n    const accessibilitySignalService = accessor.get(IAccessibilitySignalService);\n    let model;\n    let cts;\n    if (isCodeEditor(editorOrModel)) {\n        model = editorOrModel.getModel();\n        cts = new EditorStateCancellationTokenSource(editorOrModel, 1 /* CodeEditorStateFlag.Value */ | 4 /* CodeEditorStateFlag.Position */, undefined, token);\n    }\n    else {\n        model = editorOrModel;\n        cts = new TextModelCancellationTokenSource(editorOrModel, token);\n    }\n    // make sure that ranges don't overlap nor touch each other\n    const ranges = [];\n    let len = 0;\n    for (const range of asArray(rangeOrRanges).sort(Range.compareRangesUsingStarts)) {\n        if (len > 0 && Range.areIntersectingOrTouching(ranges[len - 1], range)) {\n            ranges[len - 1] = Range.fromPositions(ranges[len - 1].getStartPosition(), range.getEndPosition());\n        }\n        else {\n            len = ranges.push(range);\n        }\n    }\n    const computeEdits = async (range) => {\n        logService.trace(`[format][provideDocumentRangeFormattingEdits] (request)`, provider.extensionId?.value, range);\n        const result = (await provider.provideDocumentRangeFormattingEdits(model, range, model.getFormattingOptions(), cts.token)) || [];\n        logService.trace(`[format][provideDocumentRangeFormattingEdits] (response)`, provider.extensionId?.value, result);\n        return result;\n    };\n    const hasIntersectingEdit = (a, b) => {\n        if (!a.length || !b.length) {\n            return false;\n        }\n        // quick exit if the list of ranges are completely unrelated [O(n)]\n        const mergedA = a.reduce((acc, val) => { return Range.plusRange(acc, val.range); }, a[0].range);\n        if (!b.some(x => { return Range.intersectRanges(mergedA, x.range); })) {\n            return false;\n        }\n        // fallback to a complete check [O(n^2)]\n        for (const edit of a) {\n            for (const otherEdit of b) {\n                if (Range.intersectRanges(edit.range, otherEdit.range)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\n    const allEdits = [];\n    const rawEditsList = [];\n    try {\n        if (typeof provider.provideDocumentRangesFormattingEdits === 'function') {\n            logService.trace(`[format][provideDocumentRangeFormattingEdits] (request)`, provider.extensionId?.value, ranges);\n            const result = (await provider.provideDocumentRangesFormattingEdits(model, ranges, model.getFormattingOptions(), cts.token)) || [];\n            logService.trace(`[format][provideDocumentRangeFormattingEdits] (response)`, provider.extensionId?.value, result);\n            rawEditsList.push(result);\n        }\n        else {\n            for (const range of ranges) {\n                if (cts.token.isCancellationRequested) {\n                    return true;\n                }\n                rawEditsList.push(await computeEdits(range));\n            }\n            for (let i = 0; i < ranges.length; ++i) {\n                for (let j = i + 1; j < ranges.length; ++j) {\n                    if (cts.token.isCancellationRequested) {\n                        return true;\n                    }\n                    if (hasIntersectingEdit(rawEditsList[i], rawEditsList[j])) {\n                        // Merge ranges i and j into a single range, recompute the associated edits\n                        const mergedRange = Range.plusRange(ranges[i], ranges[j]);\n                        const edits = await computeEdits(mergedRange);\n                        ranges.splice(j, 1);\n                        ranges.splice(i, 1);\n                        ranges.push(mergedRange);\n                        rawEditsList.splice(j, 1);\n                        rawEditsList.splice(i, 1);\n                        rawEditsList.push(edits);\n                        // Restart scanning\n                        i = 0;\n                        j = 0;\n                    }\n                }\n            }\n        }\n        for (const rawEdits of rawEditsList) {\n            if (cts.token.isCancellationRequested) {\n                return true;\n            }\n            const minimalEdits = await workerService.computeMoreMinimalEdits(model.uri, rawEdits);\n            if (minimalEdits) {\n                allEdits.push(...minimalEdits);\n            }\n        }\n    }\n    finally {\n        cts.dispose();\n    }\n    if (allEdits.length === 0) {\n        return false;\n    }\n    if (isCodeEditor(editorOrModel)) {\n        // use editor to apply edits\n        FormattingEdit.execute(editorOrModel, allEdits, true);\n        editorOrModel.revealPositionInCenterIfOutsideViewport(editorOrModel.getPosition(), 1 /* ScrollType.Immediate */);\n    }\n    else {\n        // use model to apply edits\n        const [{ range }] = allEdits;\n        const initialSelection = new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n        model.pushEditOperations([initialSelection], allEdits.map(edit => {\n            return {\n                text: edit.text,\n                range: Range.lift(edit.range),\n                forceMoveMarkers: true\n            };\n        }), undoEdits => {\n            for (const { range } of undoEdits) {\n                if (Range.areIntersectingOrTouching(range, initialSelection)) {\n                    return [new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn)];\n                }\n            }\n            return null;\n        });\n    }\n    accessibilitySignalService.playSignal(AccessibilitySignal.format, { userGesture });\n    return true;\n}\nexport async function formatDocumentWithSelectedProvider(accessor, editorOrModel, mode, progress, token, userGesture) {\n    const instaService = accessor.get(IInstantiationService);\n    const languageFeaturesService = accessor.get(ILanguageFeaturesService);\n    const model = isCodeEditor(editorOrModel) ? editorOrModel.getModel() : editorOrModel;\n    const provider = getRealAndSyntheticDocumentFormattersOrdered(languageFeaturesService.documentFormattingEditProvider, languageFeaturesService.documentRangeFormattingEditProvider, model);\n    const selected = await FormattingConflicts.select(provider, model, mode, 1 /* FormattingKind.File */);\n    if (selected) {\n        progress.report(selected);\n        await instaService.invokeFunction(formatDocumentWithProvider, selected, editorOrModel, mode, token, userGesture);\n    }\n}\nexport async function formatDocumentWithProvider(accessor, provider, editorOrModel, mode, token, userGesture) {\n    const workerService = accessor.get(IEditorWorkerService);\n    const accessibilitySignalService = accessor.get(IAccessibilitySignalService);\n    let model;\n    let cts;\n    if (isCodeEditor(editorOrModel)) {\n        model = editorOrModel.getModel();\n        cts = new EditorStateCancellationTokenSource(editorOrModel, 1 /* CodeEditorStateFlag.Value */ | 4 /* CodeEditorStateFlag.Position */, undefined, token);\n    }\n    else {\n        model = editorOrModel;\n        cts = new TextModelCancellationTokenSource(editorOrModel, token);\n    }\n    let edits;\n    try {\n        const rawEdits = await provider.provideDocumentFormattingEdits(model, model.getFormattingOptions(), cts.token);\n        edits = await workerService.computeMoreMinimalEdits(model.uri, rawEdits);\n        if (cts.token.isCancellationRequested) {\n            return true;\n        }\n    }\n    finally {\n        cts.dispose();\n    }\n    if (!edits || edits.length === 0) {\n        return false;\n    }\n    if (isCodeEditor(editorOrModel)) {\n        // use editor to apply edits\n        FormattingEdit.execute(editorOrModel, edits, mode !== 2 /* FormattingMode.Silent */);\n        if (mode !== 2 /* FormattingMode.Silent */) {\n            editorOrModel.revealPositionInCenterIfOutsideViewport(editorOrModel.getPosition(), 1 /* ScrollType.Immediate */);\n        }\n    }\n    else {\n        // use model to apply edits\n        const [{ range }] = edits;\n        const initialSelection = new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n        model.pushEditOperations([initialSelection], edits.map(edit => {\n            return {\n                text: edit.text,\n                range: Range.lift(edit.range),\n                forceMoveMarkers: true\n            };\n        }), undoEdits => {\n            for (const { range } of undoEdits) {\n                if (Range.areIntersectingOrTouching(range, initialSelection)) {\n                    return [new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn)];\n                }\n            }\n            return null;\n        });\n    }\n    accessibilitySignalService.playSignal(AccessibilitySignal.format, { userGesture });\n    return true;\n}\nexport async function getDocumentRangeFormattingEditsUntilResult(workerService, languageFeaturesService, model, range, options, token) {\n    const providers = languageFeaturesService.documentRangeFormattingEditProvider.ordered(model);\n    for (const provider of providers) {\n        const rawEdits = await Promise.resolve(provider.provideDocumentRangeFormattingEdits(model, range, options, token)).catch(onUnexpectedExternalError);\n        if (isNonEmptyArray(rawEdits)) {\n            return await workerService.computeMoreMinimalEdits(model.uri, rawEdits);\n        }\n    }\n    return undefined;\n}\nexport async function getDocumentFormattingEditsUntilResult(workerService, languageFeaturesService, model, options, token) {\n    const providers = getRealAndSyntheticDocumentFormattersOrdered(languageFeaturesService.documentFormattingEditProvider, languageFeaturesService.documentRangeFormattingEditProvider, model);\n    for (const provider of providers) {\n        const rawEdits = await Promise.resolve(provider.provideDocumentFormattingEdits(model, options, token)).catch(onUnexpectedExternalError);\n        if (isNonEmptyArray(rawEdits)) {\n            return await workerService.computeMoreMinimalEdits(model.uri, rawEdits);\n        }\n    }\n    return undefined;\n}\nexport function getOnTypeFormattingEdits(workerService, languageFeaturesService, model, position, ch, options, token) {\n    const providers = languageFeaturesService.onTypeFormattingEditProvider.ordered(model);\n    if (providers.length === 0) {\n        return Promise.resolve(undefined);\n    }\n    if (providers[0].autoFormatTriggerCharacters.indexOf(ch) < 0) {\n        return Promise.resolve(undefined);\n    }\n    return Promise.resolve(providers[0].provideOnTypeFormattingEdits(model, position, ch, options, token)).catch(onUnexpectedExternalError).then(edits => {\n        return workerService.computeMoreMinimalEdits(model.uri, edits);\n    });\n}\nCommandsRegistry.registerCommand('_executeFormatRangeProvider', async function (accessor, ...args) {\n    const [resource, range, options] = args;\n    assertType(URI.isUri(resource));\n    assertType(Range.isIRange(range));\n    const resolverService = accessor.get(ITextModelService);\n    const workerService = accessor.get(IEditorWorkerService);\n    const languageFeaturesService = accessor.get(ILanguageFeaturesService);\n    const reference = await resolverService.createModelReference(resource);\n    try {\n        return getDocumentRangeFormattingEditsUntilResult(workerService, languageFeaturesService, reference.object.textEditorModel, Range.lift(range), options, CancellationToken.None);\n    }\n    finally {\n        reference.dispose();\n    }\n});\nCommandsRegistry.registerCommand('_executeFormatDocumentProvider', async function (accessor, ...args) {\n    const [resource, options] = args;\n    assertType(URI.isUri(resource));\n    const resolverService = accessor.get(ITextModelService);\n    const workerService = accessor.get(IEditorWorkerService);\n    const languageFeaturesService = accessor.get(ILanguageFeaturesService);\n    const reference = await resolverService.createModelReference(resource);\n    try {\n        return getDocumentFormattingEditsUntilResult(workerService, languageFeaturesService, reference.object.textEditorModel, options, CancellationToken.None);\n    }\n    finally {\n        reference.dispose();\n    }\n});\nCommandsRegistry.registerCommand('_executeFormatOnTypeProvider', async function (accessor, ...args) {\n    const [resource, position, ch, options] = args;\n    assertType(URI.isUri(resource));\n    assertType(Position.isIPosition(position));\n    assertType(typeof ch === 'string');\n    const resolverService = accessor.get(ITextModelService);\n    const workerService = accessor.get(IEditorWorkerService);\n    const languageFeaturesService = accessor.get(ILanguageFeaturesService);\n    const reference = await resolverService.createModelReference(resource);\n    try {\n        return getOnTypeFormattingEdits(workerService, languageFeaturesService, reference.object.textEditorModel, Position.lift(position), ch, options, CancellationToken.None);\n    }\n    finally {\n        reference.dispose();\n    }\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}