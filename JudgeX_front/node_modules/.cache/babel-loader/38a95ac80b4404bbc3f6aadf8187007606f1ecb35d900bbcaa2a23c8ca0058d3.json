{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { applyFontInfo } from '../config/domFontInfo.js';\nimport { VisibleLinesCollection } from './viewLayer.js';\nimport { ViewPart } from './viewPart.js';\nexport class ViewOverlays extends ViewPart {\n  constructor(context) {\n    super(context);\n    this._dynamicOverlays = [];\n    this._isFocused = false;\n    this._visibleLines = new VisibleLinesCollection({\n      createLine: () => new ViewOverlayLine(this._dynamicOverlays)\n    });\n    this.domNode = this._visibleLines.domNode;\n    const options = this._context.configuration.options;\n    const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n    applyFontInfo(this.domNode, fontInfo);\n    this.domNode.setClassName('view-overlays');\n  }\n  shouldRender() {\n    if (super.shouldRender()) {\n      return true;\n    }\n    for (let i = 0, len = this._dynamicOverlays.length; i < len; i++) {\n      const dynamicOverlay = this._dynamicOverlays[i];\n      if (dynamicOverlay.shouldRender()) {\n        return true;\n      }\n    }\n    return false;\n  }\n  dispose() {\n    super.dispose();\n    for (let i = 0, len = this._dynamicOverlays.length; i < len; i++) {\n      const dynamicOverlay = this._dynamicOverlays[i];\n      dynamicOverlay.dispose();\n    }\n    this._dynamicOverlays = [];\n  }\n  getDomNode() {\n    return this.domNode;\n  }\n  addDynamicOverlay(overlay) {\n    this._dynamicOverlays.push(overlay);\n  }\n  // ----- event handlers\n  onConfigurationChanged(e) {\n    this._visibleLines.onConfigurationChanged(e);\n    const options = this._context.configuration.options;\n    const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n    applyFontInfo(this.domNode, fontInfo);\n    return true;\n  }\n  onFlushed(e) {\n    return this._visibleLines.onFlushed(e);\n  }\n  onFocusChanged(e) {\n    this._isFocused = e.isFocused;\n    return true;\n  }\n  onLinesChanged(e) {\n    return this._visibleLines.onLinesChanged(e);\n  }\n  onLinesDeleted(e) {\n    return this._visibleLines.onLinesDeleted(e);\n  }\n  onLinesInserted(e) {\n    return this._visibleLines.onLinesInserted(e);\n  }\n  onScrollChanged(e) {\n    return this._visibleLines.onScrollChanged(e) || true;\n  }\n  onTokensChanged(e) {\n    return this._visibleLines.onTokensChanged(e);\n  }\n  onZonesChanged(e) {\n    return this._visibleLines.onZonesChanged(e);\n  }\n  // ----- end event handlers\n  prepareRender(ctx) {\n    const toRender = this._dynamicOverlays.filter(overlay => overlay.shouldRender());\n    for (let i = 0, len = toRender.length; i < len; i++) {\n      const dynamicOverlay = toRender[i];\n      dynamicOverlay.prepareRender(ctx);\n      dynamicOverlay.onDidRender();\n    }\n  }\n  render(ctx) {\n    // Overwriting to bypass `shouldRender` flag\n    this._viewOverlaysRender(ctx);\n    this.domNode.toggleClassName('focused', this._isFocused);\n  }\n  _viewOverlaysRender(ctx) {\n    this._visibleLines.renderLines(ctx.viewportData);\n  }\n}\nexport class ViewOverlayLine {\n  constructor(dynamicOverlays) {\n    this._dynamicOverlays = dynamicOverlays;\n    this._domNode = null;\n    this._renderedContent = null;\n  }\n  getDomNode() {\n    if (!this._domNode) {\n      return null;\n    }\n    return this._domNode.domNode;\n  }\n  setDomNode(domNode) {\n    this._domNode = createFastDomNode(domNode);\n  }\n  onContentChanged() {\n    // Nothing\n  }\n  onTokensChanged() {\n    // Nothing\n  }\n  renderLine(lineNumber, deltaTop, lineHeight, viewportData, sb) {\n    let result = '';\n    for (let i = 0, len = this._dynamicOverlays.length; i < len; i++) {\n      const dynamicOverlay = this._dynamicOverlays[i];\n      result += dynamicOverlay.render(viewportData.startLineNumber, lineNumber);\n    }\n    if (this._renderedContent === result) {\n      // No rendering needed\n      return false;\n    }\n    this._renderedContent = result;\n    sb.appendString('<div style=\"top:');\n    sb.appendString(String(deltaTop));\n    sb.appendString('px;height:');\n    sb.appendString(String(lineHeight));\n    sb.appendString('px;\">');\n    sb.appendString(result);\n    sb.appendString('</div>');\n    return true;\n  }\n  layoutLine(lineNumber, deltaTop, lineHeight) {\n    if (this._domNode) {\n      this._domNode.setTop(deltaTop);\n      this._domNode.setHeight(lineHeight);\n    }\n  }\n}\nexport class ContentViewOverlays extends ViewOverlays {\n  constructor(context) {\n    super(context);\n    const options = this._context.configuration.options;\n    const layoutInfo = options.get(146 /* EditorOption.layoutInfo */);\n    this._contentWidth = layoutInfo.contentWidth;\n    this.domNode.setHeight(0);\n  }\n  // --- begin event handlers\n  onConfigurationChanged(e) {\n    const options = this._context.configuration.options;\n    const layoutInfo = options.get(146 /* EditorOption.layoutInfo */);\n    this._contentWidth = layoutInfo.contentWidth;\n    return super.onConfigurationChanged(e) || true;\n  }\n  onScrollChanged(e) {\n    return super.onScrollChanged(e) || e.scrollWidthChanged;\n  }\n  // --- end event handlers\n  _viewOverlaysRender(ctx) {\n    super._viewOverlaysRender(ctx);\n    this.domNode.setWidth(Math.max(ctx.scrollWidth, this._contentWidth));\n  }\n}\nexport class MarginViewOverlays extends ViewOverlays {\n  constructor(context) {\n    super(context);\n    const options = this._context.configuration.options;\n    const layoutInfo = options.get(146 /* EditorOption.layoutInfo */);\n    this._contentLeft = layoutInfo.contentLeft;\n    this.domNode.setClassName('margin-view-overlays');\n    this.domNode.setWidth(1);\n    applyFontInfo(this.domNode, options.get(50 /* EditorOption.fontInfo */));\n  }\n  onConfigurationChanged(e) {\n    const options = this._context.configuration.options;\n    applyFontInfo(this.domNode, options.get(50 /* EditorOption.fontInfo */));\n    const layoutInfo = options.get(146 /* EditorOption.layoutInfo */);\n    this._contentLeft = layoutInfo.contentLeft;\n    return super.onConfigurationChanged(e) || true;\n  }\n  onScrollChanged(e) {\n    return super.onScrollChanged(e) || e.scrollHeightChanged;\n  }\n  _viewOverlaysRender(ctx) {\n    super._viewOverlaysRender(ctx);\n    const height = Math.min(ctx.scrollHeight, 1000000);\n    this.domNode.setHeight(height);\n    this.domNode.setWidth(this._contentLeft);\n  }\n}","map":{"version":3,"names":["createFastDomNode","applyFontInfo","VisibleLinesCollection","ViewPart","ViewOverlays","constructor","context","_dynamicOverlays","_isFocused","_visibleLines","createLine","ViewOverlayLine","domNode","options","_context","configuration","fontInfo","get","setClassName","shouldRender","i","len","length","dynamicOverlay","dispose","getDomNode","addDynamicOverlay","overlay","push","onConfigurationChanged","e","onFlushed","onFocusChanged","isFocused","onLinesChanged","onLinesDeleted","onLinesInserted","onScrollChanged","onTokensChanged","onZonesChanged","prepareRender","ctx","toRender","filter","onDidRender","render","_viewOverlaysRender","toggleClassName","renderLines","viewportData","dynamicOverlays","_domNode","_renderedContent","setDomNode","onContentChanged","renderLine","lineNumber","deltaTop","lineHeight","sb","result","startLineNumber","appendString","String","layoutLine","setTop","setHeight","ContentViewOverlays","layoutInfo","_contentWidth","contentWidth","scrollWidthChanged","setWidth","Math","max","scrollWidth","MarginViewOverlays","_contentLeft","contentLeft","scrollHeightChanged","height","min","scrollHeight"],"sources":["P:/IDEA/JudgeX/JudgeX_front/node_modules/monaco-editor/esm/vs/editor/browser/view/viewOverlays.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { applyFontInfo } from '../config/domFontInfo.js';\nimport { VisibleLinesCollection } from './viewLayer.js';\nimport { ViewPart } from './viewPart.js';\nexport class ViewOverlays extends ViewPart {\n    constructor(context) {\n        super(context);\n        this._dynamicOverlays = [];\n        this._isFocused = false;\n        this._visibleLines = new VisibleLinesCollection({\n            createLine: () => new ViewOverlayLine(this._dynamicOverlays)\n        });\n        this.domNode = this._visibleLines.domNode;\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        applyFontInfo(this.domNode, fontInfo);\n        this.domNode.setClassName('view-overlays');\n    }\n    shouldRender() {\n        if (super.shouldRender()) {\n            return true;\n        }\n        for (let i = 0, len = this._dynamicOverlays.length; i < len; i++) {\n            const dynamicOverlay = this._dynamicOverlays[i];\n            if (dynamicOverlay.shouldRender()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    dispose() {\n        super.dispose();\n        for (let i = 0, len = this._dynamicOverlays.length; i < len; i++) {\n            const dynamicOverlay = this._dynamicOverlays[i];\n            dynamicOverlay.dispose();\n        }\n        this._dynamicOverlays = [];\n    }\n    getDomNode() {\n        return this.domNode;\n    }\n    addDynamicOverlay(overlay) {\n        this._dynamicOverlays.push(overlay);\n    }\n    // ----- event handlers\n    onConfigurationChanged(e) {\n        this._visibleLines.onConfigurationChanged(e);\n        const options = this._context.configuration.options;\n        const fontInfo = options.get(50 /* EditorOption.fontInfo */);\n        applyFontInfo(this.domNode, fontInfo);\n        return true;\n    }\n    onFlushed(e) {\n        return this._visibleLines.onFlushed(e);\n    }\n    onFocusChanged(e) {\n        this._isFocused = e.isFocused;\n        return true;\n    }\n    onLinesChanged(e) {\n        return this._visibleLines.onLinesChanged(e);\n    }\n    onLinesDeleted(e) {\n        return this._visibleLines.onLinesDeleted(e);\n    }\n    onLinesInserted(e) {\n        return this._visibleLines.onLinesInserted(e);\n    }\n    onScrollChanged(e) {\n        return this._visibleLines.onScrollChanged(e) || true;\n    }\n    onTokensChanged(e) {\n        return this._visibleLines.onTokensChanged(e);\n    }\n    onZonesChanged(e) {\n        return this._visibleLines.onZonesChanged(e);\n    }\n    // ----- end event handlers\n    prepareRender(ctx) {\n        const toRender = this._dynamicOverlays.filter(overlay => overlay.shouldRender());\n        for (let i = 0, len = toRender.length; i < len; i++) {\n            const dynamicOverlay = toRender[i];\n            dynamicOverlay.prepareRender(ctx);\n            dynamicOverlay.onDidRender();\n        }\n    }\n    render(ctx) {\n        // Overwriting to bypass `shouldRender` flag\n        this._viewOverlaysRender(ctx);\n        this.domNode.toggleClassName('focused', this._isFocused);\n    }\n    _viewOverlaysRender(ctx) {\n        this._visibleLines.renderLines(ctx.viewportData);\n    }\n}\nexport class ViewOverlayLine {\n    constructor(dynamicOverlays) {\n        this._dynamicOverlays = dynamicOverlays;\n        this._domNode = null;\n        this._renderedContent = null;\n    }\n    getDomNode() {\n        if (!this._domNode) {\n            return null;\n        }\n        return this._domNode.domNode;\n    }\n    setDomNode(domNode) {\n        this._domNode = createFastDomNode(domNode);\n    }\n    onContentChanged() {\n        // Nothing\n    }\n    onTokensChanged() {\n        // Nothing\n    }\n    renderLine(lineNumber, deltaTop, lineHeight, viewportData, sb) {\n        let result = '';\n        for (let i = 0, len = this._dynamicOverlays.length; i < len; i++) {\n            const dynamicOverlay = this._dynamicOverlays[i];\n            result += dynamicOverlay.render(viewportData.startLineNumber, lineNumber);\n        }\n        if (this._renderedContent === result) {\n            // No rendering needed\n            return false;\n        }\n        this._renderedContent = result;\n        sb.appendString('<div style=\"top:');\n        sb.appendString(String(deltaTop));\n        sb.appendString('px;height:');\n        sb.appendString(String(lineHeight));\n        sb.appendString('px;\">');\n        sb.appendString(result);\n        sb.appendString('</div>');\n        return true;\n    }\n    layoutLine(lineNumber, deltaTop, lineHeight) {\n        if (this._domNode) {\n            this._domNode.setTop(deltaTop);\n            this._domNode.setHeight(lineHeight);\n        }\n    }\n}\nexport class ContentViewOverlays extends ViewOverlays {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(146 /* EditorOption.layoutInfo */);\n        this._contentWidth = layoutInfo.contentWidth;\n        this.domNode.setHeight(0);\n    }\n    // --- begin event handlers\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(146 /* EditorOption.layoutInfo */);\n        this._contentWidth = layoutInfo.contentWidth;\n        return super.onConfigurationChanged(e) || true;\n    }\n    onScrollChanged(e) {\n        return super.onScrollChanged(e) || e.scrollWidthChanged;\n    }\n    // --- end event handlers\n    _viewOverlaysRender(ctx) {\n        super._viewOverlaysRender(ctx);\n        this.domNode.setWidth(Math.max(ctx.scrollWidth, this._contentWidth));\n    }\n}\nexport class MarginViewOverlays extends ViewOverlays {\n    constructor(context) {\n        super(context);\n        const options = this._context.configuration.options;\n        const layoutInfo = options.get(146 /* EditorOption.layoutInfo */);\n        this._contentLeft = layoutInfo.contentLeft;\n        this.domNode.setClassName('margin-view-overlays');\n        this.domNode.setWidth(1);\n        applyFontInfo(this.domNode, options.get(50 /* EditorOption.fontInfo */));\n    }\n    onConfigurationChanged(e) {\n        const options = this._context.configuration.options;\n        applyFontInfo(this.domNode, options.get(50 /* EditorOption.fontInfo */));\n        const layoutInfo = options.get(146 /* EditorOption.layoutInfo */);\n        this._contentLeft = layoutInfo.contentLeft;\n        return super.onConfigurationChanged(e) || true;\n    }\n    onScrollChanged(e) {\n        return super.onScrollChanged(e) || e.scrollHeightChanged;\n    }\n    _viewOverlaysRender(ctx) {\n        super._viewOverlaysRender(ctx);\n        const height = Math.min(ctx.scrollHeight, 1000000);\n        this.domNode.setHeight(height);\n        this.domNode.setWidth(this._contentLeft);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}