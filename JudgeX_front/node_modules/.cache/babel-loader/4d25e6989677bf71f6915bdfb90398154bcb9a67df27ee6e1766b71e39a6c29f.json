{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ShiftCommand } from '../commands/shiftCommand.js';\nimport { CompositionSurroundSelectionCommand } from '../commands/surroundSelectionCommand.js';\nimport { EditOperationResult, isQuote } from '../cursorCommon.js';\nimport { AutoClosingOpenCharTypeOperation, AutoClosingOvertypeOperation, AutoClosingOvertypeWithInterceptorsOperation, AutoIndentOperation, CompositionOperation, EnterOperation, InterceptorElectricCharOperation, PasteOperation, shouldSurroundChar, SimpleCharacterTypeOperation, SurroundSelectionOperation, TabOperation, TypeWithoutInterceptorsOperation } from './cursorTypeEditOperations.js';\nexport class TypeOperations {\n  static indent(config, model, selections) {\n    if (model === null || selections === null) {\n      return [];\n    }\n    const commands = [];\n    for (let i = 0, len = selections.length; i < len; i++) {\n      commands[i] = new ShiftCommand(selections[i], {\n        isUnshift: false,\n        tabSize: config.tabSize,\n        indentSize: config.indentSize,\n        insertSpaces: config.insertSpaces,\n        useTabStops: config.useTabStops,\n        autoIndent: config.autoIndent\n      }, config.languageConfigurationService);\n    }\n    return commands;\n  }\n  static outdent(config, model, selections) {\n    const commands = [];\n    for (let i = 0, len = selections.length; i < len; i++) {\n      commands[i] = new ShiftCommand(selections[i], {\n        isUnshift: true,\n        tabSize: config.tabSize,\n        indentSize: config.indentSize,\n        insertSpaces: config.insertSpaces,\n        useTabStops: config.useTabStops,\n        autoIndent: config.autoIndent\n      }, config.languageConfigurationService);\n    }\n    return commands;\n  }\n  static paste(config, model, selections, text, pasteOnNewLine, multicursorText) {\n    return PasteOperation.getEdits(config, model, selections, text, pasteOnNewLine, multicursorText);\n  }\n  static tab(config, model, selections) {\n    return TabOperation.getCommands(config, model, selections);\n  }\n  static compositionType(prevEditOperationType, config, model, selections, text, replacePrevCharCnt, replaceNextCharCnt, positionDelta) {\n    return CompositionOperation.getEdits(prevEditOperationType, config, model, selections, text, replacePrevCharCnt, replaceNextCharCnt, positionDelta);\n  }\n  /**\n   * This is very similar with typing, but the character is already in the text buffer!\n   */\n  static compositionEndWithInterceptors(prevEditOperationType, config, model, compositions, selections, autoClosedCharacters) {\n    if (!compositions) {\n      // could not deduce what the composition did\n      return null;\n    }\n    let insertedText = null;\n    for (const composition of compositions) {\n      if (insertedText === null) {\n        insertedText = composition.insertedText;\n      } else if (insertedText !== composition.insertedText) {\n        // not all selections agree on what was typed\n        return null;\n      }\n    }\n    if (!insertedText || insertedText.length !== 1) {\n      // we're only interested in the case where a single character was inserted\n      return null;\n    }\n    const ch = insertedText;\n    let hasDeletion = false;\n    for (const composition of compositions) {\n      if (composition.deletedText.length !== 0) {\n        hasDeletion = true;\n        break;\n      }\n    }\n    if (hasDeletion) {\n      // Check if this could have been a surround selection\n      if (!shouldSurroundChar(config, ch) || !config.surroundingPairs.hasOwnProperty(ch)) {\n        return null;\n      }\n      const isTypingAQuoteCharacter = isQuote(ch);\n      for (const composition of compositions) {\n        if (composition.deletedSelectionStart !== 0 || composition.deletedSelectionEnd !== composition.deletedText.length) {\n          // more text was deleted than was selected, so this could not have been a surround selection\n          return null;\n        }\n        if (/^[ \\t]+$/.test(composition.deletedText)) {\n          // deleted text was only whitespace\n          return null;\n        }\n        if (isTypingAQuoteCharacter && isQuote(composition.deletedText)) {\n          // deleted text was a quote\n          return null;\n        }\n      }\n      const positions = [];\n      for (const selection of selections) {\n        if (!selection.isEmpty()) {\n          return null;\n        }\n        positions.push(selection.getPosition());\n      }\n      if (positions.length !== compositions.length) {\n        return null;\n      }\n      const commands = [];\n      for (let i = 0, len = positions.length; i < len; i++) {\n        commands.push(new CompositionSurroundSelectionCommand(positions[i], compositions[i].deletedText, config.surroundingPairs[ch]));\n      }\n      return new EditOperationResult(4 /* EditOperationType.TypingOther */, commands, {\n        shouldPushStackElementBefore: true,\n        shouldPushStackElementAfter: false\n      });\n    }\n    const autoClosingOvertypeEdits = AutoClosingOvertypeWithInterceptorsOperation.getEdits(config, model, selections, autoClosedCharacters, ch);\n    if (autoClosingOvertypeEdits !== undefined) {\n      return autoClosingOvertypeEdits;\n    }\n    const autoClosingOpenCharEdits = AutoClosingOpenCharTypeOperation.getEdits(config, model, selections, ch, true, false);\n    if (autoClosingOpenCharEdits !== undefined) {\n      return autoClosingOpenCharEdits;\n    }\n    return null;\n  }\n  static typeWithInterceptors(isDoingComposition, prevEditOperationType, config, model, selections, autoClosedCharacters, ch) {\n    const enterEdits = EnterOperation.getEdits(config, model, selections, ch, isDoingComposition);\n    if (enterEdits !== undefined) {\n      return enterEdits;\n    }\n    const autoIndentEdits = AutoIndentOperation.getEdits(config, model, selections, ch, isDoingComposition);\n    if (autoIndentEdits !== undefined) {\n      return autoIndentEdits;\n    }\n    const autoClosingOverTypeEdits = AutoClosingOvertypeOperation.getEdits(prevEditOperationType, config, model, selections, autoClosedCharacters, ch);\n    if (autoClosingOverTypeEdits !== undefined) {\n      return autoClosingOverTypeEdits;\n    }\n    const autoClosingOpenCharEdits = AutoClosingOpenCharTypeOperation.getEdits(config, model, selections, ch, false, isDoingComposition);\n    if (autoClosingOpenCharEdits !== undefined) {\n      return autoClosingOpenCharEdits;\n    }\n    const surroundSelectionEdits = SurroundSelectionOperation.getEdits(config, model, selections, ch, isDoingComposition);\n    if (surroundSelectionEdits !== undefined) {\n      return surroundSelectionEdits;\n    }\n    const interceptorElectricCharOperation = InterceptorElectricCharOperation.getEdits(prevEditOperationType, config, model, selections, ch, isDoingComposition);\n    if (interceptorElectricCharOperation !== undefined) {\n      return interceptorElectricCharOperation;\n    }\n    return SimpleCharacterTypeOperation.getEdits(prevEditOperationType, selections, ch);\n  }\n  static typeWithoutInterceptors(prevEditOperationType, config, model, selections, str) {\n    return TypeWithoutInterceptorsOperation.getEdits(prevEditOperationType, selections, str);\n  }\n}\nexport class CompositionOutcome {\n  constructor(deletedText, deletedSelectionStart, deletedSelectionEnd, insertedText, insertedSelectionStart, insertedSelectionEnd) {\n    this.deletedText = deletedText;\n    this.deletedSelectionStart = deletedSelectionStart;\n    this.deletedSelectionEnd = deletedSelectionEnd;\n    this.insertedText = insertedText;\n    this.insertedSelectionStart = insertedSelectionStart;\n    this.insertedSelectionEnd = insertedSelectionEnd;\n  }\n}","map":{"version":3,"names":["ShiftCommand","CompositionSurroundSelectionCommand","EditOperationResult","isQuote","AutoClosingOpenCharTypeOperation","AutoClosingOvertypeOperation","AutoClosingOvertypeWithInterceptorsOperation","AutoIndentOperation","CompositionOperation","EnterOperation","InterceptorElectricCharOperation","PasteOperation","shouldSurroundChar","SimpleCharacterTypeOperation","SurroundSelectionOperation","TabOperation","TypeWithoutInterceptorsOperation","TypeOperations","indent","config","model","selections","commands","i","len","length","isUnshift","tabSize","indentSize","insertSpaces","useTabStops","autoIndent","languageConfigurationService","outdent","paste","text","pasteOnNewLine","multicursorText","getEdits","tab","getCommands","compositionType","prevEditOperationType","replacePrevCharCnt","replaceNextCharCnt","positionDelta","compositionEndWithInterceptors","compositions","autoClosedCharacters","insertedText","composition","ch","hasDeletion","deletedText","surroundingPairs","hasOwnProperty","isTypingAQuoteCharacter","deletedSelectionStart","deletedSelectionEnd","test","positions","selection","isEmpty","push","getPosition","shouldPushStackElementBefore","shouldPushStackElementAfter","autoClosingOvertypeEdits","undefined","autoClosingOpenCharEdits","typeWithInterceptors","isDoingComposition","enterEdits","autoIndentEdits","autoClosingOverTypeEdits","surroundSelectionEdits","interceptorElectricCharOperation","typeWithoutInterceptors","str","CompositionOutcome","constructor","insertedSelectionStart","insertedSelectionEnd"],"sources":["P:/IDEA/JudgeX/JudgeX_front/node_modules/monaco-editor/esm/vs/editor/common/cursor/cursorTypeOperations.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ShiftCommand } from '../commands/shiftCommand.js';\nimport { CompositionSurroundSelectionCommand } from '../commands/surroundSelectionCommand.js';\nimport { EditOperationResult, isQuote } from '../cursorCommon.js';\nimport { AutoClosingOpenCharTypeOperation, AutoClosingOvertypeOperation, AutoClosingOvertypeWithInterceptorsOperation, AutoIndentOperation, CompositionOperation, EnterOperation, InterceptorElectricCharOperation, PasteOperation, shouldSurroundChar, SimpleCharacterTypeOperation, SurroundSelectionOperation, TabOperation, TypeWithoutInterceptorsOperation } from './cursorTypeEditOperations.js';\nexport class TypeOperations {\n    static indent(config, model, selections) {\n        if (model === null || selections === null) {\n            return [];\n        }\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            commands[i] = new ShiftCommand(selections[i], {\n                isUnshift: false,\n                tabSize: config.tabSize,\n                indentSize: config.indentSize,\n                insertSpaces: config.insertSpaces,\n                useTabStops: config.useTabStops,\n                autoIndent: config.autoIndent\n            }, config.languageConfigurationService);\n        }\n        return commands;\n    }\n    static outdent(config, model, selections) {\n        const commands = [];\n        for (let i = 0, len = selections.length; i < len; i++) {\n            commands[i] = new ShiftCommand(selections[i], {\n                isUnshift: true,\n                tabSize: config.tabSize,\n                indentSize: config.indentSize,\n                insertSpaces: config.insertSpaces,\n                useTabStops: config.useTabStops,\n                autoIndent: config.autoIndent\n            }, config.languageConfigurationService);\n        }\n        return commands;\n    }\n    static paste(config, model, selections, text, pasteOnNewLine, multicursorText) {\n        return PasteOperation.getEdits(config, model, selections, text, pasteOnNewLine, multicursorText);\n    }\n    static tab(config, model, selections) {\n        return TabOperation.getCommands(config, model, selections);\n    }\n    static compositionType(prevEditOperationType, config, model, selections, text, replacePrevCharCnt, replaceNextCharCnt, positionDelta) {\n        return CompositionOperation.getEdits(prevEditOperationType, config, model, selections, text, replacePrevCharCnt, replaceNextCharCnt, positionDelta);\n    }\n    /**\n     * This is very similar with typing, but the character is already in the text buffer!\n     */\n    static compositionEndWithInterceptors(prevEditOperationType, config, model, compositions, selections, autoClosedCharacters) {\n        if (!compositions) {\n            // could not deduce what the composition did\n            return null;\n        }\n        let insertedText = null;\n        for (const composition of compositions) {\n            if (insertedText === null) {\n                insertedText = composition.insertedText;\n            }\n            else if (insertedText !== composition.insertedText) {\n                // not all selections agree on what was typed\n                return null;\n            }\n        }\n        if (!insertedText || insertedText.length !== 1) {\n            // we're only interested in the case where a single character was inserted\n            return null;\n        }\n        const ch = insertedText;\n        let hasDeletion = false;\n        for (const composition of compositions) {\n            if (composition.deletedText.length !== 0) {\n                hasDeletion = true;\n                break;\n            }\n        }\n        if (hasDeletion) {\n            // Check if this could have been a surround selection\n            if (!shouldSurroundChar(config, ch) || !config.surroundingPairs.hasOwnProperty(ch)) {\n                return null;\n            }\n            const isTypingAQuoteCharacter = isQuote(ch);\n            for (const composition of compositions) {\n                if (composition.deletedSelectionStart !== 0 || composition.deletedSelectionEnd !== composition.deletedText.length) {\n                    // more text was deleted than was selected, so this could not have been a surround selection\n                    return null;\n                }\n                if (/^[ \\t]+$/.test(composition.deletedText)) {\n                    // deleted text was only whitespace\n                    return null;\n                }\n                if (isTypingAQuoteCharacter && isQuote(composition.deletedText)) {\n                    // deleted text was a quote\n                    return null;\n                }\n            }\n            const positions = [];\n            for (const selection of selections) {\n                if (!selection.isEmpty()) {\n                    return null;\n                }\n                positions.push(selection.getPosition());\n            }\n            if (positions.length !== compositions.length) {\n                return null;\n            }\n            const commands = [];\n            for (let i = 0, len = positions.length; i < len; i++) {\n                commands.push(new CompositionSurroundSelectionCommand(positions[i], compositions[i].deletedText, config.surroundingPairs[ch]));\n            }\n            return new EditOperationResult(4 /* EditOperationType.TypingOther */, commands, {\n                shouldPushStackElementBefore: true,\n                shouldPushStackElementAfter: false\n            });\n        }\n        const autoClosingOvertypeEdits = AutoClosingOvertypeWithInterceptorsOperation.getEdits(config, model, selections, autoClosedCharacters, ch);\n        if (autoClosingOvertypeEdits !== undefined) {\n            return autoClosingOvertypeEdits;\n        }\n        const autoClosingOpenCharEdits = AutoClosingOpenCharTypeOperation.getEdits(config, model, selections, ch, true, false);\n        if (autoClosingOpenCharEdits !== undefined) {\n            return autoClosingOpenCharEdits;\n        }\n        return null;\n    }\n    static typeWithInterceptors(isDoingComposition, prevEditOperationType, config, model, selections, autoClosedCharacters, ch) {\n        const enterEdits = EnterOperation.getEdits(config, model, selections, ch, isDoingComposition);\n        if (enterEdits !== undefined) {\n            return enterEdits;\n        }\n        const autoIndentEdits = AutoIndentOperation.getEdits(config, model, selections, ch, isDoingComposition);\n        if (autoIndentEdits !== undefined) {\n            return autoIndentEdits;\n        }\n        const autoClosingOverTypeEdits = AutoClosingOvertypeOperation.getEdits(prevEditOperationType, config, model, selections, autoClosedCharacters, ch);\n        if (autoClosingOverTypeEdits !== undefined) {\n            return autoClosingOverTypeEdits;\n        }\n        const autoClosingOpenCharEdits = AutoClosingOpenCharTypeOperation.getEdits(config, model, selections, ch, false, isDoingComposition);\n        if (autoClosingOpenCharEdits !== undefined) {\n            return autoClosingOpenCharEdits;\n        }\n        const surroundSelectionEdits = SurroundSelectionOperation.getEdits(config, model, selections, ch, isDoingComposition);\n        if (surroundSelectionEdits !== undefined) {\n            return surroundSelectionEdits;\n        }\n        const interceptorElectricCharOperation = InterceptorElectricCharOperation.getEdits(prevEditOperationType, config, model, selections, ch, isDoingComposition);\n        if (interceptorElectricCharOperation !== undefined) {\n            return interceptorElectricCharOperation;\n        }\n        return SimpleCharacterTypeOperation.getEdits(prevEditOperationType, selections, ch);\n    }\n    static typeWithoutInterceptors(prevEditOperationType, config, model, selections, str) {\n        return TypeWithoutInterceptorsOperation.getEdits(prevEditOperationType, selections, str);\n    }\n}\nexport class CompositionOutcome {\n    constructor(deletedText, deletedSelectionStart, deletedSelectionEnd, insertedText, insertedSelectionStart, insertedSelectionEnd) {\n        this.deletedText = deletedText;\n        this.deletedSelectionStart = deletedSelectionStart;\n        this.deletedSelectionEnd = deletedSelectionEnd;\n        this.insertedText = insertedText;\n        this.insertedSelectionStart = insertedSelectionStart;\n        this.insertedSelectionEnd = insertedSelectionEnd;\n    }\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA,SAASA,YAAY,QAAQ,6BAA6B;AAC1D,SAASC,mCAAmC,QAAQ,yCAAyC;AAC7F,SAASC,mBAAmB,EAAEC,OAAO,QAAQ,oBAAoB;AACjE,SAASC,gCAAgC,EAAEC,4BAA4B,EAAEC,4CAA4C,EAAEC,mBAAmB,EAAEC,oBAAoB,EAAEC,cAAc,EAAEC,gCAAgC,EAAEC,cAAc,EAAEC,kBAAkB,EAAEC,4BAA4B,EAAEC,0BAA0B,EAAEC,YAAY,EAAEC,gCAAgC,QAAQ,+BAA+B;AACvY,OAAO,MAAMC,cAAc,CAAC;EACxB,OAAOC,MAAMA,CAACC,MAAM,EAAEC,KAAK,EAAEC,UAAU,EAAE;IACrC,IAAID,KAAK,KAAK,IAAI,IAAIC,UAAU,KAAK,IAAI,EAAE;MACvC,OAAO,EAAE;IACb;IACA,MAAMC,QAAQ,GAAG,EAAE;IACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGH,UAAU,CAACI,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MACnDD,QAAQ,CAACC,CAAC,CAAC,GAAG,IAAIvB,YAAY,CAACqB,UAAU,CAACE,CAAC,CAAC,EAAE;QAC1CG,SAAS,EAAE,KAAK;QAChBC,OAAO,EAAER,MAAM,CAACQ,OAAO;QACvBC,UAAU,EAAET,MAAM,CAACS,UAAU;QAC7BC,YAAY,EAAEV,MAAM,CAACU,YAAY;QACjCC,WAAW,EAAEX,MAAM,CAACW,WAAW;QAC/BC,UAAU,EAAEZ,MAAM,CAACY;MACvB,CAAC,EAAEZ,MAAM,CAACa,4BAA4B,CAAC;IAC3C;IACA,OAAOV,QAAQ;EACnB;EACA,OAAOW,OAAOA,CAACd,MAAM,EAAEC,KAAK,EAAEC,UAAU,EAAE;IACtC,MAAMC,QAAQ,GAAG,EAAE;IACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGH,UAAU,CAACI,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;MACnDD,QAAQ,CAACC,CAAC,CAAC,GAAG,IAAIvB,YAAY,CAACqB,UAAU,CAACE,CAAC,CAAC,EAAE;QAC1CG,SAAS,EAAE,IAAI;QACfC,OAAO,EAAER,MAAM,CAACQ,OAAO;QACvBC,UAAU,EAAET,MAAM,CAACS,UAAU;QAC7BC,YAAY,EAAEV,MAAM,CAACU,YAAY;QACjCC,WAAW,EAAEX,MAAM,CAACW,WAAW;QAC/BC,UAAU,EAAEZ,MAAM,CAACY;MACvB,CAAC,EAAEZ,MAAM,CAACa,4BAA4B,CAAC;IAC3C;IACA,OAAOV,QAAQ;EACnB;EACA,OAAOY,KAAKA,CAACf,MAAM,EAAEC,KAAK,EAAEC,UAAU,EAAEc,IAAI,EAAEC,cAAc,EAAEC,eAAe,EAAE;IAC3E,OAAO1B,cAAc,CAAC2B,QAAQ,CAACnB,MAAM,EAAEC,KAAK,EAAEC,UAAU,EAAEc,IAAI,EAAEC,cAAc,EAAEC,eAAe,CAAC;EACpG;EACA,OAAOE,GAAGA,CAACpB,MAAM,EAAEC,KAAK,EAAEC,UAAU,EAAE;IAClC,OAAON,YAAY,CAACyB,WAAW,CAACrB,MAAM,EAAEC,KAAK,EAAEC,UAAU,CAAC;EAC9D;EACA,OAAOoB,eAAeA,CAACC,qBAAqB,EAAEvB,MAAM,EAAEC,KAAK,EAAEC,UAAU,EAAEc,IAAI,EAAEQ,kBAAkB,EAAEC,kBAAkB,EAAEC,aAAa,EAAE;IAClI,OAAOrC,oBAAoB,CAAC8B,QAAQ,CAACI,qBAAqB,EAAEvB,MAAM,EAAEC,KAAK,EAAEC,UAAU,EAAEc,IAAI,EAAEQ,kBAAkB,EAAEC,kBAAkB,EAAEC,aAAa,CAAC;EACvJ;EACA;AACJ;AACA;EACI,OAAOC,8BAA8BA,CAACJ,qBAAqB,EAAEvB,MAAM,EAAEC,KAAK,EAAE2B,YAAY,EAAE1B,UAAU,EAAE2B,oBAAoB,EAAE;IACxH,IAAI,CAACD,YAAY,EAAE;MACf;MACA,OAAO,IAAI;IACf;IACA,IAAIE,YAAY,GAAG,IAAI;IACvB,KAAK,MAAMC,WAAW,IAAIH,YAAY,EAAE;MACpC,IAAIE,YAAY,KAAK,IAAI,EAAE;QACvBA,YAAY,GAAGC,WAAW,CAACD,YAAY;MAC3C,CAAC,MACI,IAAIA,YAAY,KAAKC,WAAW,CAACD,YAAY,EAAE;QAChD;QACA,OAAO,IAAI;MACf;IACJ;IACA,IAAI,CAACA,YAAY,IAAIA,YAAY,CAACxB,MAAM,KAAK,CAAC,EAAE;MAC5C;MACA,OAAO,IAAI;IACf;IACA,MAAM0B,EAAE,GAAGF,YAAY;IACvB,IAAIG,WAAW,GAAG,KAAK;IACvB,KAAK,MAAMF,WAAW,IAAIH,YAAY,EAAE;MACpC,IAAIG,WAAW,CAACG,WAAW,CAAC5B,MAAM,KAAK,CAAC,EAAE;QACtC2B,WAAW,GAAG,IAAI;QAClB;MACJ;IACJ;IACA,IAAIA,WAAW,EAAE;MACb;MACA,IAAI,CAACxC,kBAAkB,CAACO,MAAM,EAAEgC,EAAE,CAAC,IAAI,CAAChC,MAAM,CAACmC,gBAAgB,CAACC,cAAc,CAACJ,EAAE,CAAC,EAAE;QAChF,OAAO,IAAI;MACf;MACA,MAAMK,uBAAuB,GAAGrD,OAAO,CAACgD,EAAE,CAAC;MAC3C,KAAK,MAAMD,WAAW,IAAIH,YAAY,EAAE;QACpC,IAAIG,WAAW,CAACO,qBAAqB,KAAK,CAAC,IAAIP,WAAW,CAACQ,mBAAmB,KAAKR,WAAW,CAACG,WAAW,CAAC5B,MAAM,EAAE;UAC/G;UACA,OAAO,IAAI;QACf;QACA,IAAI,UAAU,CAACkC,IAAI,CAACT,WAAW,CAACG,WAAW,CAAC,EAAE;UAC1C;UACA,OAAO,IAAI;QACf;QACA,IAAIG,uBAAuB,IAAIrD,OAAO,CAAC+C,WAAW,CAACG,WAAW,CAAC,EAAE;UAC7D;UACA,OAAO,IAAI;QACf;MACJ;MACA,MAAMO,SAAS,GAAG,EAAE;MACpB,KAAK,MAAMC,SAAS,IAAIxC,UAAU,EAAE;QAChC,IAAI,CAACwC,SAAS,CAACC,OAAO,CAAC,CAAC,EAAE;UACtB,OAAO,IAAI;QACf;QACAF,SAAS,CAACG,IAAI,CAACF,SAAS,CAACG,WAAW,CAAC,CAAC,CAAC;MAC3C;MACA,IAAIJ,SAAS,CAACnC,MAAM,KAAKsB,YAAY,CAACtB,MAAM,EAAE;QAC1C,OAAO,IAAI;MACf;MACA,MAAMH,QAAQ,GAAG,EAAE;MACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGoC,SAAS,CAACnC,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;QAClDD,QAAQ,CAACyC,IAAI,CAAC,IAAI9D,mCAAmC,CAAC2D,SAAS,CAACrC,CAAC,CAAC,EAAEwB,YAAY,CAACxB,CAAC,CAAC,CAAC8B,WAAW,EAAElC,MAAM,CAACmC,gBAAgB,CAACH,EAAE,CAAC,CAAC,CAAC;MAClI;MACA,OAAO,IAAIjD,mBAAmB,CAAC,CAAC,CAAC,qCAAqCoB,QAAQ,EAAE;QAC5E2C,4BAA4B,EAAE,IAAI;QAClCC,2BAA2B,EAAE;MACjC,CAAC,CAAC;IACN;IACA,MAAMC,wBAAwB,GAAG7D,4CAA4C,CAACgC,QAAQ,CAACnB,MAAM,EAAEC,KAAK,EAAEC,UAAU,EAAE2B,oBAAoB,EAAEG,EAAE,CAAC;IAC3I,IAAIgB,wBAAwB,KAAKC,SAAS,EAAE;MACxC,OAAOD,wBAAwB;IACnC;IACA,MAAME,wBAAwB,GAAGjE,gCAAgC,CAACkC,QAAQ,CAACnB,MAAM,EAAEC,KAAK,EAAEC,UAAU,EAAE8B,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC;IACtH,IAAIkB,wBAAwB,KAAKD,SAAS,EAAE;MACxC,OAAOC,wBAAwB;IACnC;IACA,OAAO,IAAI;EACf;EACA,OAAOC,oBAAoBA,CAACC,kBAAkB,EAAE7B,qBAAqB,EAAEvB,MAAM,EAAEC,KAAK,EAAEC,UAAU,EAAE2B,oBAAoB,EAAEG,EAAE,EAAE;IACxH,MAAMqB,UAAU,GAAG/D,cAAc,CAAC6B,QAAQ,CAACnB,MAAM,EAAEC,KAAK,EAAEC,UAAU,EAAE8B,EAAE,EAAEoB,kBAAkB,CAAC;IAC7F,IAAIC,UAAU,KAAKJ,SAAS,EAAE;MAC1B,OAAOI,UAAU;IACrB;IACA,MAAMC,eAAe,GAAGlE,mBAAmB,CAAC+B,QAAQ,CAACnB,MAAM,EAAEC,KAAK,EAAEC,UAAU,EAAE8B,EAAE,EAAEoB,kBAAkB,CAAC;IACvG,IAAIE,eAAe,KAAKL,SAAS,EAAE;MAC/B,OAAOK,eAAe;IAC1B;IACA,MAAMC,wBAAwB,GAAGrE,4BAA4B,CAACiC,QAAQ,CAACI,qBAAqB,EAAEvB,MAAM,EAAEC,KAAK,EAAEC,UAAU,EAAE2B,oBAAoB,EAAEG,EAAE,CAAC;IAClJ,IAAIuB,wBAAwB,KAAKN,SAAS,EAAE;MACxC,OAAOM,wBAAwB;IACnC;IACA,MAAML,wBAAwB,GAAGjE,gCAAgC,CAACkC,QAAQ,CAACnB,MAAM,EAAEC,KAAK,EAAEC,UAAU,EAAE8B,EAAE,EAAE,KAAK,EAAEoB,kBAAkB,CAAC;IACpI,IAAIF,wBAAwB,KAAKD,SAAS,EAAE;MACxC,OAAOC,wBAAwB;IACnC;IACA,MAAMM,sBAAsB,GAAG7D,0BAA0B,CAACwB,QAAQ,CAACnB,MAAM,EAAEC,KAAK,EAAEC,UAAU,EAAE8B,EAAE,EAAEoB,kBAAkB,CAAC;IACrH,IAAII,sBAAsB,KAAKP,SAAS,EAAE;MACtC,OAAOO,sBAAsB;IACjC;IACA,MAAMC,gCAAgC,GAAGlE,gCAAgC,CAAC4B,QAAQ,CAACI,qBAAqB,EAAEvB,MAAM,EAAEC,KAAK,EAAEC,UAAU,EAAE8B,EAAE,EAAEoB,kBAAkB,CAAC;IAC5J,IAAIK,gCAAgC,KAAKR,SAAS,EAAE;MAChD,OAAOQ,gCAAgC;IAC3C;IACA,OAAO/D,4BAA4B,CAACyB,QAAQ,CAACI,qBAAqB,EAAErB,UAAU,EAAE8B,EAAE,CAAC;EACvF;EACA,OAAO0B,uBAAuBA,CAACnC,qBAAqB,EAAEvB,MAAM,EAAEC,KAAK,EAAEC,UAAU,EAAEyD,GAAG,EAAE;IAClF,OAAO9D,gCAAgC,CAACsB,QAAQ,CAACI,qBAAqB,EAAErB,UAAU,EAAEyD,GAAG,CAAC;EAC5F;AACJ;AACA,OAAO,MAAMC,kBAAkB,CAAC;EAC5BC,WAAWA,CAAC3B,WAAW,EAAEI,qBAAqB,EAAEC,mBAAmB,EAAET,YAAY,EAAEgC,sBAAsB,EAAEC,oBAAoB,EAAE;IAC7H,IAAI,CAAC7B,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACI,qBAAqB,GAAGA,qBAAqB;IAClD,IAAI,CAACC,mBAAmB,GAAGA,mBAAmB;IAC9C,IAAI,CAACT,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACgC,sBAAsB,GAAGA,sBAAsB;IACpD,IAAI,CAACC,oBAAoB,GAAGA,oBAAoB;EACpD;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}