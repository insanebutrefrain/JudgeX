{"ast":null,"code":"var _TextAreaState;\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { Range } from '../../common/core/range.js';\nexport const _debugComposition = false;\nexport class TextAreaState {\n  constructor(value, /** the offset where selection starts inside `value` */\n  selectionStart, /** the offset where selection ends inside `value` */\n  selectionEnd, /** the editor range in the view coordinate system that matches the selection inside `value` */\n  selection, /** the visible line count (wrapped, not necessarily matching \\n characters) for the text in `value` before `selectionStart` */\n  newlineCountBeforeSelection) {\n    this.value = value;\n    this.selectionStart = selectionStart;\n    this.selectionEnd = selectionEnd;\n    this.selection = selection;\n    this.newlineCountBeforeSelection = newlineCountBeforeSelection;\n  }\n  toString() {\n    return `[ <${this.value}>, selectionStart: ${this.selectionStart}, selectionEnd: ${this.selectionEnd}]`;\n  }\n  static readFromTextArea(textArea, previousState) {\n    const value = textArea.getValue();\n    const selectionStart = textArea.getSelectionStart();\n    const selectionEnd = textArea.getSelectionEnd();\n    let newlineCountBeforeSelection = undefined;\n    if (previousState) {\n      const valueBeforeSelectionStart = value.substring(0, selectionStart);\n      const previousValueBeforeSelectionStart = previousState.value.substring(0, previousState.selectionStart);\n      if (valueBeforeSelectionStart === previousValueBeforeSelectionStart) {\n        newlineCountBeforeSelection = previousState.newlineCountBeforeSelection;\n      }\n    }\n    return new TextAreaState(value, selectionStart, selectionEnd, null, newlineCountBeforeSelection);\n  }\n  collapseSelection() {\n    if (this.selectionStart === this.value.length) {\n      return this;\n    }\n    return new TextAreaState(this.value, this.value.length, this.value.length, null, undefined);\n  }\n  writeToTextArea(reason, textArea, select) {\n    if (_debugComposition) {\n      console.log(`writeToTextArea ${reason}: ${this.toString()}`);\n    }\n    textArea.setValue(reason, this.value);\n    if (select) {\n      textArea.setSelectionRange(reason, this.selectionStart, this.selectionEnd);\n    }\n  }\n  deduceEditorPosition(offset) {\n    if (offset <= this.selectionStart) {\n      const str = this.value.substring(offset, this.selectionStart);\n      return this._finishDeduceEditorPosition(this.selection?.getStartPosition() ?? null, str, -1);\n    }\n    if (offset >= this.selectionEnd) {\n      const str = this.value.substring(this.selectionEnd, offset);\n      return this._finishDeduceEditorPosition(this.selection?.getEndPosition() ?? null, str, 1);\n    }\n    const str1 = this.value.substring(this.selectionStart, offset);\n    if (str1.indexOf(String.fromCharCode(8230)) === -1) {\n      return this._finishDeduceEditorPosition(this.selection?.getStartPosition() ?? null, str1, 1);\n    }\n    const str2 = this.value.substring(offset, this.selectionEnd);\n    return this._finishDeduceEditorPosition(this.selection?.getEndPosition() ?? null, str2, -1);\n  }\n  _finishDeduceEditorPosition(anchor, deltaText, signum) {\n    let lineFeedCnt = 0;\n    let lastLineFeedIndex = -1;\n    while ((lastLineFeedIndex = deltaText.indexOf('\\n', lastLineFeedIndex + 1)) !== -1) {\n      lineFeedCnt++;\n    }\n    return [anchor, signum * deltaText.length, lineFeedCnt];\n  }\n  static deduceInput(previousState, currentState, couldBeEmojiInput) {\n    if (!previousState) {\n      // This is the EMPTY state\n      return {\n        text: '',\n        replacePrevCharCnt: 0,\n        replaceNextCharCnt: 0,\n        positionDelta: 0\n      };\n    }\n    if (_debugComposition) {\n      console.log('------------------------deduceInput');\n      console.log(`PREVIOUS STATE: ${previousState.toString()}`);\n      console.log(`CURRENT STATE: ${currentState.toString()}`);\n    }\n    const prefixLength = Math.min(strings.commonPrefixLength(previousState.value, currentState.value), previousState.selectionStart, currentState.selectionStart);\n    const suffixLength = Math.min(strings.commonSuffixLength(previousState.value, currentState.value), previousState.value.length - previousState.selectionEnd, currentState.value.length - currentState.selectionEnd);\n    const previousValue = previousState.value.substring(prefixLength, previousState.value.length - suffixLength);\n    const currentValue = currentState.value.substring(prefixLength, currentState.value.length - suffixLength);\n    const previousSelectionStart = previousState.selectionStart - prefixLength;\n    const previousSelectionEnd = previousState.selectionEnd - prefixLength;\n    const currentSelectionStart = currentState.selectionStart - prefixLength;\n    const currentSelectionEnd = currentState.selectionEnd - prefixLength;\n    if (_debugComposition) {\n      console.log(`AFTER DIFFING PREVIOUS STATE: <${previousValue}>, selectionStart: ${previousSelectionStart}, selectionEnd: ${previousSelectionEnd}`);\n      console.log(`AFTER DIFFING CURRENT STATE: <${currentValue}>, selectionStart: ${currentSelectionStart}, selectionEnd: ${currentSelectionEnd}`);\n    }\n    if (currentSelectionStart === currentSelectionEnd) {\n      // no current selection\n      const replacePreviousCharacters = previousState.selectionStart - prefixLength;\n      if (_debugComposition) {\n        console.log(`REMOVE PREVIOUS: ${replacePreviousCharacters} chars`);\n      }\n      return {\n        text: currentValue,\n        replacePrevCharCnt: replacePreviousCharacters,\n        replaceNextCharCnt: 0,\n        positionDelta: 0\n      };\n    }\n    // there is a current selection => composition case\n    const replacePreviousCharacters = previousSelectionEnd - previousSelectionStart;\n    return {\n      text: currentValue,\n      replacePrevCharCnt: replacePreviousCharacters,\n      replaceNextCharCnt: 0,\n      positionDelta: 0\n    };\n  }\n  static deduceAndroidCompositionInput(previousState, currentState) {\n    if (!previousState) {\n      // This is the EMPTY state\n      return {\n        text: '',\n        replacePrevCharCnt: 0,\n        replaceNextCharCnt: 0,\n        positionDelta: 0\n      };\n    }\n    if (_debugComposition) {\n      console.log('------------------------deduceAndroidCompositionInput');\n      console.log(`PREVIOUS STATE: ${previousState.toString()}`);\n      console.log(`CURRENT STATE: ${currentState.toString()}`);\n    }\n    if (previousState.value === currentState.value) {\n      return {\n        text: '',\n        replacePrevCharCnt: 0,\n        replaceNextCharCnt: 0,\n        positionDelta: currentState.selectionEnd - previousState.selectionEnd\n      };\n    }\n    const prefixLength = Math.min(strings.commonPrefixLength(previousState.value, currentState.value), previousState.selectionEnd);\n    const suffixLength = Math.min(strings.commonSuffixLength(previousState.value, currentState.value), previousState.value.length - previousState.selectionEnd);\n    const previousValue = previousState.value.substring(prefixLength, previousState.value.length - suffixLength);\n    const currentValue = currentState.value.substring(prefixLength, currentState.value.length - suffixLength);\n    const previousSelectionStart = previousState.selectionStart - prefixLength;\n    const previousSelectionEnd = previousState.selectionEnd - prefixLength;\n    const currentSelectionStart = currentState.selectionStart - prefixLength;\n    const currentSelectionEnd = currentState.selectionEnd - prefixLength;\n    if (_debugComposition) {\n      console.log(`AFTER DIFFING PREVIOUS STATE: <${previousValue}>, selectionStart: ${previousSelectionStart}, selectionEnd: ${previousSelectionEnd}`);\n      console.log(`AFTER DIFFING CURRENT STATE: <${currentValue}>, selectionStart: ${currentSelectionStart}, selectionEnd: ${currentSelectionEnd}`);\n    }\n    return {\n      text: currentValue,\n      replacePrevCharCnt: previousSelectionEnd,\n      replaceNextCharCnt: previousValue.length - previousSelectionEnd,\n      positionDelta: currentSelectionEnd - currentValue.length\n    };\n  }\n}\n_TextAreaState = TextAreaState;\n_TextAreaState.EMPTY = new _TextAreaState('', 0, 0, null, undefined);\nexport class PagedScreenReaderStrategy {\n  static _getPageOfLine(lineNumber, linesPerPage) {\n    return Math.floor((lineNumber - 1) / linesPerPage);\n  }\n  static _getRangeForPage(page, linesPerPage) {\n    const offset = page * linesPerPage;\n    const startLineNumber = offset + 1;\n    const endLineNumber = offset + linesPerPage;\n    return new Range(startLineNumber, 1, endLineNumber + 1, 1);\n  }\n  static fromEditorSelection(model, selection, linesPerPage, trimLongText) {\n    // Chromium handles very poorly text even of a few thousand chars\n    // Cut text to avoid stalling the entire UI\n    const LIMIT_CHARS = 500;\n    const selectionStartPage = PagedScreenReaderStrategy._getPageOfLine(selection.startLineNumber, linesPerPage);\n    const selectionStartPageRange = PagedScreenReaderStrategy._getRangeForPage(selectionStartPage, linesPerPage);\n    const selectionEndPage = PagedScreenReaderStrategy._getPageOfLine(selection.endLineNumber, linesPerPage);\n    const selectionEndPageRange = PagedScreenReaderStrategy._getRangeForPage(selectionEndPage, linesPerPage);\n    let pretextRange = selectionStartPageRange.intersectRanges(new Range(1, 1, selection.startLineNumber, selection.startColumn));\n    if (trimLongText && model.getValueLengthInRange(pretextRange, 1 /* EndOfLinePreference.LF */) > LIMIT_CHARS) {\n      const pretextStart = model.modifyPosition(pretextRange.getEndPosition(), -LIMIT_CHARS);\n      pretextRange = Range.fromPositions(pretextStart, pretextRange.getEndPosition());\n    }\n    const pretext = model.getValueInRange(pretextRange, 1 /* EndOfLinePreference.LF */);\n    const lastLine = model.getLineCount();\n    const lastLineMaxColumn = model.getLineMaxColumn(lastLine);\n    let posttextRange = selectionEndPageRange.intersectRanges(new Range(selection.endLineNumber, selection.endColumn, lastLine, lastLineMaxColumn));\n    if (trimLongText && model.getValueLengthInRange(posttextRange, 1 /* EndOfLinePreference.LF */) > LIMIT_CHARS) {\n      const posttextEnd = model.modifyPosition(posttextRange.getStartPosition(), LIMIT_CHARS);\n      posttextRange = Range.fromPositions(posttextRange.getStartPosition(), posttextEnd);\n    }\n    const posttext = model.getValueInRange(posttextRange, 1 /* EndOfLinePreference.LF */);\n    let text;\n    if (selectionStartPage === selectionEndPage || selectionStartPage + 1 === selectionEndPage) {\n      // take full selection\n      text = model.getValueInRange(selection, 1 /* EndOfLinePreference.LF */);\n    } else {\n      const selectionRange1 = selectionStartPageRange.intersectRanges(selection);\n      const selectionRange2 = selectionEndPageRange.intersectRanges(selection);\n      text = model.getValueInRange(selectionRange1, 1 /* EndOfLinePreference.LF */) + String.fromCharCode(8230) + model.getValueInRange(selectionRange2, 1 /* EndOfLinePreference.LF */);\n    }\n    if (trimLongText && text.length > 2 * LIMIT_CHARS) {\n      text = text.substring(0, LIMIT_CHARS) + String.fromCharCode(8230) + text.substring(text.length - LIMIT_CHARS, text.length);\n    }\n    return new TextAreaState(pretext + text + posttext, pretext.length, pretext.length + text.length, selection, pretextRange.endLineNumber - pretextRange.startLineNumber);\n  }\n}","map":{"version":3,"names":["strings","Range","_debugComposition","TextAreaState","constructor","value","selectionStart","selectionEnd","selection","newlineCountBeforeSelection","toString","readFromTextArea","textArea","previousState","getValue","getSelectionStart","getSelectionEnd","undefined","valueBeforeSelectionStart","substring","previousValueBeforeSelectionStart","collapseSelection","length","writeToTextArea","reason","select","console","log","setValue","setSelectionRange","deduceEditorPosition","offset","str","_finishDeduceEditorPosition","getStartPosition","getEndPosition","str1","indexOf","String","fromCharCode","str2","anchor","deltaText","signum","lineFeedCnt","lastLineFeedIndex","deduceInput","currentState","couldBeEmojiInput","text","replacePrevCharCnt","replaceNextCharCnt","positionDelta","prefixLength","Math","min","commonPrefixLength","suffixLength","commonSuffixLength","previousValue","currentValue","previousSelectionStart","previousSelectionEnd","currentSelectionStart","currentSelectionEnd","replacePreviousCharacters","deduceAndroidCompositionInput","_TextAreaState","EMPTY","PagedScreenReaderStrategy","_getPageOfLine","lineNumber","linesPerPage","floor","_getRangeForPage","page","startLineNumber","endLineNumber","fromEditorSelection","model","trimLongText","LIMIT_CHARS","selectionStartPage","selectionStartPageRange","selectionEndPage","selectionEndPageRange","pretextRange","intersectRanges","startColumn","getValueLengthInRange","pretextStart","modifyPosition","fromPositions","pretext","getValueInRange","lastLine","getLineCount","lastLineMaxColumn","getLineMaxColumn","posttextRange","endColumn","posttextEnd","posttext","selectionRange1","selectionRange2"],"sources":["P:/WebStorm/judgex_front/node_modules/monaco-editor/esm/vs/editor/browser/controller/textAreaState.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { Range } from '../../common/core/range.js';\nexport const _debugComposition = false;\nexport class TextAreaState {\n    static { this.EMPTY = new TextAreaState('', 0, 0, null, undefined); }\n    constructor(value, \n    /** the offset where selection starts inside `value` */\n    selectionStart, \n    /** the offset where selection ends inside `value` */\n    selectionEnd, \n    /** the editor range in the view coordinate system that matches the selection inside `value` */\n    selection, \n    /** the visible line count (wrapped, not necessarily matching \\n characters) for the text in `value` before `selectionStart` */\n    newlineCountBeforeSelection) {\n        this.value = value;\n        this.selectionStart = selectionStart;\n        this.selectionEnd = selectionEnd;\n        this.selection = selection;\n        this.newlineCountBeforeSelection = newlineCountBeforeSelection;\n    }\n    toString() {\n        return `[ <${this.value}>, selectionStart: ${this.selectionStart}, selectionEnd: ${this.selectionEnd}]`;\n    }\n    static readFromTextArea(textArea, previousState) {\n        const value = textArea.getValue();\n        const selectionStart = textArea.getSelectionStart();\n        const selectionEnd = textArea.getSelectionEnd();\n        let newlineCountBeforeSelection = undefined;\n        if (previousState) {\n            const valueBeforeSelectionStart = value.substring(0, selectionStart);\n            const previousValueBeforeSelectionStart = previousState.value.substring(0, previousState.selectionStart);\n            if (valueBeforeSelectionStart === previousValueBeforeSelectionStart) {\n                newlineCountBeforeSelection = previousState.newlineCountBeforeSelection;\n            }\n        }\n        return new TextAreaState(value, selectionStart, selectionEnd, null, newlineCountBeforeSelection);\n    }\n    collapseSelection() {\n        if (this.selectionStart === this.value.length) {\n            return this;\n        }\n        return new TextAreaState(this.value, this.value.length, this.value.length, null, undefined);\n    }\n    writeToTextArea(reason, textArea, select) {\n        if (_debugComposition) {\n            console.log(`writeToTextArea ${reason}: ${this.toString()}`);\n        }\n        textArea.setValue(reason, this.value);\n        if (select) {\n            textArea.setSelectionRange(reason, this.selectionStart, this.selectionEnd);\n        }\n    }\n    deduceEditorPosition(offset) {\n        if (offset <= this.selectionStart) {\n            const str = this.value.substring(offset, this.selectionStart);\n            return this._finishDeduceEditorPosition(this.selection?.getStartPosition() ?? null, str, -1);\n        }\n        if (offset >= this.selectionEnd) {\n            const str = this.value.substring(this.selectionEnd, offset);\n            return this._finishDeduceEditorPosition(this.selection?.getEndPosition() ?? null, str, 1);\n        }\n        const str1 = this.value.substring(this.selectionStart, offset);\n        if (str1.indexOf(String.fromCharCode(8230)) === -1) {\n            return this._finishDeduceEditorPosition(this.selection?.getStartPosition() ?? null, str1, 1);\n        }\n        const str2 = this.value.substring(offset, this.selectionEnd);\n        return this._finishDeduceEditorPosition(this.selection?.getEndPosition() ?? null, str2, -1);\n    }\n    _finishDeduceEditorPosition(anchor, deltaText, signum) {\n        let lineFeedCnt = 0;\n        let lastLineFeedIndex = -1;\n        while ((lastLineFeedIndex = deltaText.indexOf('\\n', lastLineFeedIndex + 1)) !== -1) {\n            lineFeedCnt++;\n        }\n        return [anchor, signum * deltaText.length, lineFeedCnt];\n    }\n    static deduceInput(previousState, currentState, couldBeEmojiInput) {\n        if (!previousState) {\n            // This is the EMPTY state\n            return {\n                text: '',\n                replacePrevCharCnt: 0,\n                replaceNextCharCnt: 0,\n                positionDelta: 0\n            };\n        }\n        if (_debugComposition) {\n            console.log('------------------------deduceInput');\n            console.log(`PREVIOUS STATE: ${previousState.toString()}`);\n            console.log(`CURRENT STATE: ${currentState.toString()}`);\n        }\n        const prefixLength = Math.min(strings.commonPrefixLength(previousState.value, currentState.value), previousState.selectionStart, currentState.selectionStart);\n        const suffixLength = Math.min(strings.commonSuffixLength(previousState.value, currentState.value), previousState.value.length - previousState.selectionEnd, currentState.value.length - currentState.selectionEnd);\n        const previousValue = previousState.value.substring(prefixLength, previousState.value.length - suffixLength);\n        const currentValue = currentState.value.substring(prefixLength, currentState.value.length - suffixLength);\n        const previousSelectionStart = previousState.selectionStart - prefixLength;\n        const previousSelectionEnd = previousState.selectionEnd - prefixLength;\n        const currentSelectionStart = currentState.selectionStart - prefixLength;\n        const currentSelectionEnd = currentState.selectionEnd - prefixLength;\n        if (_debugComposition) {\n            console.log(`AFTER DIFFING PREVIOUS STATE: <${previousValue}>, selectionStart: ${previousSelectionStart}, selectionEnd: ${previousSelectionEnd}`);\n            console.log(`AFTER DIFFING CURRENT STATE: <${currentValue}>, selectionStart: ${currentSelectionStart}, selectionEnd: ${currentSelectionEnd}`);\n        }\n        if (currentSelectionStart === currentSelectionEnd) {\n            // no current selection\n            const replacePreviousCharacters = (previousState.selectionStart - prefixLength);\n            if (_debugComposition) {\n                console.log(`REMOVE PREVIOUS: ${replacePreviousCharacters} chars`);\n            }\n            return {\n                text: currentValue,\n                replacePrevCharCnt: replacePreviousCharacters,\n                replaceNextCharCnt: 0,\n                positionDelta: 0\n            };\n        }\n        // there is a current selection => composition case\n        const replacePreviousCharacters = previousSelectionEnd - previousSelectionStart;\n        return {\n            text: currentValue,\n            replacePrevCharCnt: replacePreviousCharacters,\n            replaceNextCharCnt: 0,\n            positionDelta: 0\n        };\n    }\n    static deduceAndroidCompositionInput(previousState, currentState) {\n        if (!previousState) {\n            // This is the EMPTY state\n            return {\n                text: '',\n                replacePrevCharCnt: 0,\n                replaceNextCharCnt: 0,\n                positionDelta: 0\n            };\n        }\n        if (_debugComposition) {\n            console.log('------------------------deduceAndroidCompositionInput');\n            console.log(`PREVIOUS STATE: ${previousState.toString()}`);\n            console.log(`CURRENT STATE: ${currentState.toString()}`);\n        }\n        if (previousState.value === currentState.value) {\n            return {\n                text: '',\n                replacePrevCharCnt: 0,\n                replaceNextCharCnt: 0,\n                positionDelta: currentState.selectionEnd - previousState.selectionEnd\n            };\n        }\n        const prefixLength = Math.min(strings.commonPrefixLength(previousState.value, currentState.value), previousState.selectionEnd);\n        const suffixLength = Math.min(strings.commonSuffixLength(previousState.value, currentState.value), previousState.value.length - previousState.selectionEnd);\n        const previousValue = previousState.value.substring(prefixLength, previousState.value.length - suffixLength);\n        const currentValue = currentState.value.substring(prefixLength, currentState.value.length - suffixLength);\n        const previousSelectionStart = previousState.selectionStart - prefixLength;\n        const previousSelectionEnd = previousState.selectionEnd - prefixLength;\n        const currentSelectionStart = currentState.selectionStart - prefixLength;\n        const currentSelectionEnd = currentState.selectionEnd - prefixLength;\n        if (_debugComposition) {\n            console.log(`AFTER DIFFING PREVIOUS STATE: <${previousValue}>, selectionStart: ${previousSelectionStart}, selectionEnd: ${previousSelectionEnd}`);\n            console.log(`AFTER DIFFING CURRENT STATE: <${currentValue}>, selectionStart: ${currentSelectionStart}, selectionEnd: ${currentSelectionEnd}`);\n        }\n        return {\n            text: currentValue,\n            replacePrevCharCnt: previousSelectionEnd,\n            replaceNextCharCnt: previousValue.length - previousSelectionEnd,\n            positionDelta: currentSelectionEnd - currentValue.length\n        };\n    }\n}\nexport class PagedScreenReaderStrategy {\n    static _getPageOfLine(lineNumber, linesPerPage) {\n        return Math.floor((lineNumber - 1) / linesPerPage);\n    }\n    static _getRangeForPage(page, linesPerPage) {\n        const offset = page * linesPerPage;\n        const startLineNumber = offset + 1;\n        const endLineNumber = offset + linesPerPage;\n        return new Range(startLineNumber, 1, endLineNumber + 1, 1);\n    }\n    static fromEditorSelection(model, selection, linesPerPage, trimLongText) {\n        // Chromium handles very poorly text even of a few thousand chars\n        // Cut text to avoid stalling the entire UI\n        const LIMIT_CHARS = 500;\n        const selectionStartPage = PagedScreenReaderStrategy._getPageOfLine(selection.startLineNumber, linesPerPage);\n        const selectionStartPageRange = PagedScreenReaderStrategy._getRangeForPage(selectionStartPage, linesPerPage);\n        const selectionEndPage = PagedScreenReaderStrategy._getPageOfLine(selection.endLineNumber, linesPerPage);\n        const selectionEndPageRange = PagedScreenReaderStrategy._getRangeForPage(selectionEndPage, linesPerPage);\n        let pretextRange = selectionStartPageRange.intersectRanges(new Range(1, 1, selection.startLineNumber, selection.startColumn));\n        if (trimLongText && model.getValueLengthInRange(pretextRange, 1 /* EndOfLinePreference.LF */) > LIMIT_CHARS) {\n            const pretextStart = model.modifyPosition(pretextRange.getEndPosition(), -LIMIT_CHARS);\n            pretextRange = Range.fromPositions(pretextStart, pretextRange.getEndPosition());\n        }\n        const pretext = model.getValueInRange(pretextRange, 1 /* EndOfLinePreference.LF */);\n        const lastLine = model.getLineCount();\n        const lastLineMaxColumn = model.getLineMaxColumn(lastLine);\n        let posttextRange = selectionEndPageRange.intersectRanges(new Range(selection.endLineNumber, selection.endColumn, lastLine, lastLineMaxColumn));\n        if (trimLongText && model.getValueLengthInRange(posttextRange, 1 /* EndOfLinePreference.LF */) > LIMIT_CHARS) {\n            const posttextEnd = model.modifyPosition(posttextRange.getStartPosition(), LIMIT_CHARS);\n            posttextRange = Range.fromPositions(posttextRange.getStartPosition(), posttextEnd);\n        }\n        const posttext = model.getValueInRange(posttextRange, 1 /* EndOfLinePreference.LF */);\n        let text;\n        if (selectionStartPage === selectionEndPage || selectionStartPage + 1 === selectionEndPage) {\n            // take full selection\n            text = model.getValueInRange(selection, 1 /* EndOfLinePreference.LF */);\n        }\n        else {\n            const selectionRange1 = selectionStartPageRange.intersectRanges(selection);\n            const selectionRange2 = selectionEndPageRange.intersectRanges(selection);\n            text = (model.getValueInRange(selectionRange1, 1 /* EndOfLinePreference.LF */)\n                + String.fromCharCode(8230)\n                + model.getValueInRange(selectionRange2, 1 /* EndOfLinePreference.LF */));\n        }\n        if (trimLongText && text.length > 2 * LIMIT_CHARS) {\n            text = text.substring(0, LIMIT_CHARS) + String.fromCharCode(8230) + text.substring(text.length - LIMIT_CHARS, text.length);\n        }\n        return new TextAreaState(pretext + text + posttext, pretext.length, pretext.length + text.length, selection, pretextRange.endLineNumber - pretextRange.startLineNumber);\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}