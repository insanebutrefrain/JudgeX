{"ast":null,"code":"var _IPadShowKeyboard, _ShowKeyboardWidget;\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './iPadShowKeyboard.css';\nimport * as dom from '../../../../base/browser/dom.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { isIOS } from '../../../../base/common/platform.js';\nexport class IPadShowKeyboard extends Disposable {\n  constructor(editor) {\n    super();\n    this.editor = editor;\n    this.widget = null;\n    if (isIOS) {\n      this._register(editor.onDidChangeConfiguration(() => this.update()));\n      this.update();\n    }\n  }\n  update() {\n    const shouldHaveWidget = !this.editor.getOption(92 /* EditorOption.readOnly */);\n    if (!this.widget && shouldHaveWidget) {\n      this.widget = new ShowKeyboardWidget(this.editor);\n    } else if (this.widget && !shouldHaveWidget) {\n      this.widget.dispose();\n      this.widget = null;\n    }\n  }\n  dispose() {\n    super.dispose();\n    if (this.widget) {\n      this.widget.dispose();\n      this.widget = null;\n    }\n  }\n}\n_IPadShowKeyboard = IPadShowKeyboard;\n_IPadShowKeyboard.ID = 'editor.contrib.iPadShowKeyboard';\nclass ShowKeyboardWidget extends Disposable {\n  constructor(editor) {\n    super();\n    this.editor = editor;\n    this._domNode = document.createElement('textarea');\n    this._domNode.className = 'iPadShowKeyboard';\n    this._register(dom.addDisposableListener(this._domNode, 'touchstart', e => {\n      this.editor.focus();\n    }));\n    this._register(dom.addDisposableListener(this._domNode, 'focus', e => {\n      this.editor.focus();\n    }));\n    this.editor.addOverlayWidget(this);\n  }\n  dispose() {\n    this.editor.removeOverlayWidget(this);\n    super.dispose();\n  }\n  // ----- IOverlayWidget API\n  getId() {\n    return ShowKeyboardWidget.ID;\n  }\n  getDomNode() {\n    return this._domNode;\n  }\n  getPosition() {\n    return {\n      preference: 1 /* OverlayWidgetPositionPreference.BOTTOM_RIGHT_CORNER */\n    };\n  }\n}\n_ShowKeyboardWidget = ShowKeyboardWidget;\n_ShowKeyboardWidget.ID = 'editor.contrib.ShowKeyboardWidget';\nregisterEditorContribution(IPadShowKeyboard.ID, IPadShowKeyboard, 3 /* EditorContributionInstantiation.Eventually */);","map":{"version":3,"names":["dom","Disposable","registerEditorContribution","isIOS","IPadShowKeyboard","constructor","editor","widget","_register","onDidChangeConfiguration","update","shouldHaveWidget","getOption","ShowKeyboardWidget","dispose","_IPadShowKeyboard","ID","_domNode","document","createElement","className","addDisposableListener","e","focus","addOverlayWidget","removeOverlayWidget","getId","getDomNode","getPosition","preference","_ShowKeyboardWidget"],"sources":["P:/WebStorm/judgex_front/node_modules/monaco-editor/esm/vs/editor/standalone/browser/iPadShowKeyboard/iPadShowKeyboard.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './iPadShowKeyboard.css';\nimport * as dom from '../../../../base/browser/dom.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { isIOS } from '../../../../base/common/platform.js';\nexport class IPadShowKeyboard extends Disposable {\n    static { this.ID = 'editor.contrib.iPadShowKeyboard'; }\n    constructor(editor) {\n        super();\n        this.editor = editor;\n        this.widget = null;\n        if (isIOS) {\n            this._register(editor.onDidChangeConfiguration(() => this.update()));\n            this.update();\n        }\n    }\n    update() {\n        const shouldHaveWidget = (!this.editor.getOption(92 /* EditorOption.readOnly */));\n        if (!this.widget && shouldHaveWidget) {\n            this.widget = new ShowKeyboardWidget(this.editor);\n        }\n        else if (this.widget && !shouldHaveWidget) {\n            this.widget.dispose();\n            this.widget = null;\n        }\n    }\n    dispose() {\n        super.dispose();\n        if (this.widget) {\n            this.widget.dispose();\n            this.widget = null;\n        }\n    }\n}\nclass ShowKeyboardWidget extends Disposable {\n    static { this.ID = 'editor.contrib.ShowKeyboardWidget'; }\n    constructor(editor) {\n        super();\n        this.editor = editor;\n        this._domNode = document.createElement('textarea');\n        this._domNode.className = 'iPadShowKeyboard';\n        this._register(dom.addDisposableListener(this._domNode, 'touchstart', (e) => {\n            this.editor.focus();\n        }));\n        this._register(dom.addDisposableListener(this._domNode, 'focus', (e) => {\n            this.editor.focus();\n        }));\n        this.editor.addOverlayWidget(this);\n    }\n    dispose() {\n        this.editor.removeOverlayWidget(this);\n        super.dispose();\n    }\n    // ----- IOverlayWidget API\n    getId() {\n        return ShowKeyboardWidget.ID;\n    }\n    getDomNode() {\n        return this._domNode;\n    }\n    getPosition() {\n        return {\n            preference: 1 /* OverlayWidgetPositionPreference.BOTTOM_RIGHT_CORNER */\n        };\n    }\n}\nregisterEditorContribution(IPadShowKeyboard.ID, IPadShowKeyboard, 3 /* EditorContributionInstantiation.Eventually */);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}