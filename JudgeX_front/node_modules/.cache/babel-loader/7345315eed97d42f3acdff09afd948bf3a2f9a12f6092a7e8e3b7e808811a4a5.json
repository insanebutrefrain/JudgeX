{"ast":null,"code":"var _BaseEditorSimpleWorker;\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { stringDiff } from '../../../base/common/diff/diff.js';\nimport { Range } from '../core/range.js';\nimport { computeLinks } from '../languages/linkComputer.js';\nimport { BasicInplaceReplace } from '../languages/supports/inplaceReplaceSupport.js';\nimport { createMonacoBaseAPI } from './editorBaseApi.js';\nimport { EditorWorkerHost } from './editorWorkerHost.js';\nimport { StopWatch } from '../../../base/common/stopwatch.js';\nimport { UnicodeTextModelHighlighter } from './unicodeTextModelHighlighter.js';\nimport { linesDiffComputers } from '../diff/linesDiffComputers.js';\nimport { createProxyObject, getAllMethodNames } from '../../../base/common/objects.js';\nimport { FileAccess } from '../../../base/common/network.js';\nimport { computeDefaultDocumentColors } from '../languages/defaultDocumentColorsComputer.js';\nimport { findSectionHeaders } from './findSectionHeaders.js';\nimport { WorkerTextModelSyncServer } from './textModelSync/textModelSync.impl.js';\n// ESM-comment-begin\n// const isESM = false;\n// ESM-comment-end\n// ESM-uncomment-begin\nconst isESM = true;\n/**\n * @internal\n */\nexport class BaseEditorSimpleWorker {\n  constructor() {\n    this._workerTextModelSyncServer = new WorkerTextModelSyncServer();\n  }\n  dispose() {}\n  _getModel(uri) {\n    return this._workerTextModelSyncServer.getModel(uri);\n  }\n  _getModels() {\n    return this._workerTextModelSyncServer.getModels();\n  }\n  $acceptNewModel(data) {\n    this._workerTextModelSyncServer.$acceptNewModel(data);\n  }\n  $acceptModelChanged(uri, e) {\n    this._workerTextModelSyncServer.$acceptModelChanged(uri, e);\n  }\n  $acceptRemovedModel(uri) {\n    this._workerTextModelSyncServer.$acceptRemovedModel(uri);\n  }\n  async $computeUnicodeHighlights(url, options, range) {\n    const model = this._getModel(url);\n    if (!model) {\n      return {\n        ranges: [],\n        hasMore: false,\n        ambiguousCharacterCount: 0,\n        invisibleCharacterCount: 0,\n        nonBasicAsciiCharacterCount: 0\n      };\n    }\n    return UnicodeTextModelHighlighter.computeUnicodeHighlights(model, options, range);\n  }\n  async $findSectionHeaders(url, options) {\n    const model = this._getModel(url);\n    if (!model) {\n      return [];\n    }\n    return findSectionHeaders(model, options);\n  }\n  // ---- BEGIN diff --------------------------------------------------------------------------\n  async $computeDiff(originalUrl, modifiedUrl, options, algorithm) {\n    const original = this._getModel(originalUrl);\n    const modified = this._getModel(modifiedUrl);\n    if (!original || !modified) {\n      return null;\n    }\n    const result = EditorSimpleWorker.computeDiff(original, modified, options, algorithm);\n    return result;\n  }\n  static computeDiff(originalTextModel, modifiedTextModel, options, algorithm) {\n    const diffAlgorithm = algorithm === 'advanced' ? linesDiffComputers.getDefault() : linesDiffComputers.getLegacy();\n    const originalLines = originalTextModel.getLinesContent();\n    const modifiedLines = modifiedTextModel.getLinesContent();\n    const result = diffAlgorithm.computeDiff(originalLines, modifiedLines, options);\n    const identical = result.changes.length > 0 ? false : this._modelsAreIdentical(originalTextModel, modifiedTextModel);\n    function getLineChanges(changes) {\n      return changes.map(m => [m.original.startLineNumber, m.original.endLineNumberExclusive, m.modified.startLineNumber, m.modified.endLineNumberExclusive, m.innerChanges?.map(m => [m.originalRange.startLineNumber, m.originalRange.startColumn, m.originalRange.endLineNumber, m.originalRange.endColumn, m.modifiedRange.startLineNumber, m.modifiedRange.startColumn, m.modifiedRange.endLineNumber, m.modifiedRange.endColumn])]);\n    }\n    return {\n      identical,\n      quitEarly: result.hitTimeout,\n      changes: getLineChanges(result.changes),\n      moves: result.moves.map(m => [m.lineRangeMapping.original.startLineNumber, m.lineRangeMapping.original.endLineNumberExclusive, m.lineRangeMapping.modified.startLineNumber, m.lineRangeMapping.modified.endLineNumberExclusive, getLineChanges(m.changes)])\n    };\n  }\n  static _modelsAreIdentical(original, modified) {\n    const originalLineCount = original.getLineCount();\n    const modifiedLineCount = modified.getLineCount();\n    if (originalLineCount !== modifiedLineCount) {\n      return false;\n    }\n    for (let line = 1; line <= originalLineCount; line++) {\n      const originalLine = original.getLineContent(line);\n      const modifiedLine = modified.getLineContent(line);\n      if (originalLine !== modifiedLine) {\n        return false;\n      }\n    }\n    return true;\n  }\n  // ---- END diff --------------------------------------------------------------------------\n  // ---- BEGIN minimal edits ---------------------------------------------------------------\n\n  async $computeMoreMinimalEdits(modelUrl, edits, pretty) {\n    const model = this._getModel(modelUrl);\n    if (!model) {\n      return edits;\n    }\n    const result = [];\n    let lastEol = undefined;\n    edits = edits.slice(0).sort((a, b) => {\n      if (a.range && b.range) {\n        return Range.compareRangesUsingStarts(a.range, b.range);\n      }\n      // eol only changes should go to the end\n      const aRng = a.range ? 0 : 1;\n      const bRng = b.range ? 0 : 1;\n      return aRng - bRng;\n    });\n    // merge adjacent edits\n    let writeIndex = 0;\n    for (let readIndex = 1; readIndex < edits.length; readIndex++) {\n      if (Range.getEndPosition(edits[writeIndex].range).equals(Range.getStartPosition(edits[readIndex].range))) {\n        edits[writeIndex].range = Range.fromPositions(Range.getStartPosition(edits[writeIndex].range), Range.getEndPosition(edits[readIndex].range));\n        edits[writeIndex].text += edits[readIndex].text;\n      } else {\n        writeIndex++;\n        edits[writeIndex] = edits[readIndex];\n      }\n    }\n    edits.length = writeIndex + 1;\n    for (let {\n      range,\n      text,\n      eol\n    } of edits) {\n      if (typeof eol === 'number') {\n        lastEol = eol;\n      }\n      if (Range.isEmpty(range) && !text) {\n        // empty change\n        continue;\n      }\n      const original = model.getValueInRange(range);\n      text = text.replace(/\\r\\n|\\n|\\r/g, model.eol);\n      if (original === text) {\n        // noop\n        continue;\n      }\n      // make sure diff won't take too long\n      if (Math.max(text.length, original.length) > EditorSimpleWorker._diffLimit) {\n        result.push({\n          range,\n          text\n        });\n        continue;\n      }\n      // compute diff between original and edit.text\n      const changes = stringDiff(original, text, pretty);\n      const editOffset = model.offsetAt(Range.lift(range).getStartPosition());\n      for (const change of changes) {\n        const start = model.positionAt(editOffset + change.originalStart);\n        const end = model.positionAt(editOffset + change.originalStart + change.originalLength);\n        const newEdit = {\n          text: text.substr(change.modifiedStart, change.modifiedLength),\n          range: {\n            startLineNumber: start.lineNumber,\n            startColumn: start.column,\n            endLineNumber: end.lineNumber,\n            endColumn: end.column\n          }\n        };\n        if (model.getValueInRange(newEdit.range) !== newEdit.text) {\n          result.push(newEdit);\n        }\n      }\n    }\n    if (typeof lastEol === 'number') {\n      result.push({\n        eol: lastEol,\n        text: '',\n        range: {\n          startLineNumber: 0,\n          startColumn: 0,\n          endLineNumber: 0,\n          endColumn: 0\n        }\n      });\n    }\n    return result;\n  }\n  // ---- END minimal edits ---------------------------------------------------------------\n  async $computeLinks(modelUrl) {\n    const model = this._getModel(modelUrl);\n    if (!model) {\n      return null;\n    }\n    return computeLinks(model);\n  }\n  // --- BEGIN default document colors -----------------------------------------------------------\n  async $computeDefaultDocumentColors(modelUrl) {\n    const model = this._getModel(modelUrl);\n    if (!model) {\n      return null;\n    }\n    return computeDefaultDocumentColors(model);\n  }\n  // ---- BEGIN suggest --------------------------------------------------------------------------\n\n  async $textualSuggest(modelUrls, leadingWord, wordDef, wordDefFlags) {\n    const sw = new StopWatch();\n    const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n    const seen = new Set();\n    outer: for (const url of modelUrls) {\n      const model = this._getModel(url);\n      if (!model) {\n        continue;\n      }\n      for (const word of model.words(wordDefRegExp)) {\n        if (word === leadingWord || !isNaN(Number(word))) {\n          continue;\n        }\n        seen.add(word);\n        if (seen.size > EditorSimpleWorker._suggestionsLimit) {\n          break outer;\n        }\n      }\n    }\n    return {\n      words: Array.from(seen),\n      duration: sw.elapsed()\n    };\n  }\n  // ---- END suggest --------------------------------------------------------------------------\n  //#region -- word ranges --\n  async $computeWordRanges(modelUrl, range, wordDef, wordDefFlags) {\n    const model = this._getModel(modelUrl);\n    if (!model) {\n      return Object.create(null);\n    }\n    const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n    const result = Object.create(null);\n    for (let line = range.startLineNumber; line < range.endLineNumber; line++) {\n      const words = model.getLineWords(line, wordDefRegExp);\n      for (const word of words) {\n        if (!isNaN(Number(word.word))) {\n          continue;\n        }\n        let array = result[word.word];\n        if (!array) {\n          array = [];\n          result[word.word] = array;\n        }\n        array.push({\n          startLineNumber: line,\n          startColumn: word.startColumn,\n          endLineNumber: line,\n          endColumn: word.endColumn\n        });\n      }\n    }\n    return result;\n  }\n  //#endregion\n  async $navigateValueSet(modelUrl, range, up, wordDef, wordDefFlags) {\n    const model = this._getModel(modelUrl);\n    if (!model) {\n      return null;\n    }\n    const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n    if (range.startColumn === range.endColumn) {\n      range = {\n        startLineNumber: range.startLineNumber,\n        startColumn: range.startColumn,\n        endLineNumber: range.endLineNumber,\n        endColumn: range.endColumn + 1\n      };\n    }\n    const selectionText = model.getValueInRange(range);\n    const wordRange = model.getWordAtPosition({\n      lineNumber: range.startLineNumber,\n      column: range.startColumn\n    }, wordDefRegExp);\n    if (!wordRange) {\n      return null;\n    }\n    const word = model.getValueInRange(wordRange);\n    const result = BasicInplaceReplace.INSTANCE.navigateValueSet(range, selectionText, wordRange, word, up);\n    return result;\n  }\n}\n/**\n * @internal\n */\n_BaseEditorSimpleWorker = BaseEditorSimpleWorker;\n_BaseEditorSimpleWorker._diffLimit = 100000;\n_BaseEditorSimpleWorker._suggestionsLimit = 10000;\nexport class EditorSimpleWorker extends BaseEditorSimpleWorker {\n  constructor(_host, _foreignModuleFactory) {\n    super();\n    this._host = _host;\n    this._foreignModuleFactory = _foreignModuleFactory;\n    this._foreignModule = null;\n  }\n  async $ping() {\n    return 'pong';\n  }\n  // ---- BEGIN foreign module support --------------------------------------------------------------------------\n  $loadForeignModule(moduleId, createData, foreignHostMethods) {\n    const proxyMethodRequest = (method, args) => {\n      return this._host.$fhr(method, args);\n    };\n    const foreignHost = createProxyObject(foreignHostMethods, proxyMethodRequest);\n    const ctx = {\n      host: foreignHost,\n      getMirrorModels: () => {\n        return this._getModels();\n      }\n    };\n    if (this._foreignModuleFactory) {\n      this._foreignModule = this._foreignModuleFactory(ctx, createData);\n      // static foreing module\n      return Promise.resolve(getAllMethodNames(this._foreignModule));\n    }\n    return new Promise((resolve, reject) => {\n      const onModuleCallback = foreignModule => {\n        this._foreignModule = foreignModule.create(ctx, createData);\n        resolve(getAllMethodNames(this._foreignModule));\n      };\n      if (!isESM) {\n        require([`${moduleId}`], onModuleCallback, reject);\n      } else {\n        const url = FileAccess.asBrowserUri(`${moduleId}.js`).toString(true);\n        import(`${url}`).then(onModuleCallback).catch(reject);\n      }\n    });\n  }\n  // foreign method request\n  $fmr(method, args) {\n    if (!this._foreignModule || typeof this._foreignModule[method] !== 'function') {\n      return Promise.reject(new Error('Missing requestHandler or method: ' + method));\n    }\n    try {\n      return Promise.resolve(this._foreignModule[method].apply(this._foreignModule, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n}\n/**\n * Defines the worker entry point. Must be exported and named `create`.\n * @skipMangle\n * @internal\n */\nexport function create(workerServer) {\n  return new EditorSimpleWorker(EditorWorkerHost.getChannel(workerServer), null);\n}\nif (typeof importScripts === 'function') {\n  // Running in a web worker\n  globalThis.monaco = createMonacoBaseAPI();\n}","map":{"version":3,"names":["stringDiff","Range","computeLinks","BasicInplaceReplace","createMonacoBaseAPI","EditorWorkerHost","StopWatch","UnicodeTextModelHighlighter","linesDiffComputers","createProxyObject","getAllMethodNames","FileAccess","computeDefaultDocumentColors","findSectionHeaders","WorkerTextModelSyncServer","isESM","BaseEditorSimpleWorker","constructor","_workerTextModelSyncServer","dispose","_getModel","uri","getModel","_getModels","getModels","$acceptNewModel","data","$acceptModelChanged","e","$acceptRemovedModel","$computeUnicodeHighlights","url","options","range","model","ranges","hasMore","ambiguousCharacterCount","invisibleCharacterCount","nonBasicAsciiCharacterCount","computeUnicodeHighlights","$findSectionHeaders","$computeDiff","originalUrl","modifiedUrl","algorithm","original","modified","result","EditorSimpleWorker","computeDiff","originalTextModel","modifiedTextModel","diffAlgorithm","getDefault","getLegacy","originalLines","getLinesContent","modifiedLines","identical","changes","length","_modelsAreIdentical","getLineChanges","map","m","startLineNumber","endLineNumberExclusive","innerChanges","originalRange","startColumn","endLineNumber","endColumn","modifiedRange","quitEarly","hitTimeout","moves","lineRangeMapping","originalLineCount","getLineCount","modifiedLineCount","line","originalLine","getLineContent","modifiedLine","$computeMoreMinimalEdits","modelUrl","edits","pretty","lastEol","undefined","slice","sort","a","b","compareRangesUsingStarts","aRng","bRng","writeIndex","readIndex","getEndPosition","equals","getStartPosition","fromPositions","text","eol","isEmpty","getValueInRange","replace","Math","max","_diffLimit","push","editOffset","offsetAt","lift","change","start","positionAt","originalStart","end","originalLength","newEdit","substr","modifiedStart","modifiedLength","lineNumber","column","$computeLinks","$computeDefaultDocumentColors","$textualSuggest","modelUrls","leadingWord","wordDef","wordDefFlags","sw","wordDefRegExp","RegExp","seen","Set","outer","word","words","isNaN","Number","add","size","_suggestionsLimit","Array","from","duration","elapsed","$computeWordRanges","Object","create","getLineWords","array","$navigateValueSet","up","selectionText","wordRange","getWordAtPosition","INSTANCE","navigateValueSet","_BaseEditorSimpleWorker","_host","_foreignModuleFactory","_foreignModule","$ping","$loadForeignModule","moduleId","createData","foreignHostMethods","proxyMethodRequest","method","args","$fhr","foreignHost","ctx","host","getMirrorModels","Promise","resolve","reject","onModuleCallback","foreignModule","require","asBrowserUri","toString","then","catch","$fmr","Error","apply","workerServer","getChannel","importScripts","globalThis","monaco"],"sources":["P:/IDEA/JudgeX/JudgeX_front/node_modules/monaco-editor/esm/vs/editor/common/services/editorSimpleWorker.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { stringDiff } from '../../../base/common/diff/diff.js';\nimport { Range } from '../core/range.js';\nimport { computeLinks } from '../languages/linkComputer.js';\nimport { BasicInplaceReplace } from '../languages/supports/inplaceReplaceSupport.js';\nimport { createMonacoBaseAPI } from './editorBaseApi.js';\nimport { EditorWorkerHost } from './editorWorkerHost.js';\nimport { StopWatch } from '../../../base/common/stopwatch.js';\nimport { UnicodeTextModelHighlighter } from './unicodeTextModelHighlighter.js';\nimport { linesDiffComputers } from '../diff/linesDiffComputers.js';\nimport { createProxyObject, getAllMethodNames } from '../../../base/common/objects.js';\nimport { FileAccess } from '../../../base/common/network.js';\nimport { computeDefaultDocumentColors } from '../languages/defaultDocumentColorsComputer.js';\nimport { findSectionHeaders } from './findSectionHeaders.js';\nimport { WorkerTextModelSyncServer } from './textModelSync/textModelSync.impl.js';\n// ESM-comment-begin\n// const isESM = false;\n// ESM-comment-end\n// ESM-uncomment-begin\nconst isESM = true;\n/**\n * @internal\n */\nexport class BaseEditorSimpleWorker {\n    constructor() {\n        this._workerTextModelSyncServer = new WorkerTextModelSyncServer();\n    }\n    dispose() {\n    }\n    _getModel(uri) {\n        return this._workerTextModelSyncServer.getModel(uri);\n    }\n    _getModels() {\n        return this._workerTextModelSyncServer.getModels();\n    }\n    $acceptNewModel(data) {\n        this._workerTextModelSyncServer.$acceptNewModel(data);\n    }\n    $acceptModelChanged(uri, e) {\n        this._workerTextModelSyncServer.$acceptModelChanged(uri, e);\n    }\n    $acceptRemovedModel(uri) {\n        this._workerTextModelSyncServer.$acceptRemovedModel(uri);\n    }\n    async $computeUnicodeHighlights(url, options, range) {\n        const model = this._getModel(url);\n        if (!model) {\n            return { ranges: [], hasMore: false, ambiguousCharacterCount: 0, invisibleCharacterCount: 0, nonBasicAsciiCharacterCount: 0 };\n        }\n        return UnicodeTextModelHighlighter.computeUnicodeHighlights(model, options, range);\n    }\n    async $findSectionHeaders(url, options) {\n        const model = this._getModel(url);\n        if (!model) {\n            return [];\n        }\n        return findSectionHeaders(model, options);\n    }\n    // ---- BEGIN diff --------------------------------------------------------------------------\n    async $computeDiff(originalUrl, modifiedUrl, options, algorithm) {\n        const original = this._getModel(originalUrl);\n        const modified = this._getModel(modifiedUrl);\n        if (!original || !modified) {\n            return null;\n        }\n        const result = EditorSimpleWorker.computeDiff(original, modified, options, algorithm);\n        return result;\n    }\n    static computeDiff(originalTextModel, modifiedTextModel, options, algorithm) {\n        const diffAlgorithm = algorithm === 'advanced' ? linesDiffComputers.getDefault() : linesDiffComputers.getLegacy();\n        const originalLines = originalTextModel.getLinesContent();\n        const modifiedLines = modifiedTextModel.getLinesContent();\n        const result = diffAlgorithm.computeDiff(originalLines, modifiedLines, options);\n        const identical = (result.changes.length > 0 ? false : this._modelsAreIdentical(originalTextModel, modifiedTextModel));\n        function getLineChanges(changes) {\n            return changes.map(m => ([m.original.startLineNumber, m.original.endLineNumberExclusive, m.modified.startLineNumber, m.modified.endLineNumberExclusive, m.innerChanges?.map(m => [\n                    m.originalRange.startLineNumber,\n                    m.originalRange.startColumn,\n                    m.originalRange.endLineNumber,\n                    m.originalRange.endColumn,\n                    m.modifiedRange.startLineNumber,\n                    m.modifiedRange.startColumn,\n                    m.modifiedRange.endLineNumber,\n                    m.modifiedRange.endColumn,\n                ])]));\n        }\n        return {\n            identical,\n            quitEarly: result.hitTimeout,\n            changes: getLineChanges(result.changes),\n            moves: result.moves.map(m => ([\n                m.lineRangeMapping.original.startLineNumber,\n                m.lineRangeMapping.original.endLineNumberExclusive,\n                m.lineRangeMapping.modified.startLineNumber,\n                m.lineRangeMapping.modified.endLineNumberExclusive,\n                getLineChanges(m.changes)\n            ])),\n        };\n    }\n    static _modelsAreIdentical(original, modified) {\n        const originalLineCount = original.getLineCount();\n        const modifiedLineCount = modified.getLineCount();\n        if (originalLineCount !== modifiedLineCount) {\n            return false;\n        }\n        for (let line = 1; line <= originalLineCount; line++) {\n            const originalLine = original.getLineContent(line);\n            const modifiedLine = modified.getLineContent(line);\n            if (originalLine !== modifiedLine) {\n                return false;\n            }\n        }\n        return true;\n    }\n    // ---- END diff --------------------------------------------------------------------------\n    // ---- BEGIN minimal edits ---------------------------------------------------------------\n    static { this._diffLimit = 100000; }\n    async $computeMoreMinimalEdits(modelUrl, edits, pretty) {\n        const model = this._getModel(modelUrl);\n        if (!model) {\n            return edits;\n        }\n        const result = [];\n        let lastEol = undefined;\n        edits = edits.slice(0).sort((a, b) => {\n            if (a.range && b.range) {\n                return Range.compareRangesUsingStarts(a.range, b.range);\n            }\n            // eol only changes should go to the end\n            const aRng = a.range ? 0 : 1;\n            const bRng = b.range ? 0 : 1;\n            return aRng - bRng;\n        });\n        // merge adjacent edits\n        let writeIndex = 0;\n        for (let readIndex = 1; readIndex < edits.length; readIndex++) {\n            if (Range.getEndPosition(edits[writeIndex].range).equals(Range.getStartPosition(edits[readIndex].range))) {\n                edits[writeIndex].range = Range.fromPositions(Range.getStartPosition(edits[writeIndex].range), Range.getEndPosition(edits[readIndex].range));\n                edits[writeIndex].text += edits[readIndex].text;\n            }\n            else {\n                writeIndex++;\n                edits[writeIndex] = edits[readIndex];\n            }\n        }\n        edits.length = writeIndex + 1;\n        for (let { range, text, eol } of edits) {\n            if (typeof eol === 'number') {\n                lastEol = eol;\n            }\n            if (Range.isEmpty(range) && !text) {\n                // empty change\n                continue;\n            }\n            const original = model.getValueInRange(range);\n            text = text.replace(/\\r\\n|\\n|\\r/g, model.eol);\n            if (original === text) {\n                // noop\n                continue;\n            }\n            // make sure diff won't take too long\n            if (Math.max(text.length, original.length) > EditorSimpleWorker._diffLimit) {\n                result.push({ range, text });\n                continue;\n            }\n            // compute diff between original and edit.text\n            const changes = stringDiff(original, text, pretty);\n            const editOffset = model.offsetAt(Range.lift(range).getStartPosition());\n            for (const change of changes) {\n                const start = model.positionAt(editOffset + change.originalStart);\n                const end = model.positionAt(editOffset + change.originalStart + change.originalLength);\n                const newEdit = {\n                    text: text.substr(change.modifiedStart, change.modifiedLength),\n                    range: { startLineNumber: start.lineNumber, startColumn: start.column, endLineNumber: end.lineNumber, endColumn: end.column }\n                };\n                if (model.getValueInRange(newEdit.range) !== newEdit.text) {\n                    result.push(newEdit);\n                }\n            }\n        }\n        if (typeof lastEol === 'number') {\n            result.push({ eol: lastEol, text: '', range: { startLineNumber: 0, startColumn: 0, endLineNumber: 0, endColumn: 0 } });\n        }\n        return result;\n    }\n    // ---- END minimal edits ---------------------------------------------------------------\n    async $computeLinks(modelUrl) {\n        const model = this._getModel(modelUrl);\n        if (!model) {\n            return null;\n        }\n        return computeLinks(model);\n    }\n    // --- BEGIN default document colors -----------------------------------------------------------\n    async $computeDefaultDocumentColors(modelUrl) {\n        const model = this._getModel(modelUrl);\n        if (!model) {\n            return null;\n        }\n        return computeDefaultDocumentColors(model);\n    }\n    // ---- BEGIN suggest --------------------------------------------------------------------------\n    static { this._suggestionsLimit = 10000; }\n    async $textualSuggest(modelUrls, leadingWord, wordDef, wordDefFlags) {\n        const sw = new StopWatch();\n        const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n        const seen = new Set();\n        outer: for (const url of modelUrls) {\n            const model = this._getModel(url);\n            if (!model) {\n                continue;\n            }\n            for (const word of model.words(wordDefRegExp)) {\n                if (word === leadingWord || !isNaN(Number(word))) {\n                    continue;\n                }\n                seen.add(word);\n                if (seen.size > EditorSimpleWorker._suggestionsLimit) {\n                    break outer;\n                }\n            }\n        }\n        return { words: Array.from(seen), duration: sw.elapsed() };\n    }\n    // ---- END suggest --------------------------------------------------------------------------\n    //#region -- word ranges --\n    async $computeWordRanges(modelUrl, range, wordDef, wordDefFlags) {\n        const model = this._getModel(modelUrl);\n        if (!model) {\n            return Object.create(null);\n        }\n        const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n        const result = Object.create(null);\n        for (let line = range.startLineNumber; line < range.endLineNumber; line++) {\n            const words = model.getLineWords(line, wordDefRegExp);\n            for (const word of words) {\n                if (!isNaN(Number(word.word))) {\n                    continue;\n                }\n                let array = result[word.word];\n                if (!array) {\n                    array = [];\n                    result[word.word] = array;\n                }\n                array.push({\n                    startLineNumber: line,\n                    startColumn: word.startColumn,\n                    endLineNumber: line,\n                    endColumn: word.endColumn\n                });\n            }\n        }\n        return result;\n    }\n    //#endregion\n    async $navigateValueSet(modelUrl, range, up, wordDef, wordDefFlags) {\n        const model = this._getModel(modelUrl);\n        if (!model) {\n            return null;\n        }\n        const wordDefRegExp = new RegExp(wordDef, wordDefFlags);\n        if (range.startColumn === range.endColumn) {\n            range = {\n                startLineNumber: range.startLineNumber,\n                startColumn: range.startColumn,\n                endLineNumber: range.endLineNumber,\n                endColumn: range.endColumn + 1\n            };\n        }\n        const selectionText = model.getValueInRange(range);\n        const wordRange = model.getWordAtPosition({ lineNumber: range.startLineNumber, column: range.startColumn }, wordDefRegExp);\n        if (!wordRange) {\n            return null;\n        }\n        const word = model.getValueInRange(wordRange);\n        const result = BasicInplaceReplace.INSTANCE.navigateValueSet(range, selectionText, wordRange, word, up);\n        return result;\n    }\n}\n/**\n * @internal\n */\nexport class EditorSimpleWorker extends BaseEditorSimpleWorker {\n    constructor(_host, _foreignModuleFactory) {\n        super();\n        this._host = _host;\n        this._foreignModuleFactory = _foreignModuleFactory;\n        this._foreignModule = null;\n    }\n    async $ping() {\n        return 'pong';\n    }\n    // ---- BEGIN foreign module support --------------------------------------------------------------------------\n    $loadForeignModule(moduleId, createData, foreignHostMethods) {\n        const proxyMethodRequest = (method, args) => {\n            return this._host.$fhr(method, args);\n        };\n        const foreignHost = createProxyObject(foreignHostMethods, proxyMethodRequest);\n        const ctx = {\n            host: foreignHost,\n            getMirrorModels: () => {\n                return this._getModels();\n            }\n        };\n        if (this._foreignModuleFactory) {\n            this._foreignModule = this._foreignModuleFactory(ctx, createData);\n            // static foreing module\n            return Promise.resolve(getAllMethodNames(this._foreignModule));\n        }\n        return new Promise((resolve, reject) => {\n            const onModuleCallback = (foreignModule) => {\n                this._foreignModule = foreignModule.create(ctx, createData);\n                resolve(getAllMethodNames(this._foreignModule));\n            };\n            if (!isESM) {\n                require([`${moduleId}`], onModuleCallback, reject);\n            }\n            else {\n                const url = FileAccess.asBrowserUri(`${moduleId}.js`).toString(true);\n                import(`${url}`).then(onModuleCallback).catch(reject);\n            }\n        });\n    }\n    // foreign method request\n    $fmr(method, args) {\n        if (!this._foreignModule || typeof this._foreignModule[method] !== 'function') {\n            return Promise.reject(new Error('Missing requestHandler or method: ' + method));\n        }\n        try {\n            return Promise.resolve(this._foreignModule[method].apply(this._foreignModule, args));\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    }\n}\n/**\n * Defines the worker entry point. Must be exported and named `create`.\n * @skipMangle\n * @internal\n */\nexport function create(workerServer) {\n    return new EditorSimpleWorker(EditorWorkerHost.getChannel(workerServer), null);\n}\nif (typeof importScripts === 'function') {\n    // Running in a web worker\n    globalThis.monaco = createMonacoBaseAPI();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}