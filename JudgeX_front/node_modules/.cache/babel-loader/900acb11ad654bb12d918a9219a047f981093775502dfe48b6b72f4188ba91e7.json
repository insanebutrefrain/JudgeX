{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { onUnexpectedError, transformErrorForSerialization } from '../errors.js';\nimport { Emitter } from '../event.js';\nimport { Disposable } from '../lifecycle.js';\nimport { FileAccess } from '../network.js';\nimport { isWeb } from '../platform.js';\nimport * as strings from '../strings.js';\n// ESM-comment-begin\n// const isESM = false;\n// ESM-comment-end\n// ESM-uncomment-begin\nconst isESM = true;\n// ESM-uncomment-end\nconst DEFAULT_CHANNEL = 'default';\nconst INITIALIZE = '$initialize';\nlet webWorkerWarningLogged = false;\nexport function logOnceWebWorkerWarning(err) {\n  if (!isWeb) {\n    // running tests\n    return;\n  }\n  if (!webWorkerWarningLogged) {\n    webWorkerWarningLogged = true;\n    console.warn('Could not create web worker(s). Falling back to loading web worker code in main thread, which might cause UI freezes. Please see https://github.com/microsoft/monaco-editor#faq');\n  }\n  console.warn(err.message);\n}\nclass RequestMessage {\n  constructor(vsWorker, req, channel, method, args) {\n    this.vsWorker = vsWorker;\n    this.req = req;\n    this.channel = channel;\n    this.method = method;\n    this.args = args;\n    this.type = 0 /* MessageType.Request */;\n  }\n}\nclass ReplyMessage {\n  constructor(vsWorker, seq, res, err) {\n    this.vsWorker = vsWorker;\n    this.seq = seq;\n    this.res = res;\n    this.err = err;\n    this.type = 1 /* MessageType.Reply */;\n  }\n}\nclass SubscribeEventMessage {\n  constructor(vsWorker, req, channel, eventName, arg) {\n    this.vsWorker = vsWorker;\n    this.req = req;\n    this.channel = channel;\n    this.eventName = eventName;\n    this.arg = arg;\n    this.type = 2 /* MessageType.SubscribeEvent */;\n  }\n}\nclass EventMessage {\n  constructor(vsWorker, req, event) {\n    this.vsWorker = vsWorker;\n    this.req = req;\n    this.event = event;\n    this.type = 3 /* MessageType.Event */;\n  }\n}\nclass UnsubscribeEventMessage {\n  constructor(vsWorker, req) {\n    this.vsWorker = vsWorker;\n    this.req = req;\n    this.type = 4 /* MessageType.UnsubscribeEvent */;\n  }\n}\nclass SimpleWorkerProtocol {\n  constructor(handler) {\n    this._workerId = -1;\n    this._handler = handler;\n    this._lastSentReq = 0;\n    this._pendingReplies = Object.create(null);\n    this._pendingEmitters = new Map();\n    this._pendingEvents = new Map();\n  }\n  setWorkerId(workerId) {\n    this._workerId = workerId;\n  }\n  sendMessage(channel, method, args) {\n    const req = String(++this._lastSentReq);\n    return new Promise((resolve, reject) => {\n      this._pendingReplies[req] = {\n        resolve: resolve,\n        reject: reject\n      };\n      this._send(new RequestMessage(this._workerId, req, channel, method, args));\n    });\n  }\n  listen(channel, eventName, arg) {\n    let req = null;\n    const emitter = new Emitter({\n      onWillAddFirstListener: () => {\n        req = String(++this._lastSentReq);\n        this._pendingEmitters.set(req, emitter);\n        this._send(new SubscribeEventMessage(this._workerId, req, channel, eventName, arg));\n      },\n      onDidRemoveLastListener: () => {\n        this._pendingEmitters.delete(req);\n        this._send(new UnsubscribeEventMessage(this._workerId, req));\n        req = null;\n      }\n    });\n    return emitter.event;\n  }\n  handleMessage(message) {\n    if (!message || !message.vsWorker) {\n      return;\n    }\n    if (this._workerId !== -1 && message.vsWorker !== this._workerId) {\n      return;\n    }\n    this._handleMessage(message);\n  }\n  createProxyToRemoteChannel(channel, sendMessageBarrier) {\n    const handler = {\n      get: (target, name) => {\n        if (typeof name === 'string' && !target[name]) {\n          if (propertyIsDynamicEvent(name)) {\n            // onDynamic...\n            target[name] = arg => {\n              return this.listen(channel, name, arg);\n            };\n          } else if (propertyIsEvent(name)) {\n            // on...\n            target[name] = this.listen(channel, name, undefined);\n          } else if (name.charCodeAt(0) === 36 /* CharCode.DollarSign */) {\n            // $...\n            target[name] = async (...myArgs) => {\n              await sendMessageBarrier?.();\n              return this.sendMessage(channel, name, myArgs);\n            };\n          }\n        }\n        return target[name];\n      }\n    };\n    return new Proxy(Object.create(null), handler);\n  }\n  _handleMessage(msg) {\n    switch (msg.type) {\n      case 1 /* MessageType.Reply */:\n        return this._handleReplyMessage(msg);\n      case 0 /* MessageType.Request */:\n        return this._handleRequestMessage(msg);\n      case 2 /* MessageType.SubscribeEvent */:\n        return this._handleSubscribeEventMessage(msg);\n      case 3 /* MessageType.Event */:\n        return this._handleEventMessage(msg);\n      case 4 /* MessageType.UnsubscribeEvent */:\n        return this._handleUnsubscribeEventMessage(msg);\n    }\n  }\n  _handleReplyMessage(replyMessage) {\n    if (!this._pendingReplies[replyMessage.seq]) {\n      console.warn('Got reply to unknown seq');\n      return;\n    }\n    const reply = this._pendingReplies[replyMessage.seq];\n    delete this._pendingReplies[replyMessage.seq];\n    if (replyMessage.err) {\n      let err = replyMessage.err;\n      if (replyMessage.err.$isError) {\n        err = new Error();\n        err.name = replyMessage.err.name;\n        err.message = replyMessage.err.message;\n        err.stack = replyMessage.err.stack;\n      }\n      reply.reject(err);\n      return;\n    }\n    reply.resolve(replyMessage.res);\n  }\n  _handleRequestMessage(requestMessage) {\n    const req = requestMessage.req;\n    const result = this._handler.handleMessage(requestMessage.channel, requestMessage.method, requestMessage.args);\n    result.then(r => {\n      this._send(new ReplyMessage(this._workerId, req, r, undefined));\n    }, e => {\n      if (e.detail instanceof Error) {\n        // Loading errors have a detail property that points to the actual error\n        e.detail = transformErrorForSerialization(e.detail);\n      }\n      this._send(new ReplyMessage(this._workerId, req, undefined, transformErrorForSerialization(e)));\n    });\n  }\n  _handleSubscribeEventMessage(msg) {\n    const req = msg.req;\n    const disposable = this._handler.handleEvent(msg.channel, msg.eventName, msg.arg)(event => {\n      this._send(new EventMessage(this._workerId, req, event));\n    });\n    this._pendingEvents.set(req, disposable);\n  }\n  _handleEventMessage(msg) {\n    if (!this._pendingEmitters.has(msg.req)) {\n      console.warn('Got event for unknown req');\n      return;\n    }\n    this._pendingEmitters.get(msg.req).fire(msg.event);\n  }\n  _handleUnsubscribeEventMessage(msg) {\n    if (!this._pendingEvents.has(msg.req)) {\n      console.warn('Got unsubscribe for unknown req');\n      return;\n    }\n    this._pendingEvents.get(msg.req).dispose();\n    this._pendingEvents.delete(msg.req);\n  }\n  _send(msg) {\n    const transfer = [];\n    if (msg.type === 0 /* MessageType.Request */) {\n      for (let i = 0; i < msg.args.length; i++) {\n        if (msg.args[i] instanceof ArrayBuffer) {\n          transfer.push(msg.args[i]);\n        }\n      }\n    } else if (msg.type === 1 /* MessageType.Reply */) {\n      if (msg.res instanceof ArrayBuffer) {\n        transfer.push(msg.res);\n      }\n    }\n    this._handler.sendMessage(msg, transfer);\n  }\n}\n/**\n * Main thread side\n */\nexport class SimpleWorkerClient extends Disposable {\n  constructor(workerFactory, workerDescriptor) {\n    super();\n    this._localChannels = new Map();\n    this._worker = this._register(workerFactory.create({\n      amdModuleId: 'vs/base/common/worker/simpleWorker',\n      esmModuleLocation: workerDescriptor.esmModuleLocation,\n      label: workerDescriptor.label\n    }, msg => {\n      this._protocol.handleMessage(msg);\n    }, err => {\n      // in Firefox, web workers fail lazily :(\n      // we will reject the proxy\n      onUnexpectedError(err);\n    }));\n    this._protocol = new SimpleWorkerProtocol({\n      sendMessage: (msg, transfer) => {\n        this._worker.postMessage(msg, transfer);\n      },\n      handleMessage: (channel, method, args) => {\n        return this._handleMessage(channel, method, args);\n      },\n      handleEvent: (channel, eventName, arg) => {\n        return this._handleEvent(channel, eventName, arg);\n      }\n    });\n    this._protocol.setWorkerId(this._worker.getId());\n    // Gather loader configuration\n    let loaderConfiguration = null;\n    const globalRequire = globalThis.require;\n    if (typeof globalRequire !== 'undefined' && typeof globalRequire.getConfig === 'function') {\n      // Get the configuration from the Monaco AMD Loader\n      loaderConfiguration = globalRequire.getConfig();\n    } else if (typeof globalThis.requirejs !== 'undefined') {\n      // Get the configuration from requirejs\n      loaderConfiguration = globalThis.requirejs.s.contexts._.config;\n    }\n    // Send initialize message\n    this._onModuleLoaded = this._protocol.sendMessage(DEFAULT_CHANNEL, INITIALIZE, [this._worker.getId(), JSON.parse(JSON.stringify(loaderConfiguration)), workerDescriptor.amdModuleId]);\n    this.proxy = this._protocol.createProxyToRemoteChannel(DEFAULT_CHANNEL, async () => {\n      await this._onModuleLoaded;\n    });\n    this._onModuleLoaded.catch(e => {\n      this._onError('Worker failed to load ' + workerDescriptor.amdModuleId, e);\n    });\n  }\n  _handleMessage(channelName, method, args) {\n    const channel = this._localChannels.get(channelName);\n    if (!channel) {\n      return Promise.reject(new Error(`Missing channel ${channelName} on main thread`));\n    }\n    if (typeof channel[method] !== 'function') {\n      return Promise.reject(new Error(`Missing method ${method} on main thread channel ${channelName}`));\n    }\n    try {\n      return Promise.resolve(channel[method].apply(channel, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  _handleEvent(channelName, eventName, arg) {\n    const channel = this._localChannels.get(channelName);\n    if (!channel) {\n      throw new Error(`Missing channel ${channelName} on main thread`);\n    }\n    if (propertyIsDynamicEvent(eventName)) {\n      const event = channel[eventName].call(channel, arg);\n      if (typeof event !== 'function') {\n        throw new Error(`Missing dynamic event ${eventName} on main thread channel ${channelName}.`);\n      }\n      return event;\n    }\n    if (propertyIsEvent(eventName)) {\n      const event = channel[eventName];\n      if (typeof event !== 'function') {\n        throw new Error(`Missing event ${eventName} on main thread channel ${channelName}.`);\n      }\n      return event;\n    }\n    throw new Error(`Malformed event name ${eventName}`);\n  }\n  setChannel(channel, handler) {\n    this._localChannels.set(channel, handler);\n  }\n  _onError(message, error) {\n    console.error(message);\n    console.info(error);\n  }\n}\nfunction propertyIsEvent(name) {\n  // Assume a property is an event if it has a form of \"onSomething\"\n  return name[0] === 'o' && name[1] === 'n' && strings.isUpperAsciiLetter(name.charCodeAt(2));\n}\nfunction propertyIsDynamicEvent(name) {\n  // Assume a property is a dynamic event (a method that returns an event) if it has a form of \"onDynamicSomething\"\n  return /^onDynamic/.test(name) && strings.isUpperAsciiLetter(name.charCodeAt(9));\n}\n/**\n * Worker side\n */\nexport class SimpleWorkerServer {\n  constructor(postMessage, requestHandlerFactory) {\n    this._localChannels = new Map();\n    this._remoteChannels = new Map();\n    this._requestHandlerFactory = requestHandlerFactory;\n    this._requestHandler = null;\n    this._protocol = new SimpleWorkerProtocol({\n      sendMessage: (msg, transfer) => {\n        postMessage(msg, transfer);\n      },\n      handleMessage: (channel, method, args) => this._handleMessage(channel, method, args),\n      handleEvent: (channel, eventName, arg) => this._handleEvent(channel, eventName, arg)\n    });\n  }\n  onmessage(msg) {\n    this._protocol.handleMessage(msg);\n  }\n  _handleMessage(channel, method, args) {\n    if (channel === DEFAULT_CHANNEL && method === INITIALIZE) {\n      return this.initialize(args[0], args[1], args[2]);\n    }\n    const requestHandler = channel === DEFAULT_CHANNEL ? this._requestHandler : this._localChannels.get(channel);\n    if (!requestHandler) {\n      return Promise.reject(new Error(`Missing channel ${channel} on worker thread`));\n    }\n    if (typeof requestHandler[method] !== 'function') {\n      return Promise.reject(new Error(`Missing method ${method} on worker thread channel ${channel}`));\n    }\n    try {\n      return Promise.resolve(requestHandler[method].apply(requestHandler, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  _handleEvent(channel, eventName, arg) {\n    const requestHandler = channel === DEFAULT_CHANNEL ? this._requestHandler : this._localChannels.get(channel);\n    if (!requestHandler) {\n      throw new Error(`Missing channel ${channel} on worker thread`);\n    }\n    if (propertyIsDynamicEvent(eventName)) {\n      const event = requestHandler[eventName].call(requestHandler, arg);\n      if (typeof event !== 'function') {\n        throw new Error(`Missing dynamic event ${eventName} on request handler.`);\n      }\n      return event;\n    }\n    if (propertyIsEvent(eventName)) {\n      const event = requestHandler[eventName];\n      if (typeof event !== 'function') {\n        throw new Error(`Missing event ${eventName} on request handler.`);\n      }\n      return event;\n    }\n    throw new Error(`Malformed event name ${eventName}`);\n  }\n  getChannel(channel) {\n    if (!this._remoteChannels.has(channel)) {\n      const inst = this._protocol.createProxyToRemoteChannel(channel);\n      this._remoteChannels.set(channel, inst);\n    }\n    return this._remoteChannels.get(channel);\n  }\n  async initialize(workerId, loaderConfig, moduleId) {\n    this._protocol.setWorkerId(workerId);\n    if (this._requestHandlerFactory) {\n      // static request handler\n      this._requestHandler = this._requestHandlerFactory(this);\n      return;\n    }\n    if (loaderConfig) {\n      // Remove 'baseUrl', handling it is beyond scope for now\n      if (typeof loaderConfig.baseUrl !== 'undefined') {\n        delete loaderConfig['baseUrl'];\n      }\n      if (typeof loaderConfig.paths !== 'undefined') {\n        if (typeof loaderConfig.paths.vs !== 'undefined') {\n          delete loaderConfig.paths['vs'];\n        }\n      }\n      if (typeof loaderConfig.trustedTypesPolicy !== 'undefined') {\n        // don't use, it has been destroyed during serialize\n        delete loaderConfig['trustedTypesPolicy'];\n      }\n      // Since this is in a web worker, enable catching errors\n      loaderConfig.catchError = true;\n      globalThis.require.config(loaderConfig);\n    }\n    if (isESM) {\n      const url = FileAccess.asBrowserUri(`${moduleId}.js`).toString(true);\n      return import(`${url}`).then(module => {\n        this._requestHandler = module.create(this);\n        if (!this._requestHandler) {\n          throw new Error(`No RequestHandler!`);\n        }\n      });\n    }\n    return new Promise((resolve, reject) => {\n      // Use the global require to be sure to get the global config\n      // ESM-comment-begin\n      // \t\t\tconst req = (globalThis.require || require);\n      // ESM-comment-end\n      // ESM-uncomment-begin\n      const req = globalThis.require;\n      // ESM-uncomment-end\n      req([moduleId], module => {\n        this._requestHandler = module.create(this);\n        if (!this._requestHandler) {\n          reject(new Error(`No RequestHandler!`));\n          return;\n        }\n        resolve();\n      }, reject);\n    });\n  }\n}\n/**\n * Defines the worker entry point. Must be exported and named `create`.\n * @skipMangle\n */\nexport function create(postMessage) {\n  return new SimpleWorkerServer(postMessage, null);\n}","map":{"version":3,"names":["onUnexpectedError","transformErrorForSerialization","Emitter","Disposable","FileAccess","isWeb","strings","isESM","DEFAULT_CHANNEL","INITIALIZE","webWorkerWarningLogged","logOnceWebWorkerWarning","err","console","warn","message","RequestMessage","constructor","vsWorker","req","channel","method","args","type","ReplyMessage","seq","res","SubscribeEventMessage","eventName","arg","EventMessage","event","UnsubscribeEventMessage","SimpleWorkerProtocol","handler","_workerId","_handler","_lastSentReq","_pendingReplies","Object","create","_pendingEmitters","Map","_pendingEvents","setWorkerId","workerId","sendMessage","String","Promise","resolve","reject","_send","listen","emitter","onWillAddFirstListener","set","onDidRemoveLastListener","delete","handleMessage","_handleMessage","createProxyToRemoteChannel","sendMessageBarrier","get","target","name","propertyIsDynamicEvent","propertyIsEvent","undefined","charCodeAt","myArgs","Proxy","msg","_handleReplyMessage","_handleRequestMessage","_handleSubscribeEventMessage","_handleEventMessage","_handleUnsubscribeEventMessage","replyMessage","reply","$isError","Error","stack","requestMessage","result","then","r","e","detail","disposable","handleEvent","has","fire","dispose","transfer","i","length","ArrayBuffer","push","SimpleWorkerClient","workerFactory","workerDescriptor","_localChannels","_worker","_register","amdModuleId","esmModuleLocation","label","_protocol","postMessage","_handleEvent","getId","loaderConfiguration","globalRequire","globalThis","require","getConfig","requirejs","s","contexts","_","config","_onModuleLoaded","JSON","parse","stringify","proxy","catch","_onError","channelName","apply","call","setChannel","error","info","isUpperAsciiLetter","test","SimpleWorkerServer","requestHandlerFactory","_remoteChannels","_requestHandlerFactory","_requestHandler","onmessage","initialize","requestHandler","getChannel","inst","loaderConfig","moduleId","baseUrl","paths","vs","trustedTypesPolicy","catchError","url","asBrowserUri","toString","module"],"sources":["P:/IDEA/JudgeX/JudgeX_front/node_modules/monaco-editor/esm/vs/base/common/worker/simpleWorker.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { onUnexpectedError, transformErrorForSerialization } from '../errors.js';\nimport { Emitter } from '../event.js';\nimport { Disposable } from '../lifecycle.js';\nimport { FileAccess } from '../network.js';\nimport { isWeb } from '../platform.js';\nimport * as strings from '../strings.js';\n// ESM-comment-begin\n// const isESM = false;\n// ESM-comment-end\n// ESM-uncomment-begin\nconst isESM = true;\n// ESM-uncomment-end\nconst DEFAULT_CHANNEL = 'default';\nconst INITIALIZE = '$initialize';\nlet webWorkerWarningLogged = false;\nexport function logOnceWebWorkerWarning(err) {\n    if (!isWeb) {\n        // running tests\n        return;\n    }\n    if (!webWorkerWarningLogged) {\n        webWorkerWarningLogged = true;\n        console.warn('Could not create web worker(s). Falling back to loading web worker code in main thread, which might cause UI freezes. Please see https://github.com/microsoft/monaco-editor#faq');\n    }\n    console.warn(err.message);\n}\nclass RequestMessage {\n    constructor(vsWorker, req, channel, method, args) {\n        this.vsWorker = vsWorker;\n        this.req = req;\n        this.channel = channel;\n        this.method = method;\n        this.args = args;\n        this.type = 0 /* MessageType.Request */;\n    }\n}\nclass ReplyMessage {\n    constructor(vsWorker, seq, res, err) {\n        this.vsWorker = vsWorker;\n        this.seq = seq;\n        this.res = res;\n        this.err = err;\n        this.type = 1 /* MessageType.Reply */;\n    }\n}\nclass SubscribeEventMessage {\n    constructor(vsWorker, req, channel, eventName, arg) {\n        this.vsWorker = vsWorker;\n        this.req = req;\n        this.channel = channel;\n        this.eventName = eventName;\n        this.arg = arg;\n        this.type = 2 /* MessageType.SubscribeEvent */;\n    }\n}\nclass EventMessage {\n    constructor(vsWorker, req, event) {\n        this.vsWorker = vsWorker;\n        this.req = req;\n        this.event = event;\n        this.type = 3 /* MessageType.Event */;\n    }\n}\nclass UnsubscribeEventMessage {\n    constructor(vsWorker, req) {\n        this.vsWorker = vsWorker;\n        this.req = req;\n        this.type = 4 /* MessageType.UnsubscribeEvent */;\n    }\n}\nclass SimpleWorkerProtocol {\n    constructor(handler) {\n        this._workerId = -1;\n        this._handler = handler;\n        this._lastSentReq = 0;\n        this._pendingReplies = Object.create(null);\n        this._pendingEmitters = new Map();\n        this._pendingEvents = new Map();\n    }\n    setWorkerId(workerId) {\n        this._workerId = workerId;\n    }\n    sendMessage(channel, method, args) {\n        const req = String(++this._lastSentReq);\n        return new Promise((resolve, reject) => {\n            this._pendingReplies[req] = {\n                resolve: resolve,\n                reject: reject\n            };\n            this._send(new RequestMessage(this._workerId, req, channel, method, args));\n        });\n    }\n    listen(channel, eventName, arg) {\n        let req = null;\n        const emitter = new Emitter({\n            onWillAddFirstListener: () => {\n                req = String(++this._lastSentReq);\n                this._pendingEmitters.set(req, emitter);\n                this._send(new SubscribeEventMessage(this._workerId, req, channel, eventName, arg));\n            },\n            onDidRemoveLastListener: () => {\n                this._pendingEmitters.delete(req);\n                this._send(new UnsubscribeEventMessage(this._workerId, req));\n                req = null;\n            }\n        });\n        return emitter.event;\n    }\n    handleMessage(message) {\n        if (!message || !message.vsWorker) {\n            return;\n        }\n        if (this._workerId !== -1 && message.vsWorker !== this._workerId) {\n            return;\n        }\n        this._handleMessage(message);\n    }\n    createProxyToRemoteChannel(channel, sendMessageBarrier) {\n        const handler = {\n            get: (target, name) => {\n                if (typeof name === 'string' && !target[name]) {\n                    if (propertyIsDynamicEvent(name)) { // onDynamic...\n                        target[name] = (arg) => {\n                            return this.listen(channel, name, arg);\n                        };\n                    }\n                    else if (propertyIsEvent(name)) { // on...\n                        target[name] = this.listen(channel, name, undefined);\n                    }\n                    else if (name.charCodeAt(0) === 36 /* CharCode.DollarSign */) { // $...\n                        target[name] = async (...myArgs) => {\n                            await sendMessageBarrier?.();\n                            return this.sendMessage(channel, name, myArgs);\n                        };\n                    }\n                }\n                return target[name];\n            }\n        };\n        return new Proxy(Object.create(null), handler);\n    }\n    _handleMessage(msg) {\n        switch (msg.type) {\n            case 1 /* MessageType.Reply */:\n                return this._handleReplyMessage(msg);\n            case 0 /* MessageType.Request */:\n                return this._handleRequestMessage(msg);\n            case 2 /* MessageType.SubscribeEvent */:\n                return this._handleSubscribeEventMessage(msg);\n            case 3 /* MessageType.Event */:\n                return this._handleEventMessage(msg);\n            case 4 /* MessageType.UnsubscribeEvent */:\n                return this._handleUnsubscribeEventMessage(msg);\n        }\n    }\n    _handleReplyMessage(replyMessage) {\n        if (!this._pendingReplies[replyMessage.seq]) {\n            console.warn('Got reply to unknown seq');\n            return;\n        }\n        const reply = this._pendingReplies[replyMessage.seq];\n        delete this._pendingReplies[replyMessage.seq];\n        if (replyMessage.err) {\n            let err = replyMessage.err;\n            if (replyMessage.err.$isError) {\n                err = new Error();\n                err.name = replyMessage.err.name;\n                err.message = replyMessage.err.message;\n                err.stack = replyMessage.err.stack;\n            }\n            reply.reject(err);\n            return;\n        }\n        reply.resolve(replyMessage.res);\n    }\n    _handleRequestMessage(requestMessage) {\n        const req = requestMessage.req;\n        const result = this._handler.handleMessage(requestMessage.channel, requestMessage.method, requestMessage.args);\n        result.then((r) => {\n            this._send(new ReplyMessage(this._workerId, req, r, undefined));\n        }, (e) => {\n            if (e.detail instanceof Error) {\n                // Loading errors have a detail property that points to the actual error\n                e.detail = transformErrorForSerialization(e.detail);\n            }\n            this._send(new ReplyMessage(this._workerId, req, undefined, transformErrorForSerialization(e)));\n        });\n    }\n    _handleSubscribeEventMessage(msg) {\n        const req = msg.req;\n        const disposable = this._handler.handleEvent(msg.channel, msg.eventName, msg.arg)((event) => {\n            this._send(new EventMessage(this._workerId, req, event));\n        });\n        this._pendingEvents.set(req, disposable);\n    }\n    _handleEventMessage(msg) {\n        if (!this._pendingEmitters.has(msg.req)) {\n            console.warn('Got event for unknown req');\n            return;\n        }\n        this._pendingEmitters.get(msg.req).fire(msg.event);\n    }\n    _handleUnsubscribeEventMessage(msg) {\n        if (!this._pendingEvents.has(msg.req)) {\n            console.warn('Got unsubscribe for unknown req');\n            return;\n        }\n        this._pendingEvents.get(msg.req).dispose();\n        this._pendingEvents.delete(msg.req);\n    }\n    _send(msg) {\n        const transfer = [];\n        if (msg.type === 0 /* MessageType.Request */) {\n            for (let i = 0; i < msg.args.length; i++) {\n                if (msg.args[i] instanceof ArrayBuffer) {\n                    transfer.push(msg.args[i]);\n                }\n            }\n        }\n        else if (msg.type === 1 /* MessageType.Reply */) {\n            if (msg.res instanceof ArrayBuffer) {\n                transfer.push(msg.res);\n            }\n        }\n        this._handler.sendMessage(msg, transfer);\n    }\n}\n/**\n * Main thread side\n */\nexport class SimpleWorkerClient extends Disposable {\n    constructor(workerFactory, workerDescriptor) {\n        super();\n        this._localChannels = new Map();\n        this._worker = this._register(workerFactory.create({\n            amdModuleId: 'vs/base/common/worker/simpleWorker',\n            esmModuleLocation: workerDescriptor.esmModuleLocation,\n            label: workerDescriptor.label\n        }, (msg) => {\n            this._protocol.handleMessage(msg);\n        }, (err) => {\n            // in Firefox, web workers fail lazily :(\n            // we will reject the proxy\n            onUnexpectedError(err);\n        }));\n        this._protocol = new SimpleWorkerProtocol({\n            sendMessage: (msg, transfer) => {\n                this._worker.postMessage(msg, transfer);\n            },\n            handleMessage: (channel, method, args) => {\n                return this._handleMessage(channel, method, args);\n            },\n            handleEvent: (channel, eventName, arg) => {\n                return this._handleEvent(channel, eventName, arg);\n            }\n        });\n        this._protocol.setWorkerId(this._worker.getId());\n        // Gather loader configuration\n        let loaderConfiguration = null;\n        const globalRequire = globalThis.require;\n        if (typeof globalRequire !== 'undefined' && typeof globalRequire.getConfig === 'function') {\n            // Get the configuration from the Monaco AMD Loader\n            loaderConfiguration = globalRequire.getConfig();\n        }\n        else if (typeof globalThis.requirejs !== 'undefined') {\n            // Get the configuration from requirejs\n            loaderConfiguration = globalThis.requirejs.s.contexts._.config;\n        }\n        // Send initialize message\n        this._onModuleLoaded = this._protocol.sendMessage(DEFAULT_CHANNEL, INITIALIZE, [\n            this._worker.getId(),\n            JSON.parse(JSON.stringify(loaderConfiguration)),\n            workerDescriptor.amdModuleId,\n        ]);\n        this.proxy = this._protocol.createProxyToRemoteChannel(DEFAULT_CHANNEL, async () => { await this._onModuleLoaded; });\n        this._onModuleLoaded.catch((e) => {\n            this._onError('Worker failed to load ' + workerDescriptor.amdModuleId, e);\n        });\n    }\n    _handleMessage(channelName, method, args) {\n        const channel = this._localChannels.get(channelName);\n        if (!channel) {\n            return Promise.reject(new Error(`Missing channel ${channelName} on main thread`));\n        }\n        if (typeof channel[method] !== 'function') {\n            return Promise.reject(new Error(`Missing method ${method} on main thread channel ${channelName}`));\n        }\n        try {\n            return Promise.resolve(channel[method].apply(channel, args));\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    }\n    _handleEvent(channelName, eventName, arg) {\n        const channel = this._localChannels.get(channelName);\n        if (!channel) {\n            throw new Error(`Missing channel ${channelName} on main thread`);\n        }\n        if (propertyIsDynamicEvent(eventName)) {\n            const event = channel[eventName].call(channel, arg);\n            if (typeof event !== 'function') {\n                throw new Error(`Missing dynamic event ${eventName} on main thread channel ${channelName}.`);\n            }\n            return event;\n        }\n        if (propertyIsEvent(eventName)) {\n            const event = channel[eventName];\n            if (typeof event !== 'function') {\n                throw new Error(`Missing event ${eventName} on main thread channel ${channelName}.`);\n            }\n            return event;\n        }\n        throw new Error(`Malformed event name ${eventName}`);\n    }\n    setChannel(channel, handler) {\n        this._localChannels.set(channel, handler);\n    }\n    _onError(message, error) {\n        console.error(message);\n        console.info(error);\n    }\n}\nfunction propertyIsEvent(name) {\n    // Assume a property is an event if it has a form of \"onSomething\"\n    return name[0] === 'o' && name[1] === 'n' && strings.isUpperAsciiLetter(name.charCodeAt(2));\n}\nfunction propertyIsDynamicEvent(name) {\n    // Assume a property is a dynamic event (a method that returns an event) if it has a form of \"onDynamicSomething\"\n    return /^onDynamic/.test(name) && strings.isUpperAsciiLetter(name.charCodeAt(9));\n}\n/**\n * Worker side\n */\nexport class SimpleWorkerServer {\n    constructor(postMessage, requestHandlerFactory) {\n        this._localChannels = new Map();\n        this._remoteChannels = new Map();\n        this._requestHandlerFactory = requestHandlerFactory;\n        this._requestHandler = null;\n        this._protocol = new SimpleWorkerProtocol({\n            sendMessage: (msg, transfer) => {\n                postMessage(msg, transfer);\n            },\n            handleMessage: (channel, method, args) => this._handleMessage(channel, method, args),\n            handleEvent: (channel, eventName, arg) => this._handleEvent(channel, eventName, arg)\n        });\n    }\n    onmessage(msg) {\n        this._protocol.handleMessage(msg);\n    }\n    _handleMessage(channel, method, args) {\n        if (channel === DEFAULT_CHANNEL && method === INITIALIZE) {\n            return this.initialize(args[0], args[1], args[2]);\n        }\n        const requestHandler = (channel === DEFAULT_CHANNEL ? this._requestHandler : this._localChannels.get(channel));\n        if (!requestHandler) {\n            return Promise.reject(new Error(`Missing channel ${channel} on worker thread`));\n        }\n        if (typeof requestHandler[method] !== 'function') {\n            return Promise.reject(new Error(`Missing method ${method} on worker thread channel ${channel}`));\n        }\n        try {\n            return Promise.resolve(requestHandler[method].apply(requestHandler, args));\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    }\n    _handleEvent(channel, eventName, arg) {\n        const requestHandler = (channel === DEFAULT_CHANNEL ? this._requestHandler : this._localChannels.get(channel));\n        if (!requestHandler) {\n            throw new Error(`Missing channel ${channel} on worker thread`);\n        }\n        if (propertyIsDynamicEvent(eventName)) {\n            const event = requestHandler[eventName].call(requestHandler, arg);\n            if (typeof event !== 'function') {\n                throw new Error(`Missing dynamic event ${eventName} on request handler.`);\n            }\n            return event;\n        }\n        if (propertyIsEvent(eventName)) {\n            const event = requestHandler[eventName];\n            if (typeof event !== 'function') {\n                throw new Error(`Missing event ${eventName} on request handler.`);\n            }\n            return event;\n        }\n        throw new Error(`Malformed event name ${eventName}`);\n    }\n    getChannel(channel) {\n        if (!this._remoteChannels.has(channel)) {\n            const inst = this._protocol.createProxyToRemoteChannel(channel);\n            this._remoteChannels.set(channel, inst);\n        }\n        return this._remoteChannels.get(channel);\n    }\n    async initialize(workerId, loaderConfig, moduleId) {\n        this._protocol.setWorkerId(workerId);\n        if (this._requestHandlerFactory) {\n            // static request handler\n            this._requestHandler = this._requestHandlerFactory(this);\n            return;\n        }\n        if (loaderConfig) {\n            // Remove 'baseUrl', handling it is beyond scope for now\n            if (typeof loaderConfig.baseUrl !== 'undefined') {\n                delete loaderConfig['baseUrl'];\n            }\n            if (typeof loaderConfig.paths !== 'undefined') {\n                if (typeof loaderConfig.paths.vs !== 'undefined') {\n                    delete loaderConfig.paths['vs'];\n                }\n            }\n            if (typeof loaderConfig.trustedTypesPolicy !== 'undefined') {\n                // don't use, it has been destroyed during serialize\n                delete loaderConfig['trustedTypesPolicy'];\n            }\n            // Since this is in a web worker, enable catching errors\n            loaderConfig.catchError = true;\n            globalThis.require.config(loaderConfig);\n        }\n        if (isESM) {\n            const url = FileAccess.asBrowserUri(`${moduleId}.js`).toString(true);\n            return import(`${url}`).then((module) => {\n                this._requestHandler = module.create(this);\n                if (!this._requestHandler) {\n                    throw new Error(`No RequestHandler!`);\n                }\n            });\n        }\n        return new Promise((resolve, reject) => {\n            // Use the global require to be sure to get the global config\n            // ESM-comment-begin\n            // \t\t\tconst req = (globalThis.require || require);\n            // ESM-comment-end\n            // ESM-uncomment-begin\n            const req = globalThis.require;\n            // ESM-uncomment-end\n            req([moduleId], (module) => {\n                this._requestHandler = module.create(this);\n                if (!this._requestHandler) {\n                    reject(new Error(`No RequestHandler!`));\n                    return;\n                }\n                resolve();\n            }, reject);\n        });\n    }\n}\n/**\n * Defines the worker entry point. Must be exported and named `create`.\n * @skipMangle\n */\nexport function create(postMessage) {\n    return new SimpleWorkerServer(postMessage, null);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}