{"ast":null,"code":"var _RenderedContentHoverParts;\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.some.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { RenderedHoverParts } from './hoverTypes.js';\nimport { Disposable, DisposableStore, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { EditorHoverStatusBar } from './contentHoverStatusBar.js';\nimport { ModelDecorationOptions } from '../../../common/model/textModel.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport * as dom from '../../../../base/browser/dom.js';\nimport { MarkdownHoverParticipant } from './markdownHoverParticipant.js';\nimport { ColorHoverParticipant } from '../../colorPicker/browser/colorHoverParticipant.js';\nimport { InlayHintsHover } from '../../inlayHints/browser/inlayHintsHover.js';\nimport { BugIndicatingError } from '../../../../base/common/errors.js';\nexport class RenderedContentHover extends Disposable {\n  constructor(editor, hoverResult, participants, computer, context, keybindingService) {\n    super();\n    const anchor = hoverResult.anchor;\n    const parts = hoverResult.hoverParts;\n    this._renderedHoverParts = this._register(new RenderedContentHoverParts(editor, participants, parts, keybindingService, context));\n    const {\n      showAtPosition,\n      showAtSecondaryPosition\n    } = RenderedContentHover.computeHoverPositions(editor, anchor.range, parts);\n    this.shouldAppearBeforeContent = parts.some(m => m.isBeforeContent);\n    this.showAtPosition = showAtPosition;\n    this.showAtSecondaryPosition = showAtSecondaryPosition;\n    this.initialMousePosX = anchor.initialMousePosX;\n    this.initialMousePosY = anchor.initialMousePosY;\n    this.shouldFocus = computer.shouldFocus;\n    this.source = computer.source;\n  }\n  get domNode() {\n    return this._renderedHoverParts.domNode;\n  }\n  get domNodeHasChildren() {\n    return this._renderedHoverParts.domNodeHasChildren;\n  }\n  get focusedHoverPartIndex() {\n    return this._renderedHoverParts.focusedHoverPartIndex;\n  }\n  async updateHoverVerbosityLevel(action, index, focus) {\n    this._renderedHoverParts.updateHoverVerbosityLevel(action, index, focus);\n  }\n  isColorPickerVisible() {\n    return this._renderedHoverParts.isColorPickerVisible();\n  }\n  static computeHoverPositions(editor, anchorRange, hoverParts) {\n    let startColumnBoundary = 1;\n    if (editor.hasModel()) {\n      // Ensure the range is on the current view line\n      const viewModel = editor._getViewModel();\n      const coordinatesConverter = viewModel.coordinatesConverter;\n      const anchorViewRange = coordinatesConverter.convertModelRangeToViewRange(anchorRange);\n      const anchorViewMinColumn = viewModel.getLineMinColumn(anchorViewRange.startLineNumber);\n      const anchorViewRangeStart = new Position(anchorViewRange.startLineNumber, anchorViewMinColumn);\n      startColumnBoundary = coordinatesConverter.convertViewPositionToModelPosition(anchorViewRangeStart).column;\n    }\n    // The anchor range is always on a single line\n    const anchorStartLineNumber = anchorRange.startLineNumber;\n    let secondaryPositionColumn = anchorRange.startColumn;\n    let forceShowAtRange;\n    for (const hoverPart of hoverParts) {\n      const hoverPartRange = hoverPart.range;\n      const hoverPartRangeOnAnchorStartLine = hoverPartRange.startLineNumber === anchorStartLineNumber;\n      const hoverPartRangeOnAnchorEndLine = hoverPartRange.endLineNumber === anchorStartLineNumber;\n      const hoverPartRangeIsOnAnchorLine = hoverPartRangeOnAnchorStartLine && hoverPartRangeOnAnchorEndLine;\n      if (hoverPartRangeIsOnAnchorLine) {\n        // this message has a range that is completely sitting on the line of the anchor\n        const hoverPartStartColumn = hoverPartRange.startColumn;\n        const minSecondaryPositionColumn = Math.min(secondaryPositionColumn, hoverPartStartColumn);\n        secondaryPositionColumn = Math.max(minSecondaryPositionColumn, startColumnBoundary);\n      }\n      if (hoverPart.forceShowAtRange) {\n        forceShowAtRange = hoverPartRange;\n      }\n    }\n    let showAtPosition;\n    let showAtSecondaryPosition;\n    if (forceShowAtRange) {\n      const forceShowAtPosition = forceShowAtRange.getStartPosition();\n      showAtPosition = forceShowAtPosition;\n      showAtSecondaryPosition = forceShowAtPosition;\n    } else {\n      showAtPosition = anchorRange.getStartPosition();\n      showAtSecondaryPosition = new Position(anchorStartLineNumber, secondaryPositionColumn);\n    }\n    return {\n      showAtPosition,\n      showAtSecondaryPosition\n    };\n  }\n}\nclass RenderedStatusBar {\n  constructor(fragment, _statusBar) {\n    this._statusBar = _statusBar;\n    fragment.appendChild(this._statusBar.hoverElement);\n  }\n  get hoverElement() {\n    return this._statusBar.hoverElement;\n  }\n  get actions() {\n    return this._statusBar.actions;\n  }\n  dispose() {\n    this._statusBar.dispose();\n  }\n}\nclass RenderedContentHoverParts extends Disposable {\n  constructor(editor, participants, hoverParts, keybindingService, context) {\n    super();\n    this._renderedParts = [];\n    this._focusedHoverPartIndex = -1;\n    this._context = context;\n    this._fragment = document.createDocumentFragment();\n    this._register(this._renderParts(participants, hoverParts, context, keybindingService));\n    this._register(this._registerListenersOnRenderedParts());\n    this._register(this._createEditorDecorations(editor, hoverParts));\n    this._updateMarkdownAndColorParticipantInfo(participants);\n  }\n  _createEditorDecorations(editor, hoverParts) {\n    if (hoverParts.length === 0) {\n      return Disposable.None;\n    }\n    let highlightRange = hoverParts[0].range;\n    for (const hoverPart of hoverParts) {\n      const hoverPartRange = hoverPart.range;\n      highlightRange = Range.plusRange(highlightRange, hoverPartRange);\n    }\n    const highlightDecoration = editor.createDecorationsCollection();\n    highlightDecoration.set([{\n      range: highlightRange,\n      options: RenderedContentHoverParts._DECORATION_OPTIONS\n    }]);\n    return toDisposable(() => {\n      highlightDecoration.clear();\n    });\n  }\n  _renderParts(participants, hoverParts, hoverContext, keybindingService) {\n    const statusBar = new EditorHoverStatusBar(keybindingService);\n    const hoverRenderingContext = {\n      fragment: this._fragment,\n      statusBar,\n      ...hoverContext\n    };\n    const disposables = new DisposableStore();\n    for (const participant of participants) {\n      const renderedHoverParts = this._renderHoverPartsForParticipant(hoverParts, participant, hoverRenderingContext);\n      disposables.add(renderedHoverParts);\n      for (const renderedHoverPart of renderedHoverParts.renderedHoverParts) {\n        this._renderedParts.push({\n          type: 'hoverPart',\n          participant,\n          hoverPart: renderedHoverPart.hoverPart,\n          hoverElement: renderedHoverPart.hoverElement\n        });\n      }\n    }\n    const renderedStatusBar = this._renderStatusBar(this._fragment, statusBar);\n    if (renderedStatusBar) {\n      disposables.add(renderedStatusBar);\n      this._renderedParts.push({\n        type: 'statusBar',\n        hoverElement: renderedStatusBar.hoverElement,\n        actions: renderedStatusBar.actions\n      });\n    }\n    return toDisposable(() => {\n      disposables.dispose();\n    });\n  }\n  _renderHoverPartsForParticipant(hoverParts, participant, hoverRenderingContext) {\n    const hoverPartsForParticipant = hoverParts.filter(hoverPart => hoverPart.owner === participant);\n    const hasHoverPartsForParticipant = hoverPartsForParticipant.length > 0;\n    if (!hasHoverPartsForParticipant) {\n      return new RenderedHoverParts([]);\n    }\n    return participant.renderHoverParts(hoverRenderingContext, hoverPartsForParticipant);\n  }\n  _renderStatusBar(fragment, statusBar) {\n    if (!statusBar.hasContent) {\n      return undefined;\n    }\n    return new RenderedStatusBar(fragment, statusBar);\n  }\n  _registerListenersOnRenderedParts() {\n    const disposables = new DisposableStore();\n    this._renderedParts.forEach((renderedPart, index) => {\n      const element = renderedPart.hoverElement;\n      element.tabIndex = 0;\n      disposables.add(dom.addDisposableListener(element, dom.EventType.FOCUS_IN, event => {\n        event.stopPropagation();\n        this._focusedHoverPartIndex = index;\n      }));\n      disposables.add(dom.addDisposableListener(element, dom.EventType.FOCUS_OUT, event => {\n        event.stopPropagation();\n        this._focusedHoverPartIndex = -1;\n      }));\n    });\n    return disposables;\n  }\n  _updateMarkdownAndColorParticipantInfo(participants) {\n    const markdownHoverParticipant = participants.find(p => {\n      return p instanceof MarkdownHoverParticipant && !(p instanceof InlayHintsHover);\n    });\n    if (markdownHoverParticipant) {\n      this._markdownHoverParticipant = markdownHoverParticipant;\n    }\n    this._colorHoverParticipant = participants.find(p => p instanceof ColorHoverParticipant);\n  }\n  async updateHoverVerbosityLevel(action, index, focus) {\n    if (!this._markdownHoverParticipant) {\n      return;\n    }\n    const normalizedMarkdownHoverIndex = this._normalizedIndexToMarkdownHoverIndexRange(this._markdownHoverParticipant, index);\n    if (normalizedMarkdownHoverIndex === undefined) {\n      return;\n    }\n    const renderedPart = await this._markdownHoverParticipant.updateMarkdownHoverVerbosityLevel(action, normalizedMarkdownHoverIndex, focus);\n    if (!renderedPart) {\n      return;\n    }\n    this._renderedParts[index] = {\n      type: 'hoverPart',\n      participant: this._markdownHoverParticipant,\n      hoverPart: renderedPart.hoverPart,\n      hoverElement: renderedPart.hoverElement\n    };\n    this._context.onContentsChanged();\n  }\n  isColorPickerVisible() {\n    return this._colorHoverParticipant?.isColorPickerVisible() ?? false;\n  }\n  _normalizedIndexToMarkdownHoverIndexRange(markdownHoverParticipant, index) {\n    const renderedPart = this._renderedParts[index];\n    if (!renderedPart || renderedPart.type !== 'hoverPart') {\n      return undefined;\n    }\n    const isHoverPartMarkdownHover = renderedPart.participant === markdownHoverParticipant;\n    if (!isHoverPartMarkdownHover) {\n      return undefined;\n    }\n    const firstIndexOfMarkdownHovers = this._renderedParts.findIndex(renderedPart => renderedPart.type === 'hoverPart' && renderedPart.participant === markdownHoverParticipant);\n    if (firstIndexOfMarkdownHovers === -1) {\n      throw new BugIndicatingError();\n    }\n    return index - firstIndexOfMarkdownHovers;\n  }\n  get domNode() {\n    return this._fragment;\n  }\n  get domNodeHasChildren() {\n    return this._fragment.hasChildNodes();\n  }\n  get focusedHoverPartIndex() {\n    return this._focusedHoverPartIndex;\n  }\n}\n_RenderedContentHoverParts = RenderedContentHoverParts;\n_RenderedContentHoverParts._DECORATION_OPTIONS = ModelDecorationOptions.register({\n  description: 'content-hover-highlight',\n  className: 'hoverHighlight'\n});","map":{"version":3,"names":["RenderedHoverParts","Disposable","DisposableStore","toDisposable","EditorHoverStatusBar","ModelDecorationOptions","Position","Range","dom","MarkdownHoverParticipant","ColorHoverParticipant","InlayHintsHover","BugIndicatingError","RenderedContentHover","constructor","editor","hoverResult","participants","computer","context","keybindingService","anchor","parts","hoverParts","_renderedHoverParts","_register","RenderedContentHoverParts","showAtPosition","showAtSecondaryPosition","computeHoverPositions","range","shouldAppearBeforeContent","some","m","isBeforeContent","initialMousePosX","initialMousePosY","shouldFocus","source","domNode","domNodeHasChildren","focusedHoverPartIndex","updateHoverVerbosityLevel","action","index","focus","isColorPickerVisible","anchorRange","startColumnBoundary","hasModel","viewModel","_getViewModel","coordinatesConverter","anchorViewRange","convertModelRangeToViewRange","anchorViewMinColumn","getLineMinColumn","startLineNumber","anchorViewRangeStart","convertViewPositionToModelPosition","column","anchorStartLineNumber","secondaryPositionColumn","startColumn","forceShowAtRange","hoverPart","hoverPartRange","hoverPartRangeOnAnchorStartLine","hoverPartRangeOnAnchorEndLine","endLineNumber","hoverPartRangeIsOnAnchorLine","hoverPartStartColumn","minSecondaryPositionColumn","Math","min","max","forceShowAtPosition","getStartPosition","RenderedStatusBar","fragment","_statusBar","appendChild","hoverElement","actions","dispose","_renderedParts","_focusedHoverPartIndex","_context","_fragment","document","createDocumentFragment","_renderParts","_registerListenersOnRenderedParts","_createEditorDecorations","_updateMarkdownAndColorParticipantInfo","length","None","highlightRange","plusRange","highlightDecoration","createDecorationsCollection","set","options","_DECORATION_OPTIONS","clear","hoverContext","statusBar","hoverRenderingContext","disposables","participant","renderedHoverParts","_renderHoverPartsForParticipant","add","renderedHoverPart","push","type","renderedStatusBar","_renderStatusBar","hoverPartsForParticipant","filter","owner","hasHoverPartsForParticipant","renderHoverParts","hasContent","undefined","forEach","renderedPart","element","tabIndex","addDisposableListener","EventType","FOCUS_IN","event","stopPropagation","FOCUS_OUT","markdownHoverParticipant","find","p","_markdownHoverParticipant","_colorHoverParticipant","normalizedMarkdownHoverIndex","_normalizedIndexToMarkdownHoverIndexRange","updateMarkdownHoverVerbosityLevel","onContentsChanged","isHoverPartMarkdownHover","firstIndexOfMarkdownHovers","findIndex","hasChildNodes","_RenderedContentHoverParts","register","description","className"],"sources":["P:/WebStorm/judgex_front/node_modules/monaco-editor/esm/vs/editor/contrib/hover/browser/contentHoverRendered.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { RenderedHoverParts } from './hoverTypes.js';\nimport { Disposable, DisposableStore, toDisposable } from '../../../../base/common/lifecycle.js';\nimport { EditorHoverStatusBar } from './contentHoverStatusBar.js';\nimport { ModelDecorationOptions } from '../../../common/model/textModel.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport * as dom from '../../../../base/browser/dom.js';\nimport { MarkdownHoverParticipant } from './markdownHoverParticipant.js';\nimport { ColorHoverParticipant } from '../../colorPicker/browser/colorHoverParticipant.js';\nimport { InlayHintsHover } from '../../inlayHints/browser/inlayHintsHover.js';\nimport { BugIndicatingError } from '../../../../base/common/errors.js';\nexport class RenderedContentHover extends Disposable {\n    constructor(editor, hoverResult, participants, computer, context, keybindingService) {\n        super();\n        const anchor = hoverResult.anchor;\n        const parts = hoverResult.hoverParts;\n        this._renderedHoverParts = this._register(new RenderedContentHoverParts(editor, participants, parts, keybindingService, context));\n        const { showAtPosition, showAtSecondaryPosition } = RenderedContentHover.computeHoverPositions(editor, anchor.range, parts);\n        this.shouldAppearBeforeContent = parts.some(m => m.isBeforeContent);\n        this.showAtPosition = showAtPosition;\n        this.showAtSecondaryPosition = showAtSecondaryPosition;\n        this.initialMousePosX = anchor.initialMousePosX;\n        this.initialMousePosY = anchor.initialMousePosY;\n        this.shouldFocus = computer.shouldFocus;\n        this.source = computer.source;\n    }\n    get domNode() {\n        return this._renderedHoverParts.domNode;\n    }\n    get domNodeHasChildren() {\n        return this._renderedHoverParts.domNodeHasChildren;\n    }\n    get focusedHoverPartIndex() {\n        return this._renderedHoverParts.focusedHoverPartIndex;\n    }\n    async updateHoverVerbosityLevel(action, index, focus) {\n        this._renderedHoverParts.updateHoverVerbosityLevel(action, index, focus);\n    }\n    isColorPickerVisible() {\n        return this._renderedHoverParts.isColorPickerVisible();\n    }\n    static computeHoverPositions(editor, anchorRange, hoverParts) {\n        let startColumnBoundary = 1;\n        if (editor.hasModel()) {\n            // Ensure the range is on the current view line\n            const viewModel = editor._getViewModel();\n            const coordinatesConverter = viewModel.coordinatesConverter;\n            const anchorViewRange = coordinatesConverter.convertModelRangeToViewRange(anchorRange);\n            const anchorViewMinColumn = viewModel.getLineMinColumn(anchorViewRange.startLineNumber);\n            const anchorViewRangeStart = new Position(anchorViewRange.startLineNumber, anchorViewMinColumn);\n            startColumnBoundary = coordinatesConverter.convertViewPositionToModelPosition(anchorViewRangeStart).column;\n        }\n        // The anchor range is always on a single line\n        const anchorStartLineNumber = anchorRange.startLineNumber;\n        let secondaryPositionColumn = anchorRange.startColumn;\n        let forceShowAtRange;\n        for (const hoverPart of hoverParts) {\n            const hoverPartRange = hoverPart.range;\n            const hoverPartRangeOnAnchorStartLine = hoverPartRange.startLineNumber === anchorStartLineNumber;\n            const hoverPartRangeOnAnchorEndLine = hoverPartRange.endLineNumber === anchorStartLineNumber;\n            const hoverPartRangeIsOnAnchorLine = hoverPartRangeOnAnchorStartLine && hoverPartRangeOnAnchorEndLine;\n            if (hoverPartRangeIsOnAnchorLine) {\n                // this message has a range that is completely sitting on the line of the anchor\n                const hoverPartStartColumn = hoverPartRange.startColumn;\n                const minSecondaryPositionColumn = Math.min(secondaryPositionColumn, hoverPartStartColumn);\n                secondaryPositionColumn = Math.max(minSecondaryPositionColumn, startColumnBoundary);\n            }\n            if (hoverPart.forceShowAtRange) {\n                forceShowAtRange = hoverPartRange;\n            }\n        }\n        let showAtPosition;\n        let showAtSecondaryPosition;\n        if (forceShowAtRange) {\n            const forceShowAtPosition = forceShowAtRange.getStartPosition();\n            showAtPosition = forceShowAtPosition;\n            showAtSecondaryPosition = forceShowAtPosition;\n        }\n        else {\n            showAtPosition = anchorRange.getStartPosition();\n            showAtSecondaryPosition = new Position(anchorStartLineNumber, secondaryPositionColumn);\n        }\n        return {\n            showAtPosition,\n            showAtSecondaryPosition,\n        };\n    }\n}\nclass RenderedStatusBar {\n    constructor(fragment, _statusBar) {\n        this._statusBar = _statusBar;\n        fragment.appendChild(this._statusBar.hoverElement);\n    }\n    get hoverElement() {\n        return this._statusBar.hoverElement;\n    }\n    get actions() {\n        return this._statusBar.actions;\n    }\n    dispose() {\n        this._statusBar.dispose();\n    }\n}\nclass RenderedContentHoverParts extends Disposable {\n    static { this._DECORATION_OPTIONS = ModelDecorationOptions.register({\n        description: 'content-hover-highlight',\n        className: 'hoverHighlight'\n    }); }\n    constructor(editor, participants, hoverParts, keybindingService, context) {\n        super();\n        this._renderedParts = [];\n        this._focusedHoverPartIndex = -1;\n        this._context = context;\n        this._fragment = document.createDocumentFragment();\n        this._register(this._renderParts(participants, hoverParts, context, keybindingService));\n        this._register(this._registerListenersOnRenderedParts());\n        this._register(this._createEditorDecorations(editor, hoverParts));\n        this._updateMarkdownAndColorParticipantInfo(participants);\n    }\n    _createEditorDecorations(editor, hoverParts) {\n        if (hoverParts.length === 0) {\n            return Disposable.None;\n        }\n        let highlightRange = hoverParts[0].range;\n        for (const hoverPart of hoverParts) {\n            const hoverPartRange = hoverPart.range;\n            highlightRange = Range.plusRange(highlightRange, hoverPartRange);\n        }\n        const highlightDecoration = editor.createDecorationsCollection();\n        highlightDecoration.set([{\n                range: highlightRange,\n                options: RenderedContentHoverParts._DECORATION_OPTIONS\n            }]);\n        return toDisposable(() => {\n            highlightDecoration.clear();\n        });\n    }\n    _renderParts(participants, hoverParts, hoverContext, keybindingService) {\n        const statusBar = new EditorHoverStatusBar(keybindingService);\n        const hoverRenderingContext = {\n            fragment: this._fragment,\n            statusBar,\n            ...hoverContext\n        };\n        const disposables = new DisposableStore();\n        for (const participant of participants) {\n            const renderedHoverParts = this._renderHoverPartsForParticipant(hoverParts, participant, hoverRenderingContext);\n            disposables.add(renderedHoverParts);\n            for (const renderedHoverPart of renderedHoverParts.renderedHoverParts) {\n                this._renderedParts.push({\n                    type: 'hoverPart',\n                    participant,\n                    hoverPart: renderedHoverPart.hoverPart,\n                    hoverElement: renderedHoverPart.hoverElement,\n                });\n            }\n        }\n        const renderedStatusBar = this._renderStatusBar(this._fragment, statusBar);\n        if (renderedStatusBar) {\n            disposables.add(renderedStatusBar);\n            this._renderedParts.push({\n                type: 'statusBar',\n                hoverElement: renderedStatusBar.hoverElement,\n                actions: renderedStatusBar.actions,\n            });\n        }\n        return toDisposable(() => { disposables.dispose(); });\n    }\n    _renderHoverPartsForParticipant(hoverParts, participant, hoverRenderingContext) {\n        const hoverPartsForParticipant = hoverParts.filter(hoverPart => hoverPart.owner === participant);\n        const hasHoverPartsForParticipant = hoverPartsForParticipant.length > 0;\n        if (!hasHoverPartsForParticipant) {\n            return new RenderedHoverParts([]);\n        }\n        return participant.renderHoverParts(hoverRenderingContext, hoverPartsForParticipant);\n    }\n    _renderStatusBar(fragment, statusBar) {\n        if (!statusBar.hasContent) {\n            return undefined;\n        }\n        return new RenderedStatusBar(fragment, statusBar);\n    }\n    _registerListenersOnRenderedParts() {\n        const disposables = new DisposableStore();\n        this._renderedParts.forEach((renderedPart, index) => {\n            const element = renderedPart.hoverElement;\n            element.tabIndex = 0;\n            disposables.add(dom.addDisposableListener(element, dom.EventType.FOCUS_IN, (event) => {\n                event.stopPropagation();\n                this._focusedHoverPartIndex = index;\n            }));\n            disposables.add(dom.addDisposableListener(element, dom.EventType.FOCUS_OUT, (event) => {\n                event.stopPropagation();\n                this._focusedHoverPartIndex = -1;\n            }));\n        });\n        return disposables;\n    }\n    _updateMarkdownAndColorParticipantInfo(participants) {\n        const markdownHoverParticipant = participants.find(p => {\n            return (p instanceof MarkdownHoverParticipant) && !(p instanceof InlayHintsHover);\n        });\n        if (markdownHoverParticipant) {\n            this._markdownHoverParticipant = markdownHoverParticipant;\n        }\n        this._colorHoverParticipant = participants.find(p => p instanceof ColorHoverParticipant);\n    }\n    async updateHoverVerbosityLevel(action, index, focus) {\n        if (!this._markdownHoverParticipant) {\n            return;\n        }\n        const normalizedMarkdownHoverIndex = this._normalizedIndexToMarkdownHoverIndexRange(this._markdownHoverParticipant, index);\n        if (normalizedMarkdownHoverIndex === undefined) {\n            return;\n        }\n        const renderedPart = await this._markdownHoverParticipant.updateMarkdownHoverVerbosityLevel(action, normalizedMarkdownHoverIndex, focus);\n        if (!renderedPart) {\n            return;\n        }\n        this._renderedParts[index] = {\n            type: 'hoverPart',\n            participant: this._markdownHoverParticipant,\n            hoverPart: renderedPart.hoverPart,\n            hoverElement: renderedPart.hoverElement,\n        };\n        this._context.onContentsChanged();\n    }\n    isColorPickerVisible() {\n        return this._colorHoverParticipant?.isColorPickerVisible() ?? false;\n    }\n    _normalizedIndexToMarkdownHoverIndexRange(markdownHoverParticipant, index) {\n        const renderedPart = this._renderedParts[index];\n        if (!renderedPart || renderedPart.type !== 'hoverPart') {\n            return undefined;\n        }\n        const isHoverPartMarkdownHover = renderedPart.participant === markdownHoverParticipant;\n        if (!isHoverPartMarkdownHover) {\n            return undefined;\n        }\n        const firstIndexOfMarkdownHovers = this._renderedParts.findIndex(renderedPart => renderedPart.type === 'hoverPart'\n            && renderedPart.participant === markdownHoverParticipant);\n        if (firstIndexOfMarkdownHovers === -1) {\n            throw new BugIndicatingError();\n        }\n        return index - firstIndexOfMarkdownHovers;\n    }\n    get domNode() {\n        return this._fragment;\n    }\n    get domNodeHasChildren() {\n        return this._fragment.hasChildNodes();\n    }\n    get focusedHoverPartIndex() {\n        return this._focusedHoverPartIndex;\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}