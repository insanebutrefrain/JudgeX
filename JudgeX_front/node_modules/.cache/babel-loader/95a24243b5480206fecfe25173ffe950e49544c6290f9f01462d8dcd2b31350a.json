{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { equals } from '../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { LineRange } from '../core/lineRange.js';\n/**\n * @internal\n */\nexport class AttachedViews {\n  constructor() {\n    this._onDidChangeVisibleRanges = new Emitter();\n    this.onDidChangeVisibleRanges = this._onDidChangeVisibleRanges.event;\n    this._views = new Set();\n  }\n  attachView() {\n    const view = new AttachedViewImpl(state => {\n      this._onDidChangeVisibleRanges.fire({\n        view,\n        state\n      });\n    });\n    this._views.add(view);\n    return view;\n  }\n  detachView(view) {\n    this._views.delete(view);\n    this._onDidChangeVisibleRanges.fire({\n      view,\n      state: undefined\n    });\n  }\n}\nclass AttachedViewImpl {\n  constructor(handleStateChange) {\n    this.handleStateChange = handleStateChange;\n  }\n  setVisibleLines(visibleLines, stabilized) {\n    const visibleLineRanges = visibleLines.map(line => new LineRange(line.startLineNumber, line.endLineNumber + 1));\n    this.handleStateChange({\n      visibleLineRanges,\n      stabilized\n    });\n  }\n}\nexport class AttachedViewHandler extends Disposable {\n  get lineRanges() {\n    return this._lineRanges;\n  }\n  constructor(_refreshTokens) {\n    super();\n    this._refreshTokens = _refreshTokens;\n    this.runner = this._register(new RunOnceScheduler(() => this.update(), 50));\n    this._computedLineRanges = [];\n    this._lineRanges = [];\n  }\n  update() {\n    if (equals(this._computedLineRanges, this._lineRanges, (a, b) => a.equals(b))) {\n      return;\n    }\n    this._computedLineRanges = this._lineRanges;\n    this._refreshTokens();\n  }\n  handleStateChange(state) {\n    this._lineRanges = state.visibleLineRanges;\n    if (state.stabilized) {\n      this.runner.cancel();\n      this.update();\n    } else {\n      this.runner.schedule();\n    }\n  }\n}\nexport class AbstractTokens extends Disposable {\n  get backgroundTokenizationState() {\n    return this._backgroundTokenizationState;\n  }\n  constructor(_languageIdCodec, _textModel, getLanguageId) {\n    super();\n    this._languageIdCodec = _languageIdCodec;\n    this._textModel = _textModel;\n    this.getLanguageId = getLanguageId;\n    this._backgroundTokenizationState = 1 /* BackgroundTokenizationState.InProgress */;\n    this._onDidChangeBackgroundTokenizationState = this._register(new Emitter());\n    /** @internal, should not be exposed by the text model! */\n    this.onDidChangeBackgroundTokenizationState = this._onDidChangeBackgroundTokenizationState.event;\n    this._onDidChangeTokens = this._register(new Emitter());\n    /** @internal, should not be exposed by the text model! */\n    this.onDidChangeTokens = this._onDidChangeTokens.event;\n  }\n  tokenizeIfCheap(lineNumber) {\n    if (this.isCheapToTokenize(lineNumber)) {\n      this.forceTokenization(lineNumber);\n    }\n  }\n}","map":{"version":3,"names":["equals","RunOnceScheduler","Emitter","Disposable","LineRange","AttachedViews","constructor","_onDidChangeVisibleRanges","onDidChangeVisibleRanges","event","_views","Set","attachView","view","AttachedViewImpl","state","fire","add","detachView","delete","undefined","handleStateChange","setVisibleLines","visibleLines","stabilized","visibleLineRanges","map","line","startLineNumber","endLineNumber","AttachedViewHandler","lineRanges","_lineRanges","_refreshTokens","runner","_register","update","_computedLineRanges","a","b","cancel","schedule","AbstractTokens","backgroundTokenizationState","_backgroundTokenizationState","_languageIdCodec","_textModel","getLanguageId","_onDidChangeBackgroundTokenizationState","onDidChangeBackgroundTokenizationState","_onDidChangeTokens","onDidChangeTokens","tokenizeIfCheap","lineNumber","isCheapToTokenize","forceTokenization"],"sources":["P:/IDEA/JudgeX/judgex_front/node_modules/monaco-editor/esm/vs/editor/common/model/tokens.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { equals } from '../../../base/common/arrays.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { LineRange } from '../core/lineRange.js';\n/**\n * @internal\n */\nexport class AttachedViews {\n    constructor() {\n        this._onDidChangeVisibleRanges = new Emitter();\n        this.onDidChangeVisibleRanges = this._onDidChangeVisibleRanges.event;\n        this._views = new Set();\n    }\n    attachView() {\n        const view = new AttachedViewImpl((state) => {\n            this._onDidChangeVisibleRanges.fire({ view, state });\n        });\n        this._views.add(view);\n        return view;\n    }\n    detachView(view) {\n        this._views.delete(view);\n        this._onDidChangeVisibleRanges.fire({ view, state: undefined });\n    }\n}\nclass AttachedViewImpl {\n    constructor(handleStateChange) {\n        this.handleStateChange = handleStateChange;\n    }\n    setVisibleLines(visibleLines, stabilized) {\n        const visibleLineRanges = visibleLines.map((line) => new LineRange(line.startLineNumber, line.endLineNumber + 1));\n        this.handleStateChange({ visibleLineRanges, stabilized });\n    }\n}\nexport class AttachedViewHandler extends Disposable {\n    get lineRanges() { return this._lineRanges; }\n    constructor(_refreshTokens) {\n        super();\n        this._refreshTokens = _refreshTokens;\n        this.runner = this._register(new RunOnceScheduler(() => this.update(), 50));\n        this._computedLineRanges = [];\n        this._lineRanges = [];\n    }\n    update() {\n        if (equals(this._computedLineRanges, this._lineRanges, (a, b) => a.equals(b))) {\n            return;\n        }\n        this._computedLineRanges = this._lineRanges;\n        this._refreshTokens();\n    }\n    handleStateChange(state) {\n        this._lineRanges = state.visibleLineRanges;\n        if (state.stabilized) {\n            this.runner.cancel();\n            this.update();\n        }\n        else {\n            this.runner.schedule();\n        }\n    }\n}\nexport class AbstractTokens extends Disposable {\n    get backgroundTokenizationState() {\n        return this._backgroundTokenizationState;\n    }\n    constructor(_languageIdCodec, _textModel, getLanguageId) {\n        super();\n        this._languageIdCodec = _languageIdCodec;\n        this._textModel = _textModel;\n        this.getLanguageId = getLanguageId;\n        this._backgroundTokenizationState = 1 /* BackgroundTokenizationState.InProgress */;\n        this._onDidChangeBackgroundTokenizationState = this._register(new Emitter());\n        /** @internal, should not be exposed by the text model! */\n        this.onDidChangeBackgroundTokenizationState = this._onDidChangeBackgroundTokenizationState.event;\n        this._onDidChangeTokens = this._register(new Emitter());\n        /** @internal, should not be exposed by the text model! */\n        this.onDidChangeTokens = this._onDidChangeTokens.event;\n    }\n    tokenizeIfCheap(lineNumber) {\n        if (this.isCheapToTokenize(lineNumber)) {\n            this.forceTokenization(lineNumber);\n        }\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}