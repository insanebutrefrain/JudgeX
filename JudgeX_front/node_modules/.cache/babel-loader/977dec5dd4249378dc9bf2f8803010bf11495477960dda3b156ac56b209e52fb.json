{"ast":null,"code":"var _InlayHintsFragments;\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CancellationError, onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { URI } from '../../../../base/common/uri.js';\nexport class InlayHintAnchor {\n  constructor(range, direction) {\n    this.range = range;\n    this.direction = direction;\n  }\n}\nexport class InlayHintItem {\n  constructor(hint, anchor, provider) {\n    this.hint = hint;\n    this.anchor = anchor;\n    this.provider = provider;\n    this._isResolved = false;\n  }\n  with(delta) {\n    const result = new InlayHintItem(this.hint, delta.anchor, this.provider);\n    result._isResolved = this._isResolved;\n    result._currentResolve = this._currentResolve;\n    return result;\n  }\n  async resolve(token) {\n    if (typeof this.provider.resolveInlayHint !== 'function') {\n      return;\n    }\n    if (this._currentResolve) {\n      // wait for an active resolve operation and try again\n      // when that's done.\n      await this._currentResolve;\n      if (token.isCancellationRequested) {\n        return;\n      }\n      return this.resolve(token);\n    }\n    if (!this._isResolved) {\n      this._currentResolve = this._doResolve(token).finally(() => this._currentResolve = undefined);\n    }\n    await this._currentResolve;\n  }\n  async _doResolve(token) {\n    try {\n      const newHint = await Promise.resolve(this.provider.resolveInlayHint(this.hint, token));\n      this.hint.tooltip = newHint?.tooltip ?? this.hint.tooltip;\n      this.hint.label = newHint?.label ?? this.hint.label;\n      this.hint.textEdits = newHint?.textEdits ?? this.hint.textEdits;\n      this._isResolved = true;\n    } catch (err) {\n      onUnexpectedExternalError(err);\n      this._isResolved = false;\n    }\n  }\n}\nexport class InlayHintsFragments {\n  static async create(registry, model, ranges, token) {\n    const data = [];\n    const promises = registry.ordered(model).reverse().map(provider => ranges.map(async range => {\n      try {\n        const result = await provider.provideInlayHints(model, range, token);\n        if (result?.hints.length || provider.onDidChangeInlayHints) {\n          data.push([result ?? InlayHintsFragments._emptyInlayHintList, provider]);\n        }\n      } catch (err) {\n        onUnexpectedExternalError(err);\n      }\n    }));\n    await Promise.all(promises.flat());\n    if (token.isCancellationRequested || model.isDisposed()) {\n      throw new CancellationError();\n    }\n    return new InlayHintsFragments(ranges, data, model);\n  }\n  constructor(ranges, data, model) {\n    this._disposables = new DisposableStore();\n    this.ranges = ranges;\n    this.provider = new Set();\n    const items = [];\n    for (const [list, provider] of data) {\n      this._disposables.add(list);\n      this.provider.add(provider);\n      for (const hint of list.hints) {\n        // compute the range to which the item should be attached to\n        const position = model.validatePosition(hint.position);\n        let direction = 'before';\n        const wordRange = InlayHintsFragments._getRangeAtPosition(model, position);\n        let range;\n        if (wordRange.getStartPosition().isBefore(position)) {\n          range = Range.fromPositions(wordRange.getStartPosition(), position);\n          direction = 'after';\n        } else {\n          range = Range.fromPositions(position, wordRange.getEndPosition());\n          direction = 'before';\n        }\n        items.push(new InlayHintItem(hint, new InlayHintAnchor(range, direction), provider));\n      }\n    }\n    this.items = items.sort((a, b) => Position.compare(a.hint.position, b.hint.position));\n  }\n  dispose() {\n    this._disposables.dispose();\n  }\n  static _getRangeAtPosition(model, position) {\n    const line = position.lineNumber;\n    const word = model.getWordAtPosition(position);\n    if (word) {\n      // always prefer the word range\n      return new Range(line, word.startColumn, line, word.endColumn);\n    }\n    model.tokenization.tokenizeIfCheap(line);\n    const tokens = model.tokenization.getLineTokens(line);\n    const offset = position.column - 1;\n    const idx = tokens.findTokenIndexAtOffset(offset);\n    let start = tokens.getStartOffset(idx);\n    let end = tokens.getEndOffset(idx);\n    if (end - start === 1) {\n      // single character token, when at its end try leading/trailing token instead\n      if (start === offset && idx > 1) {\n        // leading token\n        start = tokens.getStartOffset(idx - 1);\n        end = tokens.getEndOffset(idx - 1);\n      } else if (end === offset && idx < tokens.getCount() - 1) {\n        // trailing token\n        start = tokens.getStartOffset(idx + 1);\n        end = tokens.getEndOffset(idx + 1);\n      }\n    }\n    return new Range(line, start + 1, line, end + 1);\n  }\n}\n_InlayHintsFragments = InlayHintsFragments;\n_InlayHintsFragments._emptyInlayHintList = Object.freeze({\n  dispose() {},\n  hints: []\n});\nexport function asCommandLink(command) {\n  return URI.from({\n    scheme: Schemas.command,\n    path: command.id,\n    query: command.arguments && encodeURIComponent(JSON.stringify(command.arguments))\n  }).toString();\n}","map":{"version":3,"names":["CancellationError","onUnexpectedExternalError","DisposableStore","Position","Range","Schemas","URI","InlayHintAnchor","constructor","range","direction","InlayHintItem","hint","anchor","provider","_isResolved","with","delta","result","_currentResolve","resolve","token","resolveInlayHint","isCancellationRequested","_doResolve","finally","undefined","newHint","Promise","tooltip","label","textEdits","err","InlayHintsFragments","create","registry","model","ranges","data","promises","ordered","reverse","map","provideInlayHints","hints","length","onDidChangeInlayHints","push","_emptyInlayHintList","all","flat","isDisposed","_disposables","Set","items","list","add","position","validatePosition","wordRange","_getRangeAtPosition","getStartPosition","isBefore","fromPositions","getEndPosition","sort","a","b","compare","dispose","line","lineNumber","word","getWordAtPosition","startColumn","endColumn","tokenization","tokenizeIfCheap","tokens","getLineTokens","offset","column","idx","findTokenIndexAtOffset","start","getStartOffset","end","getEndOffset","getCount","_InlayHintsFragments","Object","freeze","asCommandLink","command","from","scheme","path","id","query","arguments","encodeURIComponent","JSON","stringify","toString"],"sources":["P:/IDEA/JudgeX/JudgeX_front/node_modules/monaco-editor/esm/vs/editor/contrib/inlayHints/browser/inlayHints.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CancellationError, onUnexpectedExternalError } from '../../../../base/common/errors.js';\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { Schemas } from '../../../../base/common/network.js';\nimport { URI } from '../../../../base/common/uri.js';\nexport class InlayHintAnchor {\n    constructor(range, direction) {\n        this.range = range;\n        this.direction = direction;\n    }\n}\nexport class InlayHintItem {\n    constructor(hint, anchor, provider) {\n        this.hint = hint;\n        this.anchor = anchor;\n        this.provider = provider;\n        this._isResolved = false;\n    }\n    with(delta) {\n        const result = new InlayHintItem(this.hint, delta.anchor, this.provider);\n        result._isResolved = this._isResolved;\n        result._currentResolve = this._currentResolve;\n        return result;\n    }\n    async resolve(token) {\n        if (typeof this.provider.resolveInlayHint !== 'function') {\n            return;\n        }\n        if (this._currentResolve) {\n            // wait for an active resolve operation and try again\n            // when that's done.\n            await this._currentResolve;\n            if (token.isCancellationRequested) {\n                return;\n            }\n            return this.resolve(token);\n        }\n        if (!this._isResolved) {\n            this._currentResolve = this._doResolve(token)\n                .finally(() => this._currentResolve = undefined);\n        }\n        await this._currentResolve;\n    }\n    async _doResolve(token) {\n        try {\n            const newHint = await Promise.resolve(this.provider.resolveInlayHint(this.hint, token));\n            this.hint.tooltip = newHint?.tooltip ?? this.hint.tooltip;\n            this.hint.label = newHint?.label ?? this.hint.label;\n            this.hint.textEdits = newHint?.textEdits ?? this.hint.textEdits;\n            this._isResolved = true;\n        }\n        catch (err) {\n            onUnexpectedExternalError(err);\n            this._isResolved = false;\n        }\n    }\n}\nexport class InlayHintsFragments {\n    static { this._emptyInlayHintList = Object.freeze({ dispose() { }, hints: [] }); }\n    static async create(registry, model, ranges, token) {\n        const data = [];\n        const promises = registry.ordered(model).reverse().map(provider => ranges.map(async (range) => {\n            try {\n                const result = await provider.provideInlayHints(model, range, token);\n                if (result?.hints.length || provider.onDidChangeInlayHints) {\n                    data.push([result ?? InlayHintsFragments._emptyInlayHintList, provider]);\n                }\n            }\n            catch (err) {\n                onUnexpectedExternalError(err);\n            }\n        }));\n        await Promise.all(promises.flat());\n        if (token.isCancellationRequested || model.isDisposed()) {\n            throw new CancellationError();\n        }\n        return new InlayHintsFragments(ranges, data, model);\n    }\n    constructor(ranges, data, model) {\n        this._disposables = new DisposableStore();\n        this.ranges = ranges;\n        this.provider = new Set();\n        const items = [];\n        for (const [list, provider] of data) {\n            this._disposables.add(list);\n            this.provider.add(provider);\n            for (const hint of list.hints) {\n                // compute the range to which the item should be attached to\n                const position = model.validatePosition(hint.position);\n                let direction = 'before';\n                const wordRange = InlayHintsFragments._getRangeAtPosition(model, position);\n                let range;\n                if (wordRange.getStartPosition().isBefore(position)) {\n                    range = Range.fromPositions(wordRange.getStartPosition(), position);\n                    direction = 'after';\n                }\n                else {\n                    range = Range.fromPositions(position, wordRange.getEndPosition());\n                    direction = 'before';\n                }\n                items.push(new InlayHintItem(hint, new InlayHintAnchor(range, direction), provider));\n            }\n        }\n        this.items = items.sort((a, b) => Position.compare(a.hint.position, b.hint.position));\n    }\n    dispose() {\n        this._disposables.dispose();\n    }\n    static _getRangeAtPosition(model, position) {\n        const line = position.lineNumber;\n        const word = model.getWordAtPosition(position);\n        if (word) {\n            // always prefer the word range\n            return new Range(line, word.startColumn, line, word.endColumn);\n        }\n        model.tokenization.tokenizeIfCheap(line);\n        const tokens = model.tokenization.getLineTokens(line);\n        const offset = position.column - 1;\n        const idx = tokens.findTokenIndexAtOffset(offset);\n        let start = tokens.getStartOffset(idx);\n        let end = tokens.getEndOffset(idx);\n        if (end - start === 1) {\n            // single character token, when at its end try leading/trailing token instead\n            if (start === offset && idx > 1) {\n                // leading token\n                start = tokens.getStartOffset(idx - 1);\n                end = tokens.getEndOffset(idx - 1);\n            }\n            else if (end === offset && idx < tokens.getCount() - 1) {\n                // trailing token\n                start = tokens.getStartOffset(idx + 1);\n                end = tokens.getEndOffset(idx + 1);\n            }\n        }\n        return new Range(line, start + 1, line, end + 1);\n    }\n}\nexport function asCommandLink(command) {\n    return URI.from({\n        scheme: Schemas.command,\n        path: command.id,\n        query: command.arguments && encodeURIComponent(JSON.stringify(command.arguments))\n    }).toString();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}