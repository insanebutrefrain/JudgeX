{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { Color, RGBA } from '../../../../base/common/color.js';\nimport { registerColor, transparent, lighten, darken } from '../colorUtils.js';\n// Import the colors we need\nimport { foreground, contrastBorder, focusBorder, iconForeground } from './baseColors.js';\nimport { editorWidgetBackground } from './editorColors.js';\n// ----- input\nexport const inputBackground = registerColor('input.background', {\n  dark: '#3C3C3C',\n  light: Color.white,\n  hcDark: Color.black,\n  hcLight: Color.white\n}, nls.localize('inputBoxBackground', \"Input box background.\"));\nexport const inputForeground = registerColor('input.foreground', foreground, nls.localize('inputBoxForeground', \"Input box foreground.\"));\nexport const inputBorder = registerColor('input.border', {\n  dark: null,\n  light: null,\n  hcDark: contrastBorder,\n  hcLight: contrastBorder\n}, nls.localize('inputBoxBorder', \"Input box border.\"));\nexport const inputActiveOptionBorder = registerColor('inputOption.activeBorder', {\n  dark: '#007ACC',\n  light: '#007ACC',\n  hcDark: contrastBorder,\n  hcLight: contrastBorder\n}, nls.localize('inputBoxActiveOptionBorder', \"Border color of activated options in input fields.\"));\nexport const inputActiveOptionHoverBackground = registerColor('inputOption.hoverBackground', {\n  dark: '#5a5d5e80',\n  light: '#b8b8b850',\n  hcDark: null,\n  hcLight: null\n}, nls.localize('inputOption.hoverBackground', \"Background color of activated options in input fields.\"));\nexport const inputActiveOptionBackground = registerColor('inputOption.activeBackground', {\n  dark: transparent(focusBorder, 0.4),\n  light: transparent(focusBorder, 0.2),\n  hcDark: Color.transparent,\n  hcLight: Color.transparent\n}, nls.localize('inputOption.activeBackground', \"Background hover color of options in input fields.\"));\nexport const inputActiveOptionForeground = registerColor('inputOption.activeForeground', {\n  dark: Color.white,\n  light: Color.black,\n  hcDark: foreground,\n  hcLight: foreground\n}, nls.localize('inputOption.activeForeground', \"Foreground color of activated options in input fields.\"));\nexport const inputPlaceholderForeground = registerColor('input.placeholderForeground', {\n  light: transparent(foreground, 0.5),\n  dark: transparent(foreground, 0.5),\n  hcDark: transparent(foreground, 0.7),\n  hcLight: transparent(foreground, 0.7)\n}, nls.localize('inputPlaceholderForeground', \"Input box foreground color for placeholder text.\"));\n// ----- input validation\nexport const inputValidationInfoBackground = registerColor('inputValidation.infoBackground', {\n  dark: '#063B49',\n  light: '#D6ECF2',\n  hcDark: Color.black,\n  hcLight: Color.white\n}, nls.localize('inputValidationInfoBackground', \"Input validation background color for information severity.\"));\nexport const inputValidationInfoForeground = registerColor('inputValidation.infoForeground', {\n  dark: null,\n  light: null,\n  hcDark: null,\n  hcLight: foreground\n}, nls.localize('inputValidationInfoForeground', \"Input validation foreground color for information severity.\"));\nexport const inputValidationInfoBorder = registerColor('inputValidation.infoBorder', {\n  dark: '#007acc',\n  light: '#007acc',\n  hcDark: contrastBorder,\n  hcLight: contrastBorder\n}, nls.localize('inputValidationInfoBorder', \"Input validation border color for information severity.\"));\nexport const inputValidationWarningBackground = registerColor('inputValidation.warningBackground', {\n  dark: '#352A05',\n  light: '#F6F5D2',\n  hcDark: Color.black,\n  hcLight: Color.white\n}, nls.localize('inputValidationWarningBackground', \"Input validation background color for warning severity.\"));\nexport const inputValidationWarningForeground = registerColor('inputValidation.warningForeground', {\n  dark: null,\n  light: null,\n  hcDark: null,\n  hcLight: foreground\n}, nls.localize('inputValidationWarningForeground', \"Input validation foreground color for warning severity.\"));\nexport const inputValidationWarningBorder = registerColor('inputValidation.warningBorder', {\n  dark: '#B89500',\n  light: '#B89500',\n  hcDark: contrastBorder,\n  hcLight: contrastBorder\n}, nls.localize('inputValidationWarningBorder', \"Input validation border color for warning severity.\"));\nexport const inputValidationErrorBackground = registerColor('inputValidation.errorBackground', {\n  dark: '#5A1D1D',\n  light: '#F2DEDE',\n  hcDark: Color.black,\n  hcLight: Color.white\n}, nls.localize('inputValidationErrorBackground', \"Input validation background color for error severity.\"));\nexport const inputValidationErrorForeground = registerColor('inputValidation.errorForeground', {\n  dark: null,\n  light: null,\n  hcDark: null,\n  hcLight: foreground\n}, nls.localize('inputValidationErrorForeground', \"Input validation foreground color for error severity.\"));\nexport const inputValidationErrorBorder = registerColor('inputValidation.errorBorder', {\n  dark: '#BE1100',\n  light: '#BE1100',\n  hcDark: contrastBorder,\n  hcLight: contrastBorder\n}, nls.localize('inputValidationErrorBorder', \"Input validation border color for error severity.\"));\n// ----- select\nexport const selectBackground = registerColor('dropdown.background', {\n  dark: '#3C3C3C',\n  light: Color.white,\n  hcDark: Color.black,\n  hcLight: Color.white\n}, nls.localize('dropdownBackground', \"Dropdown background.\"));\nexport const selectListBackground = registerColor('dropdown.listBackground', {\n  dark: null,\n  light: null,\n  hcDark: Color.black,\n  hcLight: Color.white\n}, nls.localize('dropdownListBackground', \"Dropdown list background.\"));\nexport const selectForeground = registerColor('dropdown.foreground', {\n  dark: '#F0F0F0',\n  light: foreground,\n  hcDark: Color.white,\n  hcLight: foreground\n}, nls.localize('dropdownForeground', \"Dropdown foreground.\"));\nexport const selectBorder = registerColor('dropdown.border', {\n  dark: selectBackground,\n  light: '#CECECE',\n  hcDark: contrastBorder,\n  hcLight: contrastBorder\n}, nls.localize('dropdownBorder', \"Dropdown border.\"));\n// ------ button\nexport const buttonForeground = registerColor('button.foreground', Color.white, nls.localize('buttonForeground', \"Button foreground color.\"));\nexport const buttonSeparator = registerColor('button.separator', transparent(buttonForeground, .4), nls.localize('buttonSeparator', \"Button separator color.\"));\nexport const buttonBackground = registerColor('button.background', {\n  dark: '#0E639C',\n  light: '#007ACC',\n  hcDark: null,\n  hcLight: '#0F4A85'\n}, nls.localize('buttonBackground', \"Button background color.\"));\nexport const buttonHoverBackground = registerColor('button.hoverBackground', {\n  dark: lighten(buttonBackground, 0.2),\n  light: darken(buttonBackground, 0.2),\n  hcDark: buttonBackground,\n  hcLight: buttonBackground\n}, nls.localize('buttonHoverBackground', \"Button background color when hovering.\"));\nexport const buttonBorder = registerColor('button.border', contrastBorder, nls.localize('buttonBorder', \"Button border color.\"));\nexport const buttonSecondaryForeground = registerColor('button.secondaryForeground', {\n  dark: Color.white,\n  light: Color.white,\n  hcDark: Color.white,\n  hcLight: foreground\n}, nls.localize('buttonSecondaryForeground', \"Secondary button foreground color.\"));\nexport const buttonSecondaryBackground = registerColor('button.secondaryBackground', {\n  dark: '#3A3D41',\n  light: '#5F6A79',\n  hcDark: null,\n  hcLight: Color.white\n}, nls.localize('buttonSecondaryBackground', \"Secondary button background color.\"));\nexport const buttonSecondaryHoverBackground = registerColor('button.secondaryHoverBackground', {\n  dark: lighten(buttonSecondaryBackground, 0.2),\n  light: darken(buttonSecondaryBackground, 0.2),\n  hcDark: null,\n  hcLight: null\n}, nls.localize('buttonSecondaryHoverBackground', \"Secondary button background color when hovering.\"));\n// ------ radio\nexport const radioActiveForeground = registerColor('radio.activeForeground', inputActiveOptionForeground, nls.localize('radioActiveForeground', \"Foreground color of active radio option.\"));\nexport const radioActiveBackground = registerColor('radio.activeBackground', inputActiveOptionBackground, nls.localize('radioBackground', \"Background color of active radio option.\"));\nexport const radioActiveBorder = registerColor('radio.activeBorder', inputActiveOptionBorder, nls.localize('radioActiveBorder', \"Border color of the active radio option.\"));\nexport const radioInactiveForeground = registerColor('radio.inactiveForeground', null, nls.localize('radioInactiveForeground', \"Foreground color of inactive radio option.\"));\nexport const radioInactiveBackground = registerColor('radio.inactiveBackground', null, nls.localize('radioInactiveBackground', \"Background color of inactive radio option.\"));\nexport const radioInactiveBorder = registerColor('radio.inactiveBorder', {\n  light: transparent(radioActiveForeground, .2),\n  dark: transparent(radioActiveForeground, .2),\n  hcDark: transparent(radioActiveForeground, .4),\n  hcLight: transparent(radioActiveForeground, .2)\n}, nls.localize('radioInactiveBorder', \"Border color of the inactive radio option.\"));\nexport const radioInactiveHoverBackground = registerColor('radio.inactiveHoverBackground', inputActiveOptionHoverBackground, nls.localize('radioHoverBackground', \"Background color of inactive active radio option when hovering.\"));\n// ------ checkbox\nexport const checkboxBackground = registerColor('checkbox.background', selectBackground, nls.localize('checkbox.background', \"Background color of checkbox widget.\"));\nexport const checkboxSelectBackground = registerColor('checkbox.selectBackground', editorWidgetBackground, nls.localize('checkbox.select.background', \"Background color of checkbox widget when the element it's in is selected.\"));\nexport const checkboxForeground = registerColor('checkbox.foreground', selectForeground, nls.localize('checkbox.foreground', \"Foreground color of checkbox widget.\"));\nexport const checkboxBorder = registerColor('checkbox.border', selectBorder, nls.localize('checkbox.border', \"Border color of checkbox widget.\"));\nexport const checkboxSelectBorder = registerColor('checkbox.selectBorder', iconForeground, nls.localize('checkbox.select.border', \"Border color of checkbox widget when the element it's in is selected.\"));\n// ------ keybinding label\nexport const keybindingLabelBackground = registerColor('keybindingLabel.background', {\n  dark: new Color(new RGBA(128, 128, 128, 0.17)),\n  light: new Color(new RGBA(221, 221, 221, 0.4)),\n  hcDark: Color.transparent,\n  hcLight: Color.transparent\n}, nls.localize('keybindingLabelBackground', \"Keybinding label background color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelForeground = registerColor('keybindingLabel.foreground', {\n  dark: Color.fromHex('#CCCCCC'),\n  light: Color.fromHex('#555555'),\n  hcDark: Color.white,\n  hcLight: foreground\n}, nls.localize('keybindingLabelForeground', \"Keybinding label foreground color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelBorder = registerColor('keybindingLabel.border', {\n  dark: new Color(new RGBA(51, 51, 51, 0.6)),\n  light: new Color(new RGBA(204, 204, 204, 0.4)),\n  hcDark: new Color(new RGBA(111, 195, 223)),\n  hcLight: contrastBorder\n}, nls.localize('keybindingLabelBorder', \"Keybinding label border color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelBottomBorder = registerColor('keybindingLabel.bottomBorder', {\n  dark: new Color(new RGBA(68, 68, 68, 0.6)),\n  light: new Color(new RGBA(187, 187, 187, 0.4)),\n  hcDark: new Color(new RGBA(111, 195, 223)),\n  hcLight: foreground\n}, nls.localize('keybindingLabelBottomBorder', \"Keybinding label border bottom color. The keybinding label is used to represent a keyboard shortcut.\"));","map":{"version":3,"names":["nls","Color","RGBA","registerColor","transparent","lighten","darken","foreground","contrastBorder","focusBorder","iconForeground","editorWidgetBackground","inputBackground","dark","light","white","hcDark","black","hcLight","localize","inputForeground","inputBorder","inputActiveOptionBorder","inputActiveOptionHoverBackground","inputActiveOptionBackground","inputActiveOptionForeground","inputPlaceholderForeground","inputValidationInfoBackground","inputValidationInfoForeground","inputValidationInfoBorder","inputValidationWarningBackground","inputValidationWarningForeground","inputValidationWarningBorder","inputValidationErrorBackground","inputValidationErrorForeground","inputValidationErrorBorder","selectBackground","selectListBackground","selectForeground","selectBorder","buttonForeground","buttonSeparator","buttonBackground","buttonHoverBackground","buttonBorder","buttonSecondaryForeground","buttonSecondaryBackground","buttonSecondaryHoverBackground","radioActiveForeground","radioActiveBackground","radioActiveBorder","radioInactiveForeground","radioInactiveBackground","radioInactiveBorder","radioInactiveHoverBackground","checkboxBackground","checkboxSelectBackground","checkboxForeground","checkboxBorder","checkboxSelectBorder","keybindingLabelBackground","keybindingLabelForeground","fromHex","keybindingLabelBorder","keybindingLabelBottomBorder"],"sources":["P:/IDEA/JudgeX/judgex_front/node_modules/monaco-editor/esm/vs/platform/theme/common/colors/inputColors.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../../nls.js';\n// Import the effects we need\nimport { Color, RGBA } from '../../../../base/common/color.js';\nimport { registerColor, transparent, lighten, darken } from '../colorUtils.js';\n// Import the colors we need\nimport { foreground, contrastBorder, focusBorder, iconForeground } from './baseColors.js';\nimport { editorWidgetBackground } from './editorColors.js';\n// ----- input\nexport const inputBackground = registerColor('input.background', { dark: '#3C3C3C', light: Color.white, hcDark: Color.black, hcLight: Color.white }, nls.localize('inputBoxBackground', \"Input box background.\"));\nexport const inputForeground = registerColor('input.foreground', foreground, nls.localize('inputBoxForeground', \"Input box foreground.\"));\nexport const inputBorder = registerColor('input.border', { dark: null, light: null, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputBoxBorder', \"Input box border.\"));\nexport const inputActiveOptionBorder = registerColor('inputOption.activeBorder', { dark: '#007ACC', light: '#007ACC', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputBoxActiveOptionBorder', \"Border color of activated options in input fields.\"));\nexport const inputActiveOptionHoverBackground = registerColor('inputOption.hoverBackground', { dark: '#5a5d5e80', light: '#b8b8b850', hcDark: null, hcLight: null }, nls.localize('inputOption.hoverBackground', \"Background color of activated options in input fields.\"));\nexport const inputActiveOptionBackground = registerColor('inputOption.activeBackground', { dark: transparent(focusBorder, 0.4), light: transparent(focusBorder, 0.2), hcDark: Color.transparent, hcLight: Color.transparent }, nls.localize('inputOption.activeBackground', \"Background hover color of options in input fields.\"));\nexport const inputActiveOptionForeground = registerColor('inputOption.activeForeground', { dark: Color.white, light: Color.black, hcDark: foreground, hcLight: foreground }, nls.localize('inputOption.activeForeground', \"Foreground color of activated options in input fields.\"));\nexport const inputPlaceholderForeground = registerColor('input.placeholderForeground', { light: transparent(foreground, 0.5), dark: transparent(foreground, 0.5), hcDark: transparent(foreground, 0.7), hcLight: transparent(foreground, 0.7) }, nls.localize('inputPlaceholderForeground', \"Input box foreground color for placeholder text.\"));\n// ----- input validation\nexport const inputValidationInfoBackground = registerColor('inputValidation.infoBackground', { dark: '#063B49', light: '#D6ECF2', hcDark: Color.black, hcLight: Color.white }, nls.localize('inputValidationInfoBackground', \"Input validation background color for information severity.\"));\nexport const inputValidationInfoForeground = registerColor('inputValidation.infoForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, nls.localize('inputValidationInfoForeground', \"Input validation foreground color for information severity.\"));\nexport const inputValidationInfoBorder = registerColor('inputValidation.infoBorder', { dark: '#007acc', light: '#007acc', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputValidationInfoBorder', \"Input validation border color for information severity.\"));\nexport const inputValidationWarningBackground = registerColor('inputValidation.warningBackground', { dark: '#352A05', light: '#F6F5D2', hcDark: Color.black, hcLight: Color.white }, nls.localize('inputValidationWarningBackground', \"Input validation background color for warning severity.\"));\nexport const inputValidationWarningForeground = registerColor('inputValidation.warningForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, nls.localize('inputValidationWarningForeground', \"Input validation foreground color for warning severity.\"));\nexport const inputValidationWarningBorder = registerColor('inputValidation.warningBorder', { dark: '#B89500', light: '#B89500', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputValidationWarningBorder', \"Input validation border color for warning severity.\"));\nexport const inputValidationErrorBackground = registerColor('inputValidation.errorBackground', { dark: '#5A1D1D', light: '#F2DEDE', hcDark: Color.black, hcLight: Color.white }, nls.localize('inputValidationErrorBackground', \"Input validation background color for error severity.\"));\nexport const inputValidationErrorForeground = registerColor('inputValidation.errorForeground', { dark: null, light: null, hcDark: null, hcLight: foreground }, nls.localize('inputValidationErrorForeground', \"Input validation foreground color for error severity.\"));\nexport const inputValidationErrorBorder = registerColor('inputValidation.errorBorder', { dark: '#BE1100', light: '#BE1100', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('inputValidationErrorBorder', \"Input validation border color for error severity.\"));\n// ----- select\nexport const selectBackground = registerColor('dropdown.background', { dark: '#3C3C3C', light: Color.white, hcDark: Color.black, hcLight: Color.white }, nls.localize('dropdownBackground', \"Dropdown background.\"));\nexport const selectListBackground = registerColor('dropdown.listBackground', { dark: null, light: null, hcDark: Color.black, hcLight: Color.white }, nls.localize('dropdownListBackground', \"Dropdown list background.\"));\nexport const selectForeground = registerColor('dropdown.foreground', { dark: '#F0F0F0', light: foreground, hcDark: Color.white, hcLight: foreground }, nls.localize('dropdownForeground', \"Dropdown foreground.\"));\nexport const selectBorder = registerColor('dropdown.border', { dark: selectBackground, light: '#CECECE', hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('dropdownBorder', \"Dropdown border.\"));\n// ------ button\nexport const buttonForeground = registerColor('button.foreground', Color.white, nls.localize('buttonForeground', \"Button foreground color.\"));\nexport const buttonSeparator = registerColor('button.separator', transparent(buttonForeground, .4), nls.localize('buttonSeparator', \"Button separator color.\"));\nexport const buttonBackground = registerColor('button.background', { dark: '#0E639C', light: '#007ACC', hcDark: null, hcLight: '#0F4A85' }, nls.localize('buttonBackground', \"Button background color.\"));\nexport const buttonHoverBackground = registerColor('button.hoverBackground', { dark: lighten(buttonBackground, 0.2), light: darken(buttonBackground, 0.2), hcDark: buttonBackground, hcLight: buttonBackground }, nls.localize('buttonHoverBackground', \"Button background color when hovering.\"));\nexport const buttonBorder = registerColor('button.border', contrastBorder, nls.localize('buttonBorder', \"Button border color.\"));\nexport const buttonSecondaryForeground = registerColor('button.secondaryForeground', { dark: Color.white, light: Color.white, hcDark: Color.white, hcLight: foreground }, nls.localize('buttonSecondaryForeground', \"Secondary button foreground color.\"));\nexport const buttonSecondaryBackground = registerColor('button.secondaryBackground', { dark: '#3A3D41', light: '#5F6A79', hcDark: null, hcLight: Color.white }, nls.localize('buttonSecondaryBackground', \"Secondary button background color.\"));\nexport const buttonSecondaryHoverBackground = registerColor('button.secondaryHoverBackground', { dark: lighten(buttonSecondaryBackground, 0.2), light: darken(buttonSecondaryBackground, 0.2), hcDark: null, hcLight: null }, nls.localize('buttonSecondaryHoverBackground', \"Secondary button background color when hovering.\"));\n// ------ radio\nexport const radioActiveForeground = registerColor('radio.activeForeground', inputActiveOptionForeground, nls.localize('radioActiveForeground', \"Foreground color of active radio option.\"));\nexport const radioActiveBackground = registerColor('radio.activeBackground', inputActiveOptionBackground, nls.localize('radioBackground', \"Background color of active radio option.\"));\nexport const radioActiveBorder = registerColor('radio.activeBorder', inputActiveOptionBorder, nls.localize('radioActiveBorder', \"Border color of the active radio option.\"));\nexport const radioInactiveForeground = registerColor('radio.inactiveForeground', null, nls.localize('radioInactiveForeground', \"Foreground color of inactive radio option.\"));\nexport const radioInactiveBackground = registerColor('radio.inactiveBackground', null, nls.localize('radioInactiveBackground', \"Background color of inactive radio option.\"));\nexport const radioInactiveBorder = registerColor('radio.inactiveBorder', { light: transparent(radioActiveForeground, .2), dark: transparent(radioActiveForeground, .2), hcDark: transparent(radioActiveForeground, .4), hcLight: transparent(radioActiveForeground, .2) }, nls.localize('radioInactiveBorder', \"Border color of the inactive radio option.\"));\nexport const radioInactiveHoverBackground = registerColor('radio.inactiveHoverBackground', inputActiveOptionHoverBackground, nls.localize('radioHoverBackground', \"Background color of inactive active radio option when hovering.\"));\n// ------ checkbox\nexport const checkboxBackground = registerColor('checkbox.background', selectBackground, nls.localize('checkbox.background', \"Background color of checkbox widget.\"));\nexport const checkboxSelectBackground = registerColor('checkbox.selectBackground', editorWidgetBackground, nls.localize('checkbox.select.background', \"Background color of checkbox widget when the element it's in is selected.\"));\nexport const checkboxForeground = registerColor('checkbox.foreground', selectForeground, nls.localize('checkbox.foreground', \"Foreground color of checkbox widget.\"));\nexport const checkboxBorder = registerColor('checkbox.border', selectBorder, nls.localize('checkbox.border', \"Border color of checkbox widget.\"));\nexport const checkboxSelectBorder = registerColor('checkbox.selectBorder', iconForeground, nls.localize('checkbox.select.border', \"Border color of checkbox widget when the element it's in is selected.\"));\n// ------ keybinding label\nexport const keybindingLabelBackground = registerColor('keybindingLabel.background', { dark: new Color(new RGBA(128, 128, 128, 0.17)), light: new Color(new RGBA(221, 221, 221, 0.4)), hcDark: Color.transparent, hcLight: Color.transparent }, nls.localize('keybindingLabelBackground', \"Keybinding label background color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelForeground = registerColor('keybindingLabel.foreground', { dark: Color.fromHex('#CCCCCC'), light: Color.fromHex('#555555'), hcDark: Color.white, hcLight: foreground }, nls.localize('keybindingLabelForeground', \"Keybinding label foreground color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelBorder = registerColor('keybindingLabel.border', { dark: new Color(new RGBA(51, 51, 51, 0.6)), light: new Color(new RGBA(204, 204, 204, 0.4)), hcDark: new Color(new RGBA(111, 195, 223)), hcLight: contrastBorder }, nls.localize('keybindingLabelBorder', \"Keybinding label border color. The keybinding label is used to represent a keyboard shortcut.\"));\nexport const keybindingLabelBottomBorder = registerColor('keybindingLabel.bottomBorder', { dark: new Color(new RGBA(68, 68, 68, 0.6)), light: new Color(new RGBA(187, 187, 187, 0.4)), hcDark: new Color(new RGBA(111, 195, 223)), hcLight: foreground }, nls.localize('keybindingLabelBottomBorder', \"Keybinding label border bottom color. The keybinding label is used to represent a keyboard shortcut.\"));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}