{"ast":null,"code":"var _SnippetController;\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar SnippetController2_1;\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { EditorCommand, registerEditorCommand, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { Position } from '../../../common/core/position.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { showSimpleSuggestions } from '../../suggest/browser/suggest.js';\nimport { localize } from '../../../../nls.js';\nimport { ContextKeyExpr, IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { SnippetSession } from './snippetSession.js';\nconst _defaultOptions = {\n  overwriteBefore: 0,\n  overwriteAfter: 0,\n  undoStopBefore: true,\n  undoStopAfter: true,\n  adjustWhitespace: true,\n  clipboardText: undefined,\n  overtypingCapturer: undefined\n};\nlet SnippetController2 = (_SnippetController = class SnippetController2 {\n  static get(editor) {\n    return editor.getContribution(SnippetController2_1.ID);\n  }\n  constructor(_editor, _logService, _languageFeaturesService, contextKeyService, _languageConfigurationService) {\n    this._editor = _editor;\n    this._logService = _logService;\n    this._languageFeaturesService = _languageFeaturesService;\n    this._languageConfigurationService = _languageConfigurationService;\n    this._snippetListener = new DisposableStore();\n    this._modelVersionId = -1;\n    this._inSnippet = SnippetController2_1.InSnippetMode.bindTo(contextKeyService);\n    this._hasNextTabstop = SnippetController2_1.HasNextTabstop.bindTo(contextKeyService);\n    this._hasPrevTabstop = SnippetController2_1.HasPrevTabstop.bindTo(contextKeyService);\n  }\n  dispose() {\n    this._inSnippet.reset();\n    this._hasPrevTabstop.reset();\n    this._hasNextTabstop.reset();\n    this._session?.dispose();\n    this._snippetListener.dispose();\n  }\n  insert(template, opts) {\n    // this is here to find out more about the yet-not-understood\n    // error that sometimes happens when we fail to inserted a nested\n    // snippet\n    try {\n      this._doInsert(template, typeof opts === 'undefined' ? _defaultOptions : {\n        ..._defaultOptions,\n        ...opts\n      });\n    } catch (e) {\n      this.cancel();\n      this._logService.error(e);\n      this._logService.error('snippet_error');\n      this._logService.error('insert_template=', template);\n      this._logService.error('existing_template=', this._session ? this._session._logInfo() : '<no_session>');\n    }\n  }\n  _doInsert(template, opts) {\n    if (!this._editor.hasModel()) {\n      return;\n    }\n    // don't listen while inserting the snippet\n    // as that is the inflight state causing cancelation\n    this._snippetListener.clear();\n    if (opts.undoStopBefore) {\n      this._editor.getModel().pushStackElement();\n    }\n    // don't merge\n    if (this._session && typeof template !== 'string') {\n      this.cancel();\n    }\n    if (!this._session) {\n      this._modelVersionId = this._editor.getModel().getAlternativeVersionId();\n      this._session = new SnippetSession(this._editor, template, opts, this._languageConfigurationService);\n      this._session.insert();\n    } else {\n      assertType(typeof template === 'string');\n      this._session.merge(template, opts);\n    }\n    if (opts.undoStopAfter) {\n      this._editor.getModel().pushStackElement();\n    }\n    // regster completion item provider when there is any choice element\n    if (this._session?.hasChoice) {\n      const provider = {\n        _debugDisplayName: 'snippetChoiceCompletions',\n        provideCompletionItems: (model, position) => {\n          if (!this._session || model !== this._editor.getModel() || !Position.equals(this._editor.getPosition(), position)) {\n            return undefined;\n          }\n          const {\n            activeChoice\n          } = this._session;\n          if (!activeChoice || activeChoice.choice.options.length === 0) {\n            return undefined;\n          }\n          const word = model.getValueInRange(activeChoice.range);\n          const isAnyOfOptions = Boolean(activeChoice.choice.options.find(o => o.value === word));\n          const suggestions = [];\n          for (let i = 0; i < activeChoice.choice.options.length; i++) {\n            const option = activeChoice.choice.options[i];\n            suggestions.push({\n              kind: 13 /* CompletionItemKind.Value */,\n              label: option.value,\n              insertText: option.value,\n              sortText: 'a'.repeat(i + 1),\n              range: activeChoice.range,\n              filterText: isAnyOfOptions ? `${word}_${option.value}` : undefined,\n              command: {\n                id: 'jumpToNextSnippetPlaceholder',\n                title: localize('next', 'Go to next placeholder...')\n              }\n            });\n          }\n          return {\n            suggestions\n          };\n        }\n      };\n      const model = this._editor.getModel();\n      let registration;\n      let isRegistered = false;\n      const disable = () => {\n        registration?.dispose();\n        isRegistered = false;\n      };\n      const enable = () => {\n        if (!isRegistered) {\n          registration = this._languageFeaturesService.completionProvider.register({\n            language: model.getLanguageId(),\n            pattern: model.uri.fsPath,\n            scheme: model.uri.scheme,\n            exclusive: true\n          }, provider);\n          this._snippetListener.add(registration);\n          isRegistered = true;\n        }\n      };\n      this._choiceCompletions = {\n        provider,\n        enable,\n        disable\n      };\n    }\n    this._updateState();\n    this._snippetListener.add(this._editor.onDidChangeModelContent(e => e.isFlush && this.cancel()));\n    this._snippetListener.add(this._editor.onDidChangeModel(() => this.cancel()));\n    this._snippetListener.add(this._editor.onDidChangeCursorSelection(() => this._updateState()));\n  }\n  _updateState() {\n    if (!this._session || !this._editor.hasModel()) {\n      // canceled in the meanwhile\n      return;\n    }\n    if (this._modelVersionId === this._editor.getModel().getAlternativeVersionId()) {\n      // undo until the 'before' state happened\n      // and makes use cancel snippet mode\n      return this.cancel();\n    }\n    if (!this._session.hasPlaceholder) {\n      // don't listen for selection changes and don't\n      // update context keys when the snippet is plain text\n      return this.cancel();\n    }\n    if (this._session.isAtLastPlaceholder || !this._session.isSelectionWithinPlaceholders()) {\n      this._editor.getModel().pushStackElement();\n      return this.cancel();\n    }\n    this._inSnippet.set(true);\n    this._hasPrevTabstop.set(!this._session.isAtFirstPlaceholder);\n    this._hasNextTabstop.set(!this._session.isAtLastPlaceholder);\n    this._handleChoice();\n  }\n  _handleChoice() {\n    if (!this._session || !this._editor.hasModel()) {\n      this._currentChoice = undefined;\n      return;\n    }\n    const {\n      activeChoice\n    } = this._session;\n    if (!activeChoice || !this._choiceCompletions) {\n      this._choiceCompletions?.disable();\n      this._currentChoice = undefined;\n      return;\n    }\n    if (this._currentChoice !== activeChoice.choice) {\n      this._currentChoice = activeChoice.choice;\n      this._choiceCompletions.enable();\n      // trigger suggest with the special choice completion provider\n      queueMicrotask(() => {\n        showSimpleSuggestions(this._editor, this._choiceCompletions.provider);\n      });\n    }\n  }\n  finish() {\n    while (this._inSnippet.get()) {\n      this.next();\n    }\n  }\n  cancel(resetSelection = false) {\n    this._inSnippet.reset();\n    this._hasPrevTabstop.reset();\n    this._hasNextTabstop.reset();\n    this._snippetListener.clear();\n    this._currentChoice = undefined;\n    this._session?.dispose();\n    this._session = undefined;\n    this._modelVersionId = -1;\n    if (resetSelection) {\n      // reset selection to the primary cursor when being asked\n      // for. this happens when explicitly cancelling snippet mode,\n      // e.g. when pressing ESC\n      this._editor.setSelections([this._editor.getSelection()]);\n    }\n  }\n  prev() {\n    this._session?.prev();\n    this._updateState();\n  }\n  next() {\n    this._session?.next();\n    this._updateState();\n  }\n  isInSnippet() {\n    return Boolean(this._inSnippet.get());\n  }\n}, SnippetController2_1 = _SnippetController, _SnippetController.ID = 'snippetController2', _SnippetController.InSnippetMode = new RawContextKey('inSnippetMode', false, localize('inSnippetMode', \"Whether the editor in current in snippet mode\")), _SnippetController.HasNextTabstop = new RawContextKey('hasNextTabstop', false, localize('hasNextTabstop', \"Whether there is a next tab stop when in snippet mode\")), _SnippetController.HasPrevTabstop = new RawContextKey('hasPrevTabstop', false, localize('hasPrevTabstop', \"Whether there is a previous tab stop when in snippet mode\")), _SnippetController);\nSnippetController2 = SnippetController2_1 = __decorate([__param(1, ILogService), __param(2, ILanguageFeaturesService), __param(3, IContextKeyService), __param(4, ILanguageConfigurationService)], SnippetController2);\nexport { SnippetController2 };\nregisterEditorContribution(SnippetController2.ID, SnippetController2, 4 /* EditorContributionInstantiation.Lazy */);\nconst CommandCtor = EditorCommand.bindToContribution(SnippetController2.get);\nregisterEditorCommand(new CommandCtor({\n  id: 'jumpToNextSnippetPlaceholder',\n  precondition: ContextKeyExpr.and(SnippetController2.InSnippetMode, SnippetController2.HasNextTabstop),\n  handler: ctrl => ctrl.next(),\n  kbOpts: {\n    weight: 100 /* KeybindingWeight.EditorContrib */ + 30,\n    kbExpr: EditorContextKeys.textInputFocus,\n    primary: 2 /* KeyCode.Tab */\n  }\n}));\nregisterEditorCommand(new CommandCtor({\n  id: 'jumpToPrevSnippetPlaceholder',\n  precondition: ContextKeyExpr.and(SnippetController2.InSnippetMode, SnippetController2.HasPrevTabstop),\n  handler: ctrl => ctrl.prev(),\n  kbOpts: {\n    weight: 100 /* KeybindingWeight.EditorContrib */ + 30,\n    kbExpr: EditorContextKeys.textInputFocus,\n    primary: 1024 /* KeyMod.Shift */ | 2 /* KeyCode.Tab */\n  }\n}));\nregisterEditorCommand(new CommandCtor({\n  id: 'leaveSnippet',\n  precondition: SnippetController2.InSnippetMode,\n  handler: ctrl => ctrl.cancel(true),\n  kbOpts: {\n    weight: 100 /* KeybindingWeight.EditorContrib */ + 30,\n    kbExpr: EditorContextKeys.textInputFocus,\n    primary: 9 /* KeyCode.Escape */,\n    secondary: [1024 /* KeyMod.Shift */ | 9 /* KeyCode.Escape */]\n  }\n}));\nregisterEditorCommand(new CommandCtor({\n  id: 'acceptSnippet',\n  precondition: SnippetController2.InSnippetMode,\n  handler: ctrl => ctrl.finish()\n  // kbOpts: {\n  // \tweight: KeybindingWeight.EditorContrib + 30,\n  // \tkbExpr: EditorContextKeys.textFocus,\n  // \tprimary: KeyCode.Enter,\n  // }\n}));","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","SnippetController2_1","DisposableStore","assertType","EditorCommand","registerEditorCommand","registerEditorContribution","Position","EditorContextKeys","ILanguageConfigurationService","ILanguageFeaturesService","showSimpleSuggestions","localize","ContextKeyExpr","IContextKeyService","RawContextKey","ILogService","SnippetSession","_defaultOptions","overwriteBefore","overwriteAfter","undoStopBefore","undoStopAfter","adjustWhitespace","clipboardText","undefined","overtypingCapturer","SnippetController2","_SnippetController","get","editor","getContribution","ID","constructor","_editor","_logService","_languageFeaturesService","contextKeyService","_languageConfigurationService","_snippetListener","_modelVersionId","_inSnippet","InSnippetMode","bindTo","_hasNextTabstop","HasNextTabstop","_hasPrevTabstop","HasPrevTabstop","dispose","reset","_session","insert","template","opts","_doInsert","e","cancel","error","_logInfo","hasModel","clear","getModel","pushStackElement","getAlternativeVersionId","merge","hasChoice","provider","_debugDisplayName","provideCompletionItems","model","position","equals","getPosition","activeChoice","choice","options","word","getValueInRange","range","isAnyOfOptions","Boolean","find","o","value","suggestions","option","push","kind","label","insertText","sortText","repeat","filterText","command","id","title","registration","isRegistered","disable","enable","completionProvider","register","language","getLanguageId","pattern","uri","fsPath","scheme","exclusive","add","_choiceCompletions","_updateState","onDidChangeModelContent","isFlush","onDidChangeModel","onDidChangeCursorSelection","hasPlaceholder","isAtLastPlaceholder","isSelectionWithinPlaceholders","set","isAtFirstPlaceholder","_handleChoice","_currentChoice","queueMicrotask","finish","next","resetSelection","setSelections","getSelection","prev","isInSnippet","CommandCtor","bindToContribution","precondition","and","handler","ctrl","kbOpts","weight","kbExpr","textInputFocus","primary","secondary"],"sources":["P:/IDEA/JudgeX/judgex_front/node_modules/monaco-editor/esm/vs/editor/contrib/snippet/browser/snippetController2.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar SnippetController2_1;\nimport { DisposableStore } from '../../../../base/common/lifecycle.js';\nimport { assertType } from '../../../../base/common/types.js';\nimport { EditorCommand, registerEditorCommand, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { Position } from '../../../common/core/position.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { ILanguageConfigurationService } from '../../../common/languages/languageConfigurationRegistry.js';\nimport { ILanguageFeaturesService } from '../../../common/services/languageFeatures.js';\nimport { showSimpleSuggestions } from '../../suggest/browser/suggest.js';\nimport { localize } from '../../../../nls.js';\nimport { ContextKeyExpr, IContextKeyService, RawContextKey } from '../../../../platform/contextkey/common/contextkey.js';\nimport { ILogService } from '../../../../platform/log/common/log.js';\nimport { SnippetSession } from './snippetSession.js';\nconst _defaultOptions = {\n    overwriteBefore: 0,\n    overwriteAfter: 0,\n    undoStopBefore: true,\n    undoStopAfter: true,\n    adjustWhitespace: true,\n    clipboardText: undefined,\n    overtypingCapturer: undefined\n};\nlet SnippetController2 = class SnippetController2 {\n    static { SnippetController2_1 = this; }\n    static { this.ID = 'snippetController2'; }\n    static get(editor) {\n        return editor.getContribution(SnippetController2_1.ID);\n    }\n    static { this.InSnippetMode = new RawContextKey('inSnippetMode', false, localize('inSnippetMode', \"Whether the editor in current in snippet mode\")); }\n    static { this.HasNextTabstop = new RawContextKey('hasNextTabstop', false, localize('hasNextTabstop', \"Whether there is a next tab stop when in snippet mode\")); }\n    static { this.HasPrevTabstop = new RawContextKey('hasPrevTabstop', false, localize('hasPrevTabstop', \"Whether there is a previous tab stop when in snippet mode\")); }\n    constructor(_editor, _logService, _languageFeaturesService, contextKeyService, _languageConfigurationService) {\n        this._editor = _editor;\n        this._logService = _logService;\n        this._languageFeaturesService = _languageFeaturesService;\n        this._languageConfigurationService = _languageConfigurationService;\n        this._snippetListener = new DisposableStore();\n        this._modelVersionId = -1;\n        this._inSnippet = SnippetController2_1.InSnippetMode.bindTo(contextKeyService);\n        this._hasNextTabstop = SnippetController2_1.HasNextTabstop.bindTo(contextKeyService);\n        this._hasPrevTabstop = SnippetController2_1.HasPrevTabstop.bindTo(contextKeyService);\n    }\n    dispose() {\n        this._inSnippet.reset();\n        this._hasPrevTabstop.reset();\n        this._hasNextTabstop.reset();\n        this._session?.dispose();\n        this._snippetListener.dispose();\n    }\n    insert(template, opts) {\n        // this is here to find out more about the yet-not-understood\n        // error that sometimes happens when we fail to inserted a nested\n        // snippet\n        try {\n            this._doInsert(template, typeof opts === 'undefined' ? _defaultOptions : { ..._defaultOptions, ...opts });\n        }\n        catch (e) {\n            this.cancel();\n            this._logService.error(e);\n            this._logService.error('snippet_error');\n            this._logService.error('insert_template=', template);\n            this._logService.error('existing_template=', this._session ? this._session._logInfo() : '<no_session>');\n        }\n    }\n    _doInsert(template, opts) {\n        if (!this._editor.hasModel()) {\n            return;\n        }\n        // don't listen while inserting the snippet\n        // as that is the inflight state causing cancelation\n        this._snippetListener.clear();\n        if (opts.undoStopBefore) {\n            this._editor.getModel().pushStackElement();\n        }\n        // don't merge\n        if (this._session && typeof template !== 'string') {\n            this.cancel();\n        }\n        if (!this._session) {\n            this._modelVersionId = this._editor.getModel().getAlternativeVersionId();\n            this._session = new SnippetSession(this._editor, template, opts, this._languageConfigurationService);\n            this._session.insert();\n        }\n        else {\n            assertType(typeof template === 'string');\n            this._session.merge(template, opts);\n        }\n        if (opts.undoStopAfter) {\n            this._editor.getModel().pushStackElement();\n        }\n        // regster completion item provider when there is any choice element\n        if (this._session?.hasChoice) {\n            const provider = {\n                _debugDisplayName: 'snippetChoiceCompletions',\n                provideCompletionItems: (model, position) => {\n                    if (!this._session || model !== this._editor.getModel() || !Position.equals(this._editor.getPosition(), position)) {\n                        return undefined;\n                    }\n                    const { activeChoice } = this._session;\n                    if (!activeChoice || activeChoice.choice.options.length === 0) {\n                        return undefined;\n                    }\n                    const word = model.getValueInRange(activeChoice.range);\n                    const isAnyOfOptions = Boolean(activeChoice.choice.options.find(o => o.value === word));\n                    const suggestions = [];\n                    for (let i = 0; i < activeChoice.choice.options.length; i++) {\n                        const option = activeChoice.choice.options[i];\n                        suggestions.push({\n                            kind: 13 /* CompletionItemKind.Value */,\n                            label: option.value,\n                            insertText: option.value,\n                            sortText: 'a'.repeat(i + 1),\n                            range: activeChoice.range,\n                            filterText: isAnyOfOptions ? `${word}_${option.value}` : undefined,\n                            command: { id: 'jumpToNextSnippetPlaceholder', title: localize('next', 'Go to next placeholder...') }\n                        });\n                    }\n                    return { suggestions };\n                }\n            };\n            const model = this._editor.getModel();\n            let registration;\n            let isRegistered = false;\n            const disable = () => {\n                registration?.dispose();\n                isRegistered = false;\n            };\n            const enable = () => {\n                if (!isRegistered) {\n                    registration = this._languageFeaturesService.completionProvider.register({\n                        language: model.getLanguageId(),\n                        pattern: model.uri.fsPath,\n                        scheme: model.uri.scheme,\n                        exclusive: true\n                    }, provider);\n                    this._snippetListener.add(registration);\n                    isRegistered = true;\n                }\n            };\n            this._choiceCompletions = { provider, enable, disable };\n        }\n        this._updateState();\n        this._snippetListener.add(this._editor.onDidChangeModelContent(e => e.isFlush && this.cancel()));\n        this._snippetListener.add(this._editor.onDidChangeModel(() => this.cancel()));\n        this._snippetListener.add(this._editor.onDidChangeCursorSelection(() => this._updateState()));\n    }\n    _updateState() {\n        if (!this._session || !this._editor.hasModel()) {\n            // canceled in the meanwhile\n            return;\n        }\n        if (this._modelVersionId === this._editor.getModel().getAlternativeVersionId()) {\n            // undo until the 'before' state happened\n            // and makes use cancel snippet mode\n            return this.cancel();\n        }\n        if (!this._session.hasPlaceholder) {\n            // don't listen for selection changes and don't\n            // update context keys when the snippet is plain text\n            return this.cancel();\n        }\n        if (this._session.isAtLastPlaceholder || !this._session.isSelectionWithinPlaceholders()) {\n            this._editor.getModel().pushStackElement();\n            return this.cancel();\n        }\n        this._inSnippet.set(true);\n        this._hasPrevTabstop.set(!this._session.isAtFirstPlaceholder);\n        this._hasNextTabstop.set(!this._session.isAtLastPlaceholder);\n        this._handleChoice();\n    }\n    _handleChoice() {\n        if (!this._session || !this._editor.hasModel()) {\n            this._currentChoice = undefined;\n            return;\n        }\n        const { activeChoice } = this._session;\n        if (!activeChoice || !this._choiceCompletions) {\n            this._choiceCompletions?.disable();\n            this._currentChoice = undefined;\n            return;\n        }\n        if (this._currentChoice !== activeChoice.choice) {\n            this._currentChoice = activeChoice.choice;\n            this._choiceCompletions.enable();\n            // trigger suggest with the special choice completion provider\n            queueMicrotask(() => {\n                showSimpleSuggestions(this._editor, this._choiceCompletions.provider);\n            });\n        }\n    }\n    finish() {\n        while (this._inSnippet.get()) {\n            this.next();\n        }\n    }\n    cancel(resetSelection = false) {\n        this._inSnippet.reset();\n        this._hasPrevTabstop.reset();\n        this._hasNextTabstop.reset();\n        this._snippetListener.clear();\n        this._currentChoice = undefined;\n        this._session?.dispose();\n        this._session = undefined;\n        this._modelVersionId = -1;\n        if (resetSelection) {\n            // reset selection to the primary cursor when being asked\n            // for. this happens when explicitly cancelling snippet mode,\n            // e.g. when pressing ESC\n            this._editor.setSelections([this._editor.getSelection()]);\n        }\n    }\n    prev() {\n        this._session?.prev();\n        this._updateState();\n    }\n    next() {\n        this._session?.next();\n        this._updateState();\n    }\n    isInSnippet() {\n        return Boolean(this._inSnippet.get());\n    }\n};\nSnippetController2 = SnippetController2_1 = __decorate([\n    __param(1, ILogService),\n    __param(2, ILanguageFeaturesService),\n    __param(3, IContextKeyService),\n    __param(4, ILanguageConfigurationService)\n], SnippetController2);\nexport { SnippetController2 };\nregisterEditorContribution(SnippetController2.ID, SnippetController2, 4 /* EditorContributionInstantiation.Lazy */);\nconst CommandCtor = EditorCommand.bindToContribution(SnippetController2.get);\nregisterEditorCommand(new CommandCtor({\n    id: 'jumpToNextSnippetPlaceholder',\n    precondition: ContextKeyExpr.and(SnippetController2.InSnippetMode, SnippetController2.HasNextTabstop),\n    handler: ctrl => ctrl.next(),\n    kbOpts: {\n        weight: 100 /* KeybindingWeight.EditorContrib */ + 30,\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 2 /* KeyCode.Tab */\n    }\n}));\nregisterEditorCommand(new CommandCtor({\n    id: 'jumpToPrevSnippetPlaceholder',\n    precondition: ContextKeyExpr.and(SnippetController2.InSnippetMode, SnippetController2.HasPrevTabstop),\n    handler: ctrl => ctrl.prev(),\n    kbOpts: {\n        weight: 100 /* KeybindingWeight.EditorContrib */ + 30,\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 1024 /* KeyMod.Shift */ | 2 /* KeyCode.Tab */\n    }\n}));\nregisterEditorCommand(new CommandCtor({\n    id: 'leaveSnippet',\n    precondition: SnippetController2.InSnippetMode,\n    handler: ctrl => ctrl.cancel(true),\n    kbOpts: {\n        weight: 100 /* KeybindingWeight.EditorContrib */ + 30,\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 9 /* KeyCode.Escape */,\n        secondary: [1024 /* KeyMod.Shift */ | 9 /* KeyCode.Escape */]\n    }\n}));\nregisterEditorCommand(new CommandCtor({\n    id: 'acceptSnippet',\n    precondition: SnippetController2.InSnippetMode,\n    handler: ctrl => ctrl.finish(),\n    // kbOpts: {\n    // \tweight: KeybindingWeight.EditorContrib + 30,\n    // \tkbExpr: EditorContextKeys.textFocus,\n    // \tprimary: KeyCode.Enter,\n    // }\n}));\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}