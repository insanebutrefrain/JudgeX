{"ast":null,"code":"var _NullContext, _ConfigAwareContextValuesContainer;\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.every.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nimport { PauseableEmitter } from '../../../base/common/event.js';\nimport { Iterable } from '../../../base/common/iterator.js';\nimport { Disposable, MutableDisposable } from '../../../base/common/lifecycle.js';\nimport { cloneAndChange } from '../../../base/common/objects.js';\nimport { TernarySearchTree } from '../../../base/common/ternarySearchTree.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { localize } from '../../../nls.js';\nimport { CommandsRegistry } from '../../commands/common/commands.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IContextKeyService, RawContextKey } from '../common/contextkey.js';\nconst KEYBINDING_CONTEXT_ATTR = 'data-keybinding-context';\nexport class Context {\n  constructor(id, parent) {\n    this._id = id;\n    this._parent = parent;\n    this._value = Object.create(null);\n    this._value['_contextId'] = id;\n  }\n  get value() {\n    return {\n      ...this._value\n    };\n  }\n  setValue(key, value) {\n    // console.log('SET ' + key + ' = ' + value + ' ON ' + this._id);\n    if (this._value[key] !== value) {\n      this._value[key] = value;\n      return true;\n    }\n    return false;\n  }\n  removeValue(key) {\n    // console.log('REMOVE ' + key + ' FROM ' + this._id);\n    if (key in this._value) {\n      delete this._value[key];\n      return true;\n    }\n    return false;\n  }\n  getValue(key) {\n    const ret = this._value[key];\n    if (typeof ret === 'undefined' && this._parent) {\n      return this._parent.getValue(key);\n    }\n    return ret;\n  }\n}\nclass NullContext extends Context {\n  constructor() {\n    super(-1, null);\n  }\n  setValue(key, value) {\n    return false;\n  }\n  removeValue(key) {\n    return false;\n  }\n  getValue(key) {\n    return undefined;\n  }\n}\n_NullContext = NullContext;\n_NullContext.INSTANCE = new _NullContext();\nclass ConfigAwareContextValuesContainer extends Context {\n  constructor(id, _configurationService, emitter) {\n    super(id, null);\n    this._configurationService = _configurationService;\n    this._values = TernarySearchTree.forConfigKeys();\n    this._listener = this._configurationService.onDidChangeConfiguration(event => {\n      if (event.source === 7 /* ConfigurationTarget.DEFAULT */) {\n        // new setting, reset everything\n        const allKeys = Array.from(this._values, ([k]) => k);\n        this._values.clear();\n        emitter.fire(new ArrayContextKeyChangeEvent(allKeys));\n      } else {\n        const changedKeys = [];\n        for (const configKey of event.affectedKeys) {\n          const contextKey = `config.${configKey}`;\n          const cachedItems = this._values.findSuperstr(contextKey);\n          if (cachedItems !== undefined) {\n            changedKeys.push(...Iterable.map(cachedItems, ([key]) => key));\n            this._values.deleteSuperstr(contextKey);\n          }\n          if (this._values.has(contextKey)) {\n            changedKeys.push(contextKey);\n            this._values.delete(contextKey);\n          }\n        }\n        emitter.fire(new ArrayContextKeyChangeEvent(changedKeys));\n      }\n    });\n  }\n  dispose() {\n    this._listener.dispose();\n  }\n  getValue(key) {\n    if (key.indexOf(ConfigAwareContextValuesContainer._keyPrefix) !== 0) {\n      return super.getValue(key);\n    }\n    if (this._values.has(key)) {\n      return this._values.get(key);\n    }\n    const configKey = key.substr(ConfigAwareContextValuesContainer._keyPrefix.length);\n    const configValue = this._configurationService.getValue(configKey);\n    let value = undefined;\n    switch (typeof configValue) {\n      case 'number':\n      case 'boolean':\n      case 'string':\n        value = configValue;\n        break;\n      default:\n        if (Array.isArray(configValue)) {\n          value = JSON.stringify(configValue);\n        } else {\n          value = configValue;\n        }\n    }\n    this._values.set(key, value);\n    return value;\n  }\n  setValue(key, value) {\n    return super.setValue(key, value);\n  }\n  removeValue(key) {\n    return super.removeValue(key);\n  }\n}\n_ConfigAwareContextValuesContainer = ConfigAwareContextValuesContainer;\n_ConfigAwareContextValuesContainer._keyPrefix = 'config.';\nclass ContextKey {\n  constructor(service, key, defaultValue) {\n    this._service = service;\n    this._key = key;\n    this._defaultValue = defaultValue;\n    this.reset();\n  }\n  set(value) {\n    this._service.setContext(this._key, value);\n  }\n  reset() {\n    if (typeof this._defaultValue === 'undefined') {\n      this._service.removeContext(this._key);\n    } else {\n      this._service.setContext(this._key, this._defaultValue);\n    }\n  }\n  get() {\n    return this._service.getContextKeyValue(this._key);\n  }\n}\nclass SimpleContextKeyChangeEvent {\n  constructor(key) {\n    this.key = key;\n  }\n  affectsSome(keys) {\n    return keys.has(this.key);\n  }\n  allKeysContainedIn(keys) {\n    return this.affectsSome(keys);\n  }\n}\nclass ArrayContextKeyChangeEvent {\n  constructor(keys) {\n    this.keys = keys;\n  }\n  affectsSome(keys) {\n    for (const key of this.keys) {\n      if (keys.has(key)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  allKeysContainedIn(keys) {\n    return this.keys.every(key => keys.has(key));\n  }\n}\nclass CompositeContextKeyChangeEvent {\n  constructor(events) {\n    this.events = events;\n  }\n  affectsSome(keys) {\n    for (const e of this.events) {\n      if (e.affectsSome(keys)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  allKeysContainedIn(keys) {\n    return this.events.every(evt => evt.allKeysContainedIn(keys));\n  }\n}\nfunction allEventKeysInContext(event, context) {\n  return event.allKeysContainedIn(new Set(Object.keys(context)));\n}\nexport class AbstractContextKeyService extends Disposable {\n  constructor(myContextId) {\n    super();\n    this._onDidChangeContext = this._register(new PauseableEmitter({\n      merge: input => new CompositeContextKeyChangeEvent(input)\n    }));\n    this.onDidChangeContext = this._onDidChangeContext.event;\n    this._isDisposed = false;\n    this._myContextId = myContextId;\n  }\n  createKey(key, defaultValue) {\n    if (this._isDisposed) {\n      throw new Error(`AbstractContextKeyService has been disposed`);\n    }\n    return new ContextKey(this, key, defaultValue);\n  }\n  bufferChangeEvents(callback) {\n    this._onDidChangeContext.pause();\n    try {\n      callback();\n    } finally {\n      this._onDidChangeContext.resume();\n    }\n  }\n  createScoped(domNode) {\n    if (this._isDisposed) {\n      throw new Error(`AbstractContextKeyService has been disposed`);\n    }\n    return new ScopedContextKeyService(this, domNode);\n  }\n  contextMatchesRules(rules) {\n    if (this._isDisposed) {\n      throw new Error(`AbstractContextKeyService has been disposed`);\n    }\n    const context = this.getContextValuesContainer(this._myContextId);\n    const result = rules ? rules.evaluate(context) : true;\n    // console.group(rules.serialize() + ' -> ' + result);\n    // rules.keys().forEach(key => { console.log(key, ctx[key]); });\n    // console.groupEnd();\n    return result;\n  }\n  getContextKeyValue(key) {\n    if (this._isDisposed) {\n      return undefined;\n    }\n    return this.getContextValuesContainer(this._myContextId).getValue(key);\n  }\n  setContext(key, value) {\n    if (this._isDisposed) {\n      return;\n    }\n    const myContext = this.getContextValuesContainer(this._myContextId);\n    if (!myContext) {\n      return;\n    }\n    if (myContext.setValue(key, value)) {\n      this._onDidChangeContext.fire(new SimpleContextKeyChangeEvent(key));\n    }\n  }\n  removeContext(key) {\n    if (this._isDisposed) {\n      return;\n    }\n    if (this.getContextValuesContainer(this._myContextId).removeValue(key)) {\n      this._onDidChangeContext.fire(new SimpleContextKeyChangeEvent(key));\n    }\n  }\n  getContext(target) {\n    if (this._isDisposed) {\n      return NullContext.INSTANCE;\n    }\n    return this.getContextValuesContainer(findContextAttr(target));\n  }\n  dispose() {\n    super.dispose();\n    this._isDisposed = true;\n  }\n}\nlet ContextKeyService = class ContextKeyService extends AbstractContextKeyService {\n  constructor(configurationService) {\n    super(0);\n    this._contexts = new Map();\n    this._lastContextId = 0;\n    const myContext = this._register(new ConfigAwareContextValuesContainer(this._myContextId, configurationService, this._onDidChangeContext));\n    this._contexts.set(this._myContextId, myContext);\n    // Uncomment this to see the contexts continuously logged\n    // let lastLoggedValue: string | null = null;\n    // setInterval(() => {\n    // \tlet values = Object.keys(this._contexts).map((key) => this._contexts[key]);\n    // \tlet logValue = values.map(v => JSON.stringify(v._value, null, '\\t')).join('\\n');\n    // \tif (lastLoggedValue !== logValue) {\n    // \t\tlastLoggedValue = logValue;\n    // \t\tconsole.log(lastLoggedValue);\n    // \t}\n    // }, 2000);\n  }\n  getContextValuesContainer(contextId) {\n    if (this._isDisposed) {\n      return NullContext.INSTANCE;\n    }\n    return this._contexts.get(contextId) || NullContext.INSTANCE;\n  }\n  createChildContext(parentContextId = this._myContextId) {\n    if (this._isDisposed) {\n      throw new Error(`ContextKeyService has been disposed`);\n    }\n    const id = ++this._lastContextId;\n    this._contexts.set(id, new Context(id, this.getContextValuesContainer(parentContextId)));\n    return id;\n  }\n  disposeContext(contextId) {\n    if (!this._isDisposed) {\n      this._contexts.delete(contextId);\n    }\n  }\n};\nContextKeyService = __decorate([__param(0, IConfigurationService)], ContextKeyService);\nexport { ContextKeyService };\nclass ScopedContextKeyService extends AbstractContextKeyService {\n  constructor(parent, domNode) {\n    super(parent.createChildContext());\n    this._parentChangeListener = this._register(new MutableDisposable());\n    this._parent = parent;\n    this._updateParentChangeListener();\n    this._domNode = domNode;\n    if (this._domNode.hasAttribute(KEYBINDING_CONTEXT_ATTR)) {\n      let extraInfo = '';\n      if (this._domNode.classList) {\n        extraInfo = Array.from(this._domNode.classList.values()).join(', ');\n      }\n      console.error(`Element already has context attribute${extraInfo ? ': ' + extraInfo : ''}`);\n    }\n    this._domNode.setAttribute(KEYBINDING_CONTEXT_ATTR, String(this._myContextId));\n  }\n  _updateParentChangeListener() {\n    // Forward parent events to this listener. Parent will change.\n    this._parentChangeListener.value = this._parent.onDidChangeContext(e => {\n      const thisContainer = this._parent.getContextValuesContainer(this._myContextId);\n      const thisContextValues = thisContainer.value;\n      if (!allEventKeysInContext(e, thisContextValues)) {\n        this._onDidChangeContext.fire(e);\n      }\n    });\n  }\n  dispose() {\n    if (this._isDisposed) {\n      return;\n    }\n    this._parent.disposeContext(this._myContextId);\n    this._domNode.removeAttribute(KEYBINDING_CONTEXT_ATTR);\n    super.dispose();\n  }\n  getContextValuesContainer(contextId) {\n    if (this._isDisposed) {\n      return NullContext.INSTANCE;\n    }\n    return this._parent.getContextValuesContainer(contextId);\n  }\n  createChildContext(parentContextId = this._myContextId) {\n    if (this._isDisposed) {\n      throw new Error(`ScopedContextKeyService has been disposed`);\n    }\n    return this._parent.createChildContext(parentContextId);\n  }\n  disposeContext(contextId) {\n    if (this._isDisposed) {\n      return;\n    }\n    this._parent.disposeContext(contextId);\n  }\n}\nfunction findContextAttr(domNode) {\n  while (domNode) {\n    if (domNode.hasAttribute(KEYBINDING_CONTEXT_ATTR)) {\n      const attr = domNode.getAttribute(KEYBINDING_CONTEXT_ATTR);\n      if (attr) {\n        return parseInt(attr, 10);\n      }\n      return NaN;\n    }\n    domNode = domNode.parentElement;\n  }\n  return 0;\n}\nexport function setContext(accessor, contextKey, contextValue) {\n  const contextKeyService = accessor.get(IContextKeyService);\n  contextKeyService.createKey(String(contextKey), stringifyURIs(contextValue));\n}\nfunction stringifyURIs(contextValue) {\n  return cloneAndChange(contextValue, obj => {\n    if (typeof obj === 'object' && obj.$mid === 1 /* MarshalledId.Uri */) {\n      return URI.revive(obj).toString();\n    }\n    if (obj instanceof URI) {\n      return obj.toString();\n    }\n    return undefined;\n  });\n}\nCommandsRegistry.registerCommand('_setContext', setContext);\nCommandsRegistry.registerCommand({\n  id: 'getContextKeyInfo',\n  handler() {\n    return [...RawContextKey.all()].sort((a, b) => a.key.localeCompare(b.key));\n  },\n  metadata: {\n    description: localize('getContextKeyInfo', \"A command that returns information about context keys\"),\n    args: []\n  }\n});\nCommandsRegistry.registerCommand('_generateContextKeyInfo', function () {\n  const result = [];\n  const seen = new Set();\n  for (const info of RawContextKey.all()) {\n    if (!seen.has(info.key)) {\n      seen.add(info.key);\n      result.push(info);\n    }\n  }\n  result.sort((a, b) => a.key.localeCompare(b.key));\n  console.log(JSON.stringify(result, undefined, 2));\n});","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","PauseableEmitter","Iterable","Disposable","MutableDisposable","cloneAndChange","TernarySearchTree","URI","localize","CommandsRegistry","IConfigurationService","IContextKeyService","RawContextKey","KEYBINDING_CONTEXT_ATTR","Context","constructor","id","parent","_id","_parent","_value","create","value","setValue","removeValue","getValue","ret","NullContext","undefined","_NullContext","INSTANCE","ConfigAwareContextValuesContainer","_configurationService","emitter","_values","forConfigKeys","_listener","onDidChangeConfiguration","event","source","allKeys","Array","from","k","clear","fire","ArrayContextKeyChangeEvent","changedKeys","configKey","affectedKeys","contextKey","cachedItems","findSuperstr","push","map","deleteSuperstr","has","delete","dispose","indexOf","_keyPrefix","get","substr","configValue","isArray","JSON","stringify","set","_ConfigAwareContextValuesContainer","ContextKey","service","defaultValue","_service","_key","_defaultValue","reset","setContext","removeContext","getContextKeyValue","SimpleContextKeyChangeEvent","affectsSome","keys","allKeysContainedIn","every","CompositeContextKeyChangeEvent","events","e","evt","allEventKeysInContext","context","Set","AbstractContextKeyService","myContextId","_onDidChangeContext","_register","merge","input","onDidChangeContext","_isDisposed","_myContextId","createKey","Error","bufferChangeEvents","callback","pause","resume","createScoped","domNode","ScopedContextKeyService","contextMatchesRules","rules","getContextValuesContainer","result","evaluate","myContext","getContext","findContextAttr","ContextKeyService","configurationService","_contexts","Map","_lastContextId","contextId","createChildContext","parentContextId","disposeContext","_parentChangeListener","_updateParentChangeListener","_domNode","hasAttribute","extraInfo","classList","values","join","console","error","setAttribute","String","thisContainer","thisContextValues","removeAttribute","attr","getAttribute","parseInt","NaN","parentElement","accessor","contextValue","contextKeyService","stringifyURIs","obj","$mid","revive","toString","registerCommand","handler","all","sort","a","b","localeCompare","metadata","description","args","seen","info","add","log"],"sources":["P:/IDEA/JudgeX/JudgeX_front/node_modules/monaco-editor/esm/vs/platform/contextkey/browser/contextKeyService.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { PauseableEmitter } from '../../../base/common/event.js';\nimport { Iterable } from '../../../base/common/iterator.js';\nimport { Disposable, MutableDisposable } from '../../../base/common/lifecycle.js';\nimport { cloneAndChange } from '../../../base/common/objects.js';\nimport { TernarySearchTree } from '../../../base/common/ternarySearchTree.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { localize } from '../../../nls.js';\nimport { CommandsRegistry } from '../../commands/common/commands.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IContextKeyService, RawContextKey } from '../common/contextkey.js';\nconst KEYBINDING_CONTEXT_ATTR = 'data-keybinding-context';\nexport class Context {\n    constructor(id, parent) {\n        this._id = id;\n        this._parent = parent;\n        this._value = Object.create(null);\n        this._value['_contextId'] = id;\n    }\n    get value() {\n        return { ...this._value };\n    }\n    setValue(key, value) {\n        // console.log('SET ' + key + ' = ' + value + ' ON ' + this._id);\n        if (this._value[key] !== value) {\n            this._value[key] = value;\n            return true;\n        }\n        return false;\n    }\n    removeValue(key) {\n        // console.log('REMOVE ' + key + ' FROM ' + this._id);\n        if (key in this._value) {\n            delete this._value[key];\n            return true;\n        }\n        return false;\n    }\n    getValue(key) {\n        const ret = this._value[key];\n        if (typeof ret === 'undefined' && this._parent) {\n            return this._parent.getValue(key);\n        }\n        return ret;\n    }\n}\nclass NullContext extends Context {\n    static { this.INSTANCE = new NullContext(); }\n    constructor() {\n        super(-1, null);\n    }\n    setValue(key, value) {\n        return false;\n    }\n    removeValue(key) {\n        return false;\n    }\n    getValue(key) {\n        return undefined;\n    }\n}\nclass ConfigAwareContextValuesContainer extends Context {\n    static { this._keyPrefix = 'config.'; }\n    constructor(id, _configurationService, emitter) {\n        super(id, null);\n        this._configurationService = _configurationService;\n        this._values = TernarySearchTree.forConfigKeys();\n        this._listener = this._configurationService.onDidChangeConfiguration(event => {\n            if (event.source === 7 /* ConfigurationTarget.DEFAULT */) {\n                // new setting, reset everything\n                const allKeys = Array.from(this._values, ([k]) => k);\n                this._values.clear();\n                emitter.fire(new ArrayContextKeyChangeEvent(allKeys));\n            }\n            else {\n                const changedKeys = [];\n                for (const configKey of event.affectedKeys) {\n                    const contextKey = `config.${configKey}`;\n                    const cachedItems = this._values.findSuperstr(contextKey);\n                    if (cachedItems !== undefined) {\n                        changedKeys.push(...Iterable.map(cachedItems, ([key]) => key));\n                        this._values.deleteSuperstr(contextKey);\n                    }\n                    if (this._values.has(contextKey)) {\n                        changedKeys.push(contextKey);\n                        this._values.delete(contextKey);\n                    }\n                }\n                emitter.fire(new ArrayContextKeyChangeEvent(changedKeys));\n            }\n        });\n    }\n    dispose() {\n        this._listener.dispose();\n    }\n    getValue(key) {\n        if (key.indexOf(ConfigAwareContextValuesContainer._keyPrefix) !== 0) {\n            return super.getValue(key);\n        }\n        if (this._values.has(key)) {\n            return this._values.get(key);\n        }\n        const configKey = key.substr(ConfigAwareContextValuesContainer._keyPrefix.length);\n        const configValue = this._configurationService.getValue(configKey);\n        let value = undefined;\n        switch (typeof configValue) {\n            case 'number':\n            case 'boolean':\n            case 'string':\n                value = configValue;\n                break;\n            default:\n                if (Array.isArray(configValue)) {\n                    value = JSON.stringify(configValue);\n                }\n                else {\n                    value = configValue;\n                }\n        }\n        this._values.set(key, value);\n        return value;\n    }\n    setValue(key, value) {\n        return super.setValue(key, value);\n    }\n    removeValue(key) {\n        return super.removeValue(key);\n    }\n}\nclass ContextKey {\n    constructor(service, key, defaultValue) {\n        this._service = service;\n        this._key = key;\n        this._defaultValue = defaultValue;\n        this.reset();\n    }\n    set(value) {\n        this._service.setContext(this._key, value);\n    }\n    reset() {\n        if (typeof this._defaultValue === 'undefined') {\n            this._service.removeContext(this._key);\n        }\n        else {\n            this._service.setContext(this._key, this._defaultValue);\n        }\n    }\n    get() {\n        return this._service.getContextKeyValue(this._key);\n    }\n}\nclass SimpleContextKeyChangeEvent {\n    constructor(key) {\n        this.key = key;\n    }\n    affectsSome(keys) {\n        return keys.has(this.key);\n    }\n    allKeysContainedIn(keys) {\n        return this.affectsSome(keys);\n    }\n}\nclass ArrayContextKeyChangeEvent {\n    constructor(keys) {\n        this.keys = keys;\n    }\n    affectsSome(keys) {\n        for (const key of this.keys) {\n            if (keys.has(key)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    allKeysContainedIn(keys) {\n        return this.keys.every(key => keys.has(key));\n    }\n}\nclass CompositeContextKeyChangeEvent {\n    constructor(events) {\n        this.events = events;\n    }\n    affectsSome(keys) {\n        for (const e of this.events) {\n            if (e.affectsSome(keys)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    allKeysContainedIn(keys) {\n        return this.events.every(evt => evt.allKeysContainedIn(keys));\n    }\n}\nfunction allEventKeysInContext(event, context) {\n    return event.allKeysContainedIn(new Set(Object.keys(context)));\n}\nexport class AbstractContextKeyService extends Disposable {\n    constructor(myContextId) {\n        super();\n        this._onDidChangeContext = this._register(new PauseableEmitter({ merge: input => new CompositeContextKeyChangeEvent(input) }));\n        this.onDidChangeContext = this._onDidChangeContext.event;\n        this._isDisposed = false;\n        this._myContextId = myContextId;\n    }\n    createKey(key, defaultValue) {\n        if (this._isDisposed) {\n            throw new Error(`AbstractContextKeyService has been disposed`);\n        }\n        return new ContextKey(this, key, defaultValue);\n    }\n    bufferChangeEvents(callback) {\n        this._onDidChangeContext.pause();\n        try {\n            callback();\n        }\n        finally {\n            this._onDidChangeContext.resume();\n        }\n    }\n    createScoped(domNode) {\n        if (this._isDisposed) {\n            throw new Error(`AbstractContextKeyService has been disposed`);\n        }\n        return new ScopedContextKeyService(this, domNode);\n    }\n    contextMatchesRules(rules) {\n        if (this._isDisposed) {\n            throw new Error(`AbstractContextKeyService has been disposed`);\n        }\n        const context = this.getContextValuesContainer(this._myContextId);\n        const result = (rules ? rules.evaluate(context) : true);\n        // console.group(rules.serialize() + ' -> ' + result);\n        // rules.keys().forEach(key => { console.log(key, ctx[key]); });\n        // console.groupEnd();\n        return result;\n    }\n    getContextKeyValue(key) {\n        if (this._isDisposed) {\n            return undefined;\n        }\n        return this.getContextValuesContainer(this._myContextId).getValue(key);\n    }\n    setContext(key, value) {\n        if (this._isDisposed) {\n            return;\n        }\n        const myContext = this.getContextValuesContainer(this._myContextId);\n        if (!myContext) {\n            return;\n        }\n        if (myContext.setValue(key, value)) {\n            this._onDidChangeContext.fire(new SimpleContextKeyChangeEvent(key));\n        }\n    }\n    removeContext(key) {\n        if (this._isDisposed) {\n            return;\n        }\n        if (this.getContextValuesContainer(this._myContextId).removeValue(key)) {\n            this._onDidChangeContext.fire(new SimpleContextKeyChangeEvent(key));\n        }\n    }\n    getContext(target) {\n        if (this._isDisposed) {\n            return NullContext.INSTANCE;\n        }\n        return this.getContextValuesContainer(findContextAttr(target));\n    }\n    dispose() {\n        super.dispose();\n        this._isDisposed = true;\n    }\n}\nlet ContextKeyService = class ContextKeyService extends AbstractContextKeyService {\n    constructor(configurationService) {\n        super(0);\n        this._contexts = new Map();\n        this._lastContextId = 0;\n        const myContext = this._register(new ConfigAwareContextValuesContainer(this._myContextId, configurationService, this._onDidChangeContext));\n        this._contexts.set(this._myContextId, myContext);\n        // Uncomment this to see the contexts continuously logged\n        // let lastLoggedValue: string | null = null;\n        // setInterval(() => {\n        // \tlet values = Object.keys(this._contexts).map((key) => this._contexts[key]);\n        // \tlet logValue = values.map(v => JSON.stringify(v._value, null, '\\t')).join('\\n');\n        // \tif (lastLoggedValue !== logValue) {\n        // \t\tlastLoggedValue = logValue;\n        // \t\tconsole.log(lastLoggedValue);\n        // \t}\n        // }, 2000);\n    }\n    getContextValuesContainer(contextId) {\n        if (this._isDisposed) {\n            return NullContext.INSTANCE;\n        }\n        return this._contexts.get(contextId) || NullContext.INSTANCE;\n    }\n    createChildContext(parentContextId = this._myContextId) {\n        if (this._isDisposed) {\n            throw new Error(`ContextKeyService has been disposed`);\n        }\n        const id = (++this._lastContextId);\n        this._contexts.set(id, new Context(id, this.getContextValuesContainer(parentContextId)));\n        return id;\n    }\n    disposeContext(contextId) {\n        if (!this._isDisposed) {\n            this._contexts.delete(contextId);\n        }\n    }\n};\nContextKeyService = __decorate([\n    __param(0, IConfigurationService)\n], ContextKeyService);\nexport { ContextKeyService };\nclass ScopedContextKeyService extends AbstractContextKeyService {\n    constructor(parent, domNode) {\n        super(parent.createChildContext());\n        this._parentChangeListener = this._register(new MutableDisposable());\n        this._parent = parent;\n        this._updateParentChangeListener();\n        this._domNode = domNode;\n        if (this._domNode.hasAttribute(KEYBINDING_CONTEXT_ATTR)) {\n            let extraInfo = '';\n            if (this._domNode.classList) {\n                extraInfo = Array.from(this._domNode.classList.values()).join(', ');\n            }\n            console.error(`Element already has context attribute${extraInfo ? ': ' + extraInfo : ''}`);\n        }\n        this._domNode.setAttribute(KEYBINDING_CONTEXT_ATTR, String(this._myContextId));\n    }\n    _updateParentChangeListener() {\n        // Forward parent events to this listener. Parent will change.\n        this._parentChangeListener.value = this._parent.onDidChangeContext(e => {\n            const thisContainer = this._parent.getContextValuesContainer(this._myContextId);\n            const thisContextValues = thisContainer.value;\n            if (!allEventKeysInContext(e, thisContextValues)) {\n                this._onDidChangeContext.fire(e);\n            }\n        });\n    }\n    dispose() {\n        if (this._isDisposed) {\n            return;\n        }\n        this._parent.disposeContext(this._myContextId);\n        this._domNode.removeAttribute(KEYBINDING_CONTEXT_ATTR);\n        super.dispose();\n    }\n    getContextValuesContainer(contextId) {\n        if (this._isDisposed) {\n            return NullContext.INSTANCE;\n        }\n        return this._parent.getContextValuesContainer(contextId);\n    }\n    createChildContext(parentContextId = this._myContextId) {\n        if (this._isDisposed) {\n            throw new Error(`ScopedContextKeyService has been disposed`);\n        }\n        return this._parent.createChildContext(parentContextId);\n    }\n    disposeContext(contextId) {\n        if (this._isDisposed) {\n            return;\n        }\n        this._parent.disposeContext(contextId);\n    }\n}\nfunction findContextAttr(domNode) {\n    while (domNode) {\n        if (domNode.hasAttribute(KEYBINDING_CONTEXT_ATTR)) {\n            const attr = domNode.getAttribute(KEYBINDING_CONTEXT_ATTR);\n            if (attr) {\n                return parseInt(attr, 10);\n            }\n            return NaN;\n        }\n        domNode = domNode.parentElement;\n    }\n    return 0;\n}\nexport function setContext(accessor, contextKey, contextValue) {\n    const contextKeyService = accessor.get(IContextKeyService);\n    contextKeyService.createKey(String(contextKey), stringifyURIs(contextValue));\n}\nfunction stringifyURIs(contextValue) {\n    return cloneAndChange(contextValue, (obj) => {\n        if (typeof obj === 'object' && obj.$mid === 1 /* MarshalledId.Uri */) {\n            return URI.revive(obj).toString();\n        }\n        if (obj instanceof URI) {\n            return obj.toString();\n        }\n        return undefined;\n    });\n}\nCommandsRegistry.registerCommand('_setContext', setContext);\nCommandsRegistry.registerCommand({\n    id: 'getContextKeyInfo',\n    handler() {\n        return [...RawContextKey.all()].sort((a, b) => a.key.localeCompare(b.key));\n    },\n    metadata: {\n        description: localize('getContextKeyInfo', \"A command that returns information about context keys\"),\n        args: []\n    }\n});\nCommandsRegistry.registerCommand('_generateContextKeyInfo', function () {\n    const result = [];\n    const seen = new Set();\n    for (const info of RawContextKey.all()) {\n        if (!seen.has(info.key)) {\n            seen.add(info.key);\n            result.push(info);\n        }\n    }\n    result.sort((a, b) => a.key.localeCompare(b.key));\n    console.log(JSON.stringify(result, undefined, 2));\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}