{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/*\n * This module only exports 'compile' which compiles a JSON language definition\n * into a typed and checked ILexer definition.\n */\nimport * as monarchCommon from './monarchCommon.js';\n/*\n * Type helpers\n *\n * Note: this is just for sanity checks on the JSON description which is\n * helpful for the programmer. No checks are done anymore once the lexer is\n * already 'compiled and checked'.\n *\n */\nfunction isArrayOf(elemType, obj) {\n  if (!obj) {\n    return false;\n  }\n  if (!Array.isArray(obj)) {\n    return false;\n  }\n  for (const el of obj) {\n    if (!elemType(el)) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction bool(prop, defValue) {\n  if (typeof prop === 'boolean') {\n    return prop;\n  }\n  return defValue;\n}\nfunction string(prop, defValue) {\n  if (typeof prop === 'string') {\n    return prop;\n  }\n  return defValue;\n}\nfunction arrayToHash(array) {\n  const result = {};\n  for (const e of array) {\n    result[e] = true;\n  }\n  return result;\n}\nfunction createKeywordMatcher(arr, caseInsensitive = false) {\n  if (caseInsensitive) {\n    arr = arr.map(function (x) {\n      return x.toLowerCase();\n    });\n  }\n  const hash = arrayToHash(arr);\n  if (caseInsensitive) {\n    return function (word) {\n      return hash[word.toLowerCase()] !== undefined && hash.hasOwnProperty(word.toLowerCase());\n    };\n  } else {\n    return function (word) {\n      return hash[word] !== undefined && hash.hasOwnProperty(word);\n    };\n  }\n}\nfunction compileRegExp(lexer, str, handleSn) {\n  // @@ must be interpreted as a literal @, so we replace all occurences of @@ with a placeholder character\n  str = str.replace(/@@/g, `\\x01`);\n  let n = 0;\n  let hadExpansion;\n  do {\n    hadExpansion = false;\n    str = str.replace(/@(\\w+)/g, function (s, attr) {\n      hadExpansion = true;\n      let sub = '';\n      if (typeof lexer[attr] === 'string') {\n        sub = lexer[attr];\n      } else if (lexer[attr] && lexer[attr] instanceof RegExp) {\n        sub = lexer[attr].source;\n      } else {\n        if (lexer[attr] === undefined) {\n          throw monarchCommon.createError(lexer, 'language definition does not contain attribute \\'' + attr + '\\', used at: ' + str);\n        } else {\n          throw monarchCommon.createError(lexer, 'attribute reference \\'' + attr + '\\' must be a string, used at: ' + str);\n        }\n      }\n      return monarchCommon.empty(sub) ? '' : '(?:' + sub + ')';\n    });\n    n++;\n  } while (hadExpansion && n < 5);\n  // handle escaped @@\n  str = str.replace(/\\x01/g, '@');\n  const flags = (lexer.ignoreCase ? 'i' : '') + (lexer.unicode ? 'u' : '');\n  // handle $Sn\n  if (handleSn) {\n    const match = str.match(/\\$[sS](\\d\\d?)/g);\n    if (match) {\n      let lastState = null;\n      let lastRegEx = null;\n      return state => {\n        if (lastRegEx && lastState === state) {\n          return lastRegEx;\n        }\n        lastState = state;\n        lastRegEx = new RegExp(monarchCommon.substituteMatchesRe(lexer, str, state), flags);\n        return lastRegEx;\n      };\n    }\n  }\n  return new RegExp(str, flags);\n}\n/**\n * Compiles guard functions for case matches.\n * This compiles 'cases' attributes into efficient match functions.\n *\n */\nfunction selectScrutinee(id, matches, state, num) {\n  if (num < 0) {\n    return id;\n  }\n  if (num < matches.length) {\n    return matches[num];\n  }\n  if (num >= 100) {\n    num = num - 100;\n    const parts = state.split('.');\n    parts.unshift(state);\n    if (num < parts.length) {\n      return parts[num];\n    }\n  }\n  return null;\n}\nfunction createGuard(lexer, ruleName, tkey, val) {\n  // get the scrutinee and pattern\n  let scrut = -1; // -1: $!, 0-99: $n, 100+n: $Sn\n  let oppat = tkey;\n  let matches = tkey.match(/^\\$(([sS]?)(\\d\\d?)|#)(.*)$/);\n  if (matches) {\n    if (matches[3]) {\n      // if digits\n      scrut = parseInt(matches[3]);\n      if (matches[2]) {\n        scrut = scrut + 100; // if [sS] present\n      }\n    }\n    oppat = matches[4];\n  }\n  // get operator\n  let op = '~';\n  let pat = oppat;\n  if (!oppat || oppat.length === 0) {\n    op = '!=';\n    pat = '';\n  } else if (/^\\w*$/.test(pat)) {\n    // just a word\n    op = '==';\n  } else {\n    matches = oppat.match(/^(@|!@|~|!~|==|!=)(.*)$/);\n    if (matches) {\n      op = matches[1];\n      pat = matches[2];\n    }\n  }\n  // set the tester function\n  let tester;\n  // special case a regexp that matches just words\n  if ((op === '~' || op === '!~') && /^(\\w|\\|)*$/.test(pat)) {\n    const inWords = createKeywordMatcher(pat.split('|'), lexer.ignoreCase);\n    tester = function (s) {\n      return op === '~' ? inWords(s) : !inWords(s);\n    };\n  } else if (op === '@' || op === '!@') {\n    const words = lexer[pat];\n    if (!words) {\n      throw monarchCommon.createError(lexer, 'the @ match target \\'' + pat + '\\' is not defined, in rule: ' + ruleName);\n    }\n    if (!isArrayOf(function (elem) {\n      return typeof elem === 'string';\n    }, words)) {\n      throw monarchCommon.createError(lexer, 'the @ match target \\'' + pat + '\\' must be an array of strings, in rule: ' + ruleName);\n    }\n    const inWords = createKeywordMatcher(words, lexer.ignoreCase);\n    tester = function (s) {\n      return op === '@' ? inWords(s) : !inWords(s);\n    };\n  } else if (op === '~' || op === '!~') {\n    if (pat.indexOf('$') < 0) {\n      // precompile regular expression\n      const re = compileRegExp(lexer, '^' + pat + '$', false);\n      tester = function (s) {\n        return op === '~' ? re.test(s) : !re.test(s);\n      };\n    } else {\n      tester = function (s, id, matches, state) {\n        const re = compileRegExp(lexer, '^' + monarchCommon.substituteMatches(lexer, pat, id, matches, state) + '$', false);\n        return re.test(s);\n      };\n    }\n  } else {\n    // if (op==='==' || op==='!=') {\n    if (pat.indexOf('$') < 0) {\n      const patx = monarchCommon.fixCase(lexer, pat);\n      tester = function (s) {\n        return op === '==' ? s === patx : s !== patx;\n      };\n    } else {\n      const patx = monarchCommon.fixCase(lexer, pat);\n      tester = function (s, id, matches, state, eos) {\n        const patexp = monarchCommon.substituteMatches(lexer, patx, id, matches, state);\n        return op === '==' ? s === patexp : s !== patexp;\n      };\n    }\n  }\n  // return the branch object\n  if (scrut === -1) {\n    return {\n      name: tkey,\n      value: val,\n      test: function (id, matches, state, eos) {\n        return tester(id, id, matches, state, eos);\n      }\n    };\n  } else {\n    return {\n      name: tkey,\n      value: val,\n      test: function (id, matches, state, eos) {\n        const scrutinee = selectScrutinee(id, matches, state, scrut);\n        return tester(!scrutinee ? '' : scrutinee, id, matches, state, eos);\n      }\n    };\n  }\n}\n/**\n * Compiles an action: i.e. optimize regular expressions and case matches\n * and do many sanity checks.\n *\n * This is called only during compilation but if the lexer definition\n * contains user functions as actions (which is usually not allowed), then this\n * may be called during lexing. It is important therefore to compile common cases efficiently\n */\nfunction compileAction(lexer, ruleName, action) {\n  if (!action) {\n    return {\n      token: ''\n    };\n  } else if (typeof action === 'string') {\n    return action; // { token: action };\n  } else if (action.token || action.token === '') {\n    if (typeof action.token !== 'string') {\n      throw monarchCommon.createError(lexer, 'a \\'token\\' attribute must be of type string, in rule: ' + ruleName);\n    } else {\n      // only copy specific typed fields (only happens once during compile Lexer)\n      const newAction = {\n        token: action.token\n      };\n      if (action.token.indexOf('$') >= 0) {\n        newAction.tokenSubst = true;\n      }\n      if (typeof action.bracket === 'string') {\n        if (action.bracket === '@open') {\n          newAction.bracket = 1 /* monarchCommon.MonarchBracket.Open */;\n        } else if (action.bracket === '@close') {\n          newAction.bracket = -1 /* monarchCommon.MonarchBracket.Close */;\n        } else {\n          throw monarchCommon.createError(lexer, 'a \\'bracket\\' attribute must be either \\'@open\\' or \\'@close\\', in rule: ' + ruleName);\n        }\n      }\n      if (action.next) {\n        if (typeof action.next !== 'string') {\n          throw monarchCommon.createError(lexer, 'the next state must be a string value in rule: ' + ruleName);\n        } else {\n          let next = action.next;\n          if (!/^(@pop|@push|@popall)$/.test(next)) {\n            if (next[0] === '@') {\n              next = next.substr(1); // peel off starting @ sign\n            }\n            if (next.indexOf('$') < 0) {\n              // no dollar substitution, we can check if the state exists\n              if (!monarchCommon.stateExists(lexer, monarchCommon.substituteMatches(lexer, next, '', [], ''))) {\n                throw monarchCommon.createError(lexer, 'the next state \\'' + action.next + '\\' is not defined in rule: ' + ruleName);\n              }\n            }\n          }\n          newAction.next = next;\n        }\n      }\n      if (typeof action.goBack === 'number') {\n        newAction.goBack = action.goBack;\n      }\n      if (typeof action.switchTo === 'string') {\n        newAction.switchTo = action.switchTo;\n      }\n      if (typeof action.log === 'string') {\n        newAction.log = action.log;\n      }\n      if (typeof action.nextEmbedded === 'string') {\n        newAction.nextEmbedded = action.nextEmbedded;\n        lexer.usesEmbedded = true;\n      }\n      return newAction;\n    }\n  } else if (Array.isArray(action)) {\n    const results = [];\n    for (let i = 0, len = action.length; i < len; i++) {\n      results[i] = compileAction(lexer, ruleName, action[i]);\n    }\n    return {\n      group: results\n    };\n  } else if (action.cases) {\n    // build an array of test cases\n    const cases = [];\n    // for each case, push a test function and result value\n    for (const tkey in action.cases) {\n      if (action.cases.hasOwnProperty(tkey)) {\n        const val = compileAction(lexer, ruleName, action.cases[tkey]);\n        // what kind of case\n        if (tkey === '@default' || tkey === '@' || tkey === '') {\n          cases.push({\n            test: undefined,\n            value: val,\n            name: tkey\n          });\n        } else if (tkey === '@eos') {\n          cases.push({\n            test: function (id, matches, state, eos) {\n              return eos;\n            },\n            value: val,\n            name: tkey\n          });\n        } else {\n          cases.push(createGuard(lexer, ruleName, tkey, val)); // call separate function to avoid local variable capture\n        }\n      }\n    }\n    // create a matching function\n    const def = lexer.defaultToken;\n    return {\n      test: function (id, matches, state, eos) {\n        for (const _case of cases) {\n          const didmatch = !_case.test || _case.test(id, matches, state, eos);\n          if (didmatch) {\n            return _case.value;\n          }\n        }\n        return def;\n      }\n    };\n  } else {\n    throw monarchCommon.createError(lexer, 'an action must be a string, an object with a \\'token\\' or \\'cases\\' attribute, or an array of actions; in rule: ' + ruleName);\n  }\n}\n/**\n * Helper class for creating matching rules\n */\nclass Rule {\n  constructor(name) {\n    this.regex = new RegExp('');\n    this.action = {\n      token: ''\n    };\n    this.matchOnlyAtLineStart = false;\n    this.name = '';\n    this.name = name;\n  }\n  setRegex(lexer, re) {\n    let sregex;\n    if (typeof re === 'string') {\n      sregex = re;\n    } else if (re instanceof RegExp) {\n      sregex = re.source;\n    } else {\n      throw monarchCommon.createError(lexer, 'rules must start with a match string or regular expression: ' + this.name);\n    }\n    this.matchOnlyAtLineStart = sregex.length > 0 && sregex[0] === '^';\n    this.name = this.name + ': ' + sregex;\n    this.regex = compileRegExp(lexer, '^(?:' + (this.matchOnlyAtLineStart ? sregex.substr(1) : sregex) + ')', true);\n  }\n  setAction(lexer, act) {\n    this.action = compileAction(lexer, this.name, act);\n  }\n  resolveRegex(state) {\n    if (this.regex instanceof RegExp) {\n      return this.regex;\n    } else {\n      return this.regex(state);\n    }\n  }\n}\n/**\n * Compiles a json description function into json where all regular expressions,\n * case matches etc, are compiled and all include rules are expanded.\n * We also compile the bracket definitions, supply defaults, and do many sanity checks.\n * If the 'jsonStrict' parameter is 'false', we allow at certain locations\n * regular expression objects and functions that get called during lexing.\n * (Currently we have no samples that need this so perhaps we should always have\n * jsonStrict to true).\n */\nexport function compile(languageId, json) {\n  if (!json || typeof json !== 'object') {\n    throw new Error('Monarch: expecting a language definition object');\n  }\n  // Create our lexer\n  const lexer = {\n    languageId: languageId,\n    includeLF: bool(json.includeLF, false),\n    noThrow: false,\n    // raise exceptions during compilation\n    maxStack: 100,\n    start: typeof json.start === 'string' ? json.start : null,\n    ignoreCase: bool(json.ignoreCase, false),\n    unicode: bool(json.unicode, false),\n    tokenPostfix: string(json.tokenPostfix, '.' + languageId),\n    defaultToken: string(json.defaultToken, 'source'),\n    usesEmbedded: false,\n    // becomes true if we find a nextEmbedded action\n    stateNames: {},\n    tokenizer: {},\n    brackets: []\n  };\n  // For calling compileAction later on\n  const lexerMin = json;\n  lexerMin.languageId = languageId;\n  lexerMin.includeLF = lexer.includeLF;\n  lexerMin.ignoreCase = lexer.ignoreCase;\n  lexerMin.unicode = lexer.unicode;\n  lexerMin.noThrow = lexer.noThrow;\n  lexerMin.usesEmbedded = lexer.usesEmbedded;\n  lexerMin.stateNames = json.tokenizer;\n  lexerMin.defaultToken = lexer.defaultToken;\n  // Compile an array of rules into newrules where RegExp objects are created.\n  function addRules(state, newrules, rules) {\n    for (const rule of rules) {\n      let include = rule.include;\n      if (include) {\n        if (typeof include !== 'string') {\n          throw monarchCommon.createError(lexer, 'an \\'include\\' attribute must be a string at: ' + state);\n        }\n        if (include[0] === '@') {\n          include = include.substr(1); // peel off starting @\n        }\n        if (!json.tokenizer[include]) {\n          throw monarchCommon.createError(lexer, 'include target \\'' + include + '\\' is not defined at: ' + state);\n        }\n        addRules(state + '.' + include, newrules, json.tokenizer[include]);\n      } else {\n        const newrule = new Rule(state);\n        // Set up new rule attributes\n        if (Array.isArray(rule) && rule.length >= 1 && rule.length <= 3) {\n          newrule.setRegex(lexerMin, rule[0]);\n          if (rule.length >= 3) {\n            if (typeof rule[1] === 'string') {\n              newrule.setAction(lexerMin, {\n                token: rule[1],\n                next: rule[2]\n              });\n            } else if (typeof rule[1] === 'object') {\n              const rule1 = rule[1];\n              rule1.next = rule[2];\n              newrule.setAction(lexerMin, rule1);\n            } else {\n              throw monarchCommon.createError(lexer, 'a next state as the last element of a rule can only be given if the action is either an object or a string, at: ' + state);\n            }\n          } else {\n            newrule.setAction(lexerMin, rule[1]);\n          }\n        } else {\n          if (!rule.regex) {\n            throw monarchCommon.createError(lexer, 'a rule must either be an array, or an object with a \\'regex\\' or \\'include\\' field at: ' + state);\n          }\n          if (rule.name) {\n            if (typeof rule.name === 'string') {\n              newrule.name = rule.name;\n            }\n          }\n          if (rule.matchOnlyAtStart) {\n            newrule.matchOnlyAtLineStart = bool(rule.matchOnlyAtLineStart, false);\n          }\n          newrule.setRegex(lexerMin, rule.regex);\n          newrule.setAction(lexerMin, rule.action);\n        }\n        newrules.push(newrule);\n      }\n    }\n  }\n  // compile the tokenizer rules\n  if (!json.tokenizer || typeof json.tokenizer !== 'object') {\n    throw monarchCommon.createError(lexer, 'a language definition must define the \\'tokenizer\\' attribute as an object');\n  }\n  lexer.tokenizer = [];\n  for (const key in json.tokenizer) {\n    if (json.tokenizer.hasOwnProperty(key)) {\n      if (!lexer.start) {\n        lexer.start = key;\n      }\n      const rules = json.tokenizer[key];\n      lexer.tokenizer[key] = new Array();\n      addRules('tokenizer.' + key, lexer.tokenizer[key], rules);\n    }\n  }\n  lexer.usesEmbedded = lexerMin.usesEmbedded; // can be set during compileAction\n  // Set simple brackets\n  if (json.brackets) {\n    if (!Array.isArray(json.brackets)) {\n      throw monarchCommon.createError(lexer, 'the \\'brackets\\' attribute must be defined as an array');\n    }\n  } else {\n    json.brackets = [{\n      open: '{',\n      close: '}',\n      token: 'delimiter.curly'\n    }, {\n      open: '[',\n      close: ']',\n      token: 'delimiter.square'\n    }, {\n      open: '(',\n      close: ')',\n      token: 'delimiter.parenthesis'\n    }, {\n      open: '<',\n      close: '>',\n      token: 'delimiter.angle'\n    }];\n  }\n  const brackets = [];\n  for (const el of json.brackets) {\n    let desc = el;\n    if (desc && Array.isArray(desc) && desc.length === 3) {\n      desc = {\n        token: desc[2],\n        open: desc[0],\n        close: desc[1]\n      };\n    }\n    if (desc.open === desc.close) {\n      throw monarchCommon.createError(lexer, 'open and close brackets in a \\'brackets\\' attribute must be different: ' + desc.open + '\\n hint: use the \\'bracket\\' attribute if matching on equal brackets is required.');\n    }\n    if (typeof desc.open === 'string' && typeof desc.token === 'string' && typeof desc.close === 'string') {\n      brackets.push({\n        token: desc.token + lexer.tokenPostfix,\n        open: monarchCommon.fixCase(lexer, desc.open),\n        close: monarchCommon.fixCase(lexer, desc.close)\n      });\n    } else {\n      throw monarchCommon.createError(lexer, 'every element in the \\'brackets\\' array must be a \\'{open,close,token}\\' object or array');\n    }\n  }\n  lexer.brackets = brackets;\n  // Disable throw so the syntax highlighter goes, no matter what\n  lexer.noThrow = true;\n  return lexer;\n}","map":{"version":3,"names":["monarchCommon","isArrayOf","elemType","obj","Array","isArray","el","bool","prop","defValue","string","arrayToHash","array","result","e","createKeywordMatcher","arr","caseInsensitive","map","x","toLowerCase","hash","word","undefined","hasOwnProperty","compileRegExp","lexer","str","handleSn","replace","n","hadExpansion","s","attr","sub","RegExp","source","createError","empty","flags","ignoreCase","unicode","match","lastState","lastRegEx","state","substituteMatchesRe","selectScrutinee","id","matches","num","length","parts","split","unshift","createGuard","ruleName","tkey","val","scrut","oppat","parseInt","op","pat","test","tester","inWords","words","elem","indexOf","re","substituteMatches","patx","fixCase","eos","patexp","name","value","scrutinee","compileAction","action","token","newAction","tokenSubst","bracket","next","substr","stateExists","goBack","switchTo","log","nextEmbedded","usesEmbedded","results","i","len","group","cases","push","def","defaultToken","_case","didmatch","Rule","constructor","regex","matchOnlyAtLineStart","setRegex","sregex","setAction","act","resolveRegex","compile","languageId","json","Error","includeLF","noThrow","maxStack","start","tokenPostfix","stateNames","tokenizer","brackets","lexerMin","addRules","newrules","rules","rule","include","newrule","rule1","matchOnlyAtStart","key","open","close","desc"],"sources":["P:/WebStorm/judgex_front/node_modules/monaco-editor/esm/vs/editor/standalone/common/monarch/monarchCompile.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n/*\n * This module only exports 'compile' which compiles a JSON language definition\n * into a typed and checked ILexer definition.\n */\nimport * as monarchCommon from './monarchCommon.js';\n/*\n * Type helpers\n *\n * Note: this is just for sanity checks on the JSON description which is\n * helpful for the programmer. No checks are done anymore once the lexer is\n * already 'compiled and checked'.\n *\n */\nfunction isArrayOf(elemType, obj) {\n    if (!obj) {\n        return false;\n    }\n    if (!(Array.isArray(obj))) {\n        return false;\n    }\n    for (const el of obj) {\n        if (!(elemType(el))) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction bool(prop, defValue) {\n    if (typeof prop === 'boolean') {\n        return prop;\n    }\n    return defValue;\n}\nfunction string(prop, defValue) {\n    if (typeof (prop) === 'string') {\n        return prop;\n    }\n    return defValue;\n}\nfunction arrayToHash(array) {\n    const result = {};\n    for (const e of array) {\n        result[e] = true;\n    }\n    return result;\n}\nfunction createKeywordMatcher(arr, caseInsensitive = false) {\n    if (caseInsensitive) {\n        arr = arr.map(function (x) { return x.toLowerCase(); });\n    }\n    const hash = arrayToHash(arr);\n    if (caseInsensitive) {\n        return function (word) {\n            return hash[word.toLowerCase()] !== undefined && hash.hasOwnProperty(word.toLowerCase());\n        };\n    }\n    else {\n        return function (word) {\n            return hash[word] !== undefined && hash.hasOwnProperty(word);\n        };\n    }\n}\nfunction compileRegExp(lexer, str, handleSn) {\n    // @@ must be interpreted as a literal @, so we replace all occurences of @@ with a placeholder character\n    str = str.replace(/@@/g, `\\x01`);\n    let n = 0;\n    let hadExpansion;\n    do {\n        hadExpansion = false;\n        str = str.replace(/@(\\w+)/g, function (s, attr) {\n            hadExpansion = true;\n            let sub = '';\n            if (typeof (lexer[attr]) === 'string') {\n                sub = lexer[attr];\n            }\n            else if (lexer[attr] && lexer[attr] instanceof RegExp) {\n                sub = lexer[attr].source;\n            }\n            else {\n                if (lexer[attr] === undefined) {\n                    throw monarchCommon.createError(lexer, 'language definition does not contain attribute \\'' + attr + '\\', used at: ' + str);\n                }\n                else {\n                    throw monarchCommon.createError(lexer, 'attribute reference \\'' + attr + '\\' must be a string, used at: ' + str);\n                }\n            }\n            return (monarchCommon.empty(sub) ? '' : '(?:' + sub + ')');\n        });\n        n++;\n    } while (hadExpansion && n < 5);\n    // handle escaped @@\n    str = str.replace(/\\x01/g, '@');\n    const flags = (lexer.ignoreCase ? 'i' : '') + (lexer.unicode ? 'u' : '');\n    // handle $Sn\n    if (handleSn) {\n        const match = str.match(/\\$[sS](\\d\\d?)/g);\n        if (match) {\n            let lastState = null;\n            let lastRegEx = null;\n            return (state) => {\n                if (lastRegEx && lastState === state) {\n                    return lastRegEx;\n                }\n                lastState = state;\n                lastRegEx = new RegExp(monarchCommon.substituteMatchesRe(lexer, str, state), flags);\n                return lastRegEx;\n            };\n        }\n    }\n    return new RegExp(str, flags);\n}\n/**\n * Compiles guard functions for case matches.\n * This compiles 'cases' attributes into efficient match functions.\n *\n */\nfunction selectScrutinee(id, matches, state, num) {\n    if (num < 0) {\n        return id;\n    }\n    if (num < matches.length) {\n        return matches[num];\n    }\n    if (num >= 100) {\n        num = num - 100;\n        const parts = state.split('.');\n        parts.unshift(state);\n        if (num < parts.length) {\n            return parts[num];\n        }\n    }\n    return null;\n}\nfunction createGuard(lexer, ruleName, tkey, val) {\n    // get the scrutinee and pattern\n    let scrut = -1; // -1: $!, 0-99: $n, 100+n: $Sn\n    let oppat = tkey;\n    let matches = tkey.match(/^\\$(([sS]?)(\\d\\d?)|#)(.*)$/);\n    if (matches) {\n        if (matches[3]) { // if digits\n            scrut = parseInt(matches[3]);\n            if (matches[2]) {\n                scrut = scrut + 100; // if [sS] present\n            }\n        }\n        oppat = matches[4];\n    }\n    // get operator\n    let op = '~';\n    let pat = oppat;\n    if (!oppat || oppat.length === 0) {\n        op = '!=';\n        pat = '';\n    }\n    else if (/^\\w*$/.test(pat)) { // just a word\n        op = '==';\n    }\n    else {\n        matches = oppat.match(/^(@|!@|~|!~|==|!=)(.*)$/);\n        if (matches) {\n            op = matches[1];\n            pat = matches[2];\n        }\n    }\n    // set the tester function\n    let tester;\n    // special case a regexp that matches just words\n    if ((op === '~' || op === '!~') && /^(\\w|\\|)*$/.test(pat)) {\n        const inWords = createKeywordMatcher(pat.split('|'), lexer.ignoreCase);\n        tester = function (s) { return (op === '~' ? inWords(s) : !inWords(s)); };\n    }\n    else if (op === '@' || op === '!@') {\n        const words = lexer[pat];\n        if (!words) {\n            throw monarchCommon.createError(lexer, 'the @ match target \\'' + pat + '\\' is not defined, in rule: ' + ruleName);\n        }\n        if (!(isArrayOf(function (elem) { return (typeof (elem) === 'string'); }, words))) {\n            throw monarchCommon.createError(lexer, 'the @ match target \\'' + pat + '\\' must be an array of strings, in rule: ' + ruleName);\n        }\n        const inWords = createKeywordMatcher(words, lexer.ignoreCase);\n        tester = function (s) { return (op === '@' ? inWords(s) : !inWords(s)); };\n    }\n    else if (op === '~' || op === '!~') {\n        if (pat.indexOf('$') < 0) {\n            // precompile regular expression\n            const re = compileRegExp(lexer, '^' + pat + '$', false);\n            tester = function (s) { return (op === '~' ? re.test(s) : !re.test(s)); };\n        }\n        else {\n            tester = function (s, id, matches, state) {\n                const re = compileRegExp(lexer, '^' + monarchCommon.substituteMatches(lexer, pat, id, matches, state) + '$', false);\n                return re.test(s);\n            };\n        }\n    }\n    else { // if (op==='==' || op==='!=') {\n        if (pat.indexOf('$') < 0) {\n            const patx = monarchCommon.fixCase(lexer, pat);\n            tester = function (s) { return (op === '==' ? s === patx : s !== patx); };\n        }\n        else {\n            const patx = monarchCommon.fixCase(lexer, pat);\n            tester = function (s, id, matches, state, eos) {\n                const patexp = monarchCommon.substituteMatches(lexer, patx, id, matches, state);\n                return (op === '==' ? s === patexp : s !== patexp);\n            };\n        }\n    }\n    // return the branch object\n    if (scrut === -1) {\n        return {\n            name: tkey, value: val, test: function (id, matches, state, eos) {\n                return tester(id, id, matches, state, eos);\n            }\n        };\n    }\n    else {\n        return {\n            name: tkey, value: val, test: function (id, matches, state, eos) {\n                const scrutinee = selectScrutinee(id, matches, state, scrut);\n                return tester(!scrutinee ? '' : scrutinee, id, matches, state, eos);\n            }\n        };\n    }\n}\n/**\n * Compiles an action: i.e. optimize regular expressions and case matches\n * and do many sanity checks.\n *\n * This is called only during compilation but if the lexer definition\n * contains user functions as actions (which is usually not allowed), then this\n * may be called during lexing. It is important therefore to compile common cases efficiently\n */\nfunction compileAction(lexer, ruleName, action) {\n    if (!action) {\n        return { token: '' };\n    }\n    else if (typeof (action) === 'string') {\n        return action; // { token: action };\n    }\n    else if (action.token || action.token === '') {\n        if (typeof (action.token) !== 'string') {\n            throw monarchCommon.createError(lexer, 'a \\'token\\' attribute must be of type string, in rule: ' + ruleName);\n        }\n        else {\n            // only copy specific typed fields (only happens once during compile Lexer)\n            const newAction = { token: action.token };\n            if (action.token.indexOf('$') >= 0) {\n                newAction.tokenSubst = true;\n            }\n            if (typeof (action.bracket) === 'string') {\n                if (action.bracket === '@open') {\n                    newAction.bracket = 1 /* monarchCommon.MonarchBracket.Open */;\n                }\n                else if (action.bracket === '@close') {\n                    newAction.bracket = -1 /* monarchCommon.MonarchBracket.Close */;\n                }\n                else {\n                    throw monarchCommon.createError(lexer, 'a \\'bracket\\' attribute must be either \\'@open\\' or \\'@close\\', in rule: ' + ruleName);\n                }\n            }\n            if (action.next) {\n                if (typeof (action.next) !== 'string') {\n                    throw monarchCommon.createError(lexer, 'the next state must be a string value in rule: ' + ruleName);\n                }\n                else {\n                    let next = action.next;\n                    if (!/^(@pop|@push|@popall)$/.test(next)) {\n                        if (next[0] === '@') {\n                            next = next.substr(1); // peel off starting @ sign\n                        }\n                        if (next.indexOf('$') < 0) { // no dollar substitution, we can check if the state exists\n                            if (!monarchCommon.stateExists(lexer, monarchCommon.substituteMatches(lexer, next, '', [], ''))) {\n                                throw monarchCommon.createError(lexer, 'the next state \\'' + action.next + '\\' is not defined in rule: ' + ruleName);\n                            }\n                        }\n                    }\n                    newAction.next = next;\n                }\n            }\n            if (typeof (action.goBack) === 'number') {\n                newAction.goBack = action.goBack;\n            }\n            if (typeof (action.switchTo) === 'string') {\n                newAction.switchTo = action.switchTo;\n            }\n            if (typeof (action.log) === 'string') {\n                newAction.log = action.log;\n            }\n            if (typeof (action.nextEmbedded) === 'string') {\n                newAction.nextEmbedded = action.nextEmbedded;\n                lexer.usesEmbedded = true;\n            }\n            return newAction;\n        }\n    }\n    else if (Array.isArray(action)) {\n        const results = [];\n        for (let i = 0, len = action.length; i < len; i++) {\n            results[i] = compileAction(lexer, ruleName, action[i]);\n        }\n        return { group: results };\n    }\n    else if (action.cases) {\n        // build an array of test cases\n        const cases = [];\n        // for each case, push a test function and result value\n        for (const tkey in action.cases) {\n            if (action.cases.hasOwnProperty(tkey)) {\n                const val = compileAction(lexer, ruleName, action.cases[tkey]);\n                // what kind of case\n                if (tkey === '@default' || tkey === '@' || tkey === '') {\n                    cases.push({ test: undefined, value: val, name: tkey });\n                }\n                else if (tkey === '@eos') {\n                    cases.push({ test: function (id, matches, state, eos) { return eos; }, value: val, name: tkey });\n                }\n                else {\n                    cases.push(createGuard(lexer, ruleName, tkey, val)); // call separate function to avoid local variable capture\n                }\n            }\n        }\n        // create a matching function\n        const def = lexer.defaultToken;\n        return {\n            test: function (id, matches, state, eos) {\n                for (const _case of cases) {\n                    const didmatch = (!_case.test || _case.test(id, matches, state, eos));\n                    if (didmatch) {\n                        return _case.value;\n                    }\n                }\n                return def;\n            }\n        };\n    }\n    else {\n        throw monarchCommon.createError(lexer, 'an action must be a string, an object with a \\'token\\' or \\'cases\\' attribute, or an array of actions; in rule: ' + ruleName);\n    }\n}\n/**\n * Helper class for creating matching rules\n */\nclass Rule {\n    constructor(name) {\n        this.regex = new RegExp('');\n        this.action = { token: '' };\n        this.matchOnlyAtLineStart = false;\n        this.name = '';\n        this.name = name;\n    }\n    setRegex(lexer, re) {\n        let sregex;\n        if (typeof (re) === 'string') {\n            sregex = re;\n        }\n        else if (re instanceof RegExp) {\n            sregex = re.source;\n        }\n        else {\n            throw monarchCommon.createError(lexer, 'rules must start with a match string or regular expression: ' + this.name);\n        }\n        this.matchOnlyAtLineStart = (sregex.length > 0 && sregex[0] === '^');\n        this.name = this.name + ': ' + sregex;\n        this.regex = compileRegExp(lexer, '^(?:' + (this.matchOnlyAtLineStart ? sregex.substr(1) : sregex) + ')', true);\n    }\n    setAction(lexer, act) {\n        this.action = compileAction(lexer, this.name, act);\n    }\n    resolveRegex(state) {\n        if (this.regex instanceof RegExp) {\n            return this.regex;\n        }\n        else {\n            return this.regex(state);\n        }\n    }\n}\n/**\n * Compiles a json description function into json where all regular expressions,\n * case matches etc, are compiled and all include rules are expanded.\n * We also compile the bracket definitions, supply defaults, and do many sanity checks.\n * If the 'jsonStrict' parameter is 'false', we allow at certain locations\n * regular expression objects and functions that get called during lexing.\n * (Currently we have no samples that need this so perhaps we should always have\n * jsonStrict to true).\n */\nexport function compile(languageId, json) {\n    if (!json || typeof (json) !== 'object') {\n        throw new Error('Monarch: expecting a language definition object');\n    }\n    // Create our lexer\n    const lexer = {\n        languageId: languageId,\n        includeLF: bool(json.includeLF, false),\n        noThrow: false, // raise exceptions during compilation\n        maxStack: 100,\n        start: (typeof json.start === 'string' ? json.start : null),\n        ignoreCase: bool(json.ignoreCase, false),\n        unicode: bool(json.unicode, false),\n        tokenPostfix: string(json.tokenPostfix, '.' + languageId),\n        defaultToken: string(json.defaultToken, 'source'),\n        usesEmbedded: false, // becomes true if we find a nextEmbedded action\n        stateNames: {},\n        tokenizer: {},\n        brackets: []\n    };\n    // For calling compileAction later on\n    const lexerMin = json;\n    lexerMin.languageId = languageId;\n    lexerMin.includeLF = lexer.includeLF;\n    lexerMin.ignoreCase = lexer.ignoreCase;\n    lexerMin.unicode = lexer.unicode;\n    lexerMin.noThrow = lexer.noThrow;\n    lexerMin.usesEmbedded = lexer.usesEmbedded;\n    lexerMin.stateNames = json.tokenizer;\n    lexerMin.defaultToken = lexer.defaultToken;\n    // Compile an array of rules into newrules where RegExp objects are created.\n    function addRules(state, newrules, rules) {\n        for (const rule of rules) {\n            let include = rule.include;\n            if (include) {\n                if (typeof (include) !== 'string') {\n                    throw monarchCommon.createError(lexer, 'an \\'include\\' attribute must be a string at: ' + state);\n                }\n                if (include[0] === '@') {\n                    include = include.substr(1); // peel off starting @\n                }\n                if (!json.tokenizer[include]) {\n                    throw monarchCommon.createError(lexer, 'include target \\'' + include + '\\' is not defined at: ' + state);\n                }\n                addRules(state + '.' + include, newrules, json.tokenizer[include]);\n            }\n            else {\n                const newrule = new Rule(state);\n                // Set up new rule attributes\n                if (Array.isArray(rule) && rule.length >= 1 && rule.length <= 3) {\n                    newrule.setRegex(lexerMin, rule[0]);\n                    if (rule.length >= 3) {\n                        if (typeof (rule[1]) === 'string') {\n                            newrule.setAction(lexerMin, { token: rule[1], next: rule[2] });\n                        }\n                        else if (typeof (rule[1]) === 'object') {\n                            const rule1 = rule[1];\n                            rule1.next = rule[2];\n                            newrule.setAction(lexerMin, rule1);\n                        }\n                        else {\n                            throw monarchCommon.createError(lexer, 'a next state as the last element of a rule can only be given if the action is either an object or a string, at: ' + state);\n                        }\n                    }\n                    else {\n                        newrule.setAction(lexerMin, rule[1]);\n                    }\n                }\n                else {\n                    if (!rule.regex) {\n                        throw monarchCommon.createError(lexer, 'a rule must either be an array, or an object with a \\'regex\\' or \\'include\\' field at: ' + state);\n                    }\n                    if (rule.name) {\n                        if (typeof rule.name === 'string') {\n                            newrule.name = rule.name;\n                        }\n                    }\n                    if (rule.matchOnlyAtStart) {\n                        newrule.matchOnlyAtLineStart = bool(rule.matchOnlyAtLineStart, false);\n                    }\n                    newrule.setRegex(lexerMin, rule.regex);\n                    newrule.setAction(lexerMin, rule.action);\n                }\n                newrules.push(newrule);\n            }\n        }\n    }\n    // compile the tokenizer rules\n    if (!json.tokenizer || typeof (json.tokenizer) !== 'object') {\n        throw monarchCommon.createError(lexer, 'a language definition must define the \\'tokenizer\\' attribute as an object');\n    }\n    lexer.tokenizer = [];\n    for (const key in json.tokenizer) {\n        if (json.tokenizer.hasOwnProperty(key)) {\n            if (!lexer.start) {\n                lexer.start = key;\n            }\n            const rules = json.tokenizer[key];\n            lexer.tokenizer[key] = new Array();\n            addRules('tokenizer.' + key, lexer.tokenizer[key], rules);\n        }\n    }\n    lexer.usesEmbedded = lexerMin.usesEmbedded; // can be set during compileAction\n    // Set simple brackets\n    if (json.brackets) {\n        if (!(Array.isArray(json.brackets))) {\n            throw monarchCommon.createError(lexer, 'the \\'brackets\\' attribute must be defined as an array');\n        }\n    }\n    else {\n        json.brackets = [\n            { open: '{', close: '}', token: 'delimiter.curly' },\n            { open: '[', close: ']', token: 'delimiter.square' },\n            { open: '(', close: ')', token: 'delimiter.parenthesis' },\n            { open: '<', close: '>', token: 'delimiter.angle' }\n        ];\n    }\n    const brackets = [];\n    for (const el of json.brackets) {\n        let desc = el;\n        if (desc && Array.isArray(desc) && desc.length === 3) {\n            desc = { token: desc[2], open: desc[0], close: desc[1] };\n        }\n        if (desc.open === desc.close) {\n            throw monarchCommon.createError(lexer, 'open and close brackets in a \\'brackets\\' attribute must be different: ' + desc.open +\n                '\\n hint: use the \\'bracket\\' attribute if matching on equal brackets is required.');\n        }\n        if (typeof desc.open === 'string' && typeof desc.token === 'string' && typeof desc.close === 'string') {\n            brackets.push({\n                token: desc.token + lexer.tokenPostfix,\n                open: monarchCommon.fixCase(lexer, desc.open),\n                close: monarchCommon.fixCase(lexer, desc.close)\n            });\n        }\n        else {\n            throw monarchCommon.createError(lexer, 'every element in the \\'brackets\\' array must be a \\'{open,close,token}\\' object or array');\n        }\n    }\n    lexer.brackets = brackets;\n    // Disable throw so the syntax highlighter goes, no matter what\n    lexer.noThrow = true;\n    return lexer;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}