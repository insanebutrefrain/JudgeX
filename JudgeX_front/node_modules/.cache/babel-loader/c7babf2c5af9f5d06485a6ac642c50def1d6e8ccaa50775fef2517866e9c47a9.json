{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nimport { timeout } from '../../../base/common/async.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { logOnceWebWorkerWarning } from '../../../base/common/worker/simpleWorker.js';\nimport { createWebWorker } from '../../../base/browser/defaultWorkerFactory.js';\nimport { Range } from '../../common/core/range.js';\nimport { ILanguageConfigurationService } from '../../common/languages/languageConfigurationRegistry.js';\nimport { EditorSimpleWorker } from '../../common/services/editorSimpleWorker.js';\nimport { IModelService } from '../../common/services/model.js';\nimport { ITextResourceConfigurationService } from '../../common/services/textResourceConfiguration.js';\nimport { isNonEmptyArray } from '../../../base/common/arrays.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { StopWatch } from '../../../base/common/stopwatch.js';\nimport { canceled } from '../../../base/common/errors.js';\nimport { ILanguageFeaturesService } from '../../common/services/languageFeatures.js';\nimport { MovedText } from '../../common/diff/linesDiffComputer.js';\nimport { DetailedLineRangeMapping, RangeMapping, LineRangeMapping } from '../../common/diff/rangeMapping.js';\nimport { LineRange } from '../../common/core/lineRange.js';\nimport { mainWindow } from '../../../base/browser/window.js';\nimport { WindowIntervalTimer } from '../../../base/browser/dom.js';\nimport { WorkerTextModelSyncClient } from '../../common/services/textModelSync/textModelSync.impl.js';\nimport { EditorWorkerHost } from '../../common/services/editorWorkerHost.js';\n/**\n * Stop the worker if it was not needed for 5 min.\n */\nconst STOP_WORKER_DELTA_TIME_MS = 5 * 60 * 1000;\nfunction canSyncModel(modelService, resource) {\n  const model = modelService.getModel(resource);\n  if (!model) {\n    return false;\n  }\n  if (model.isTooLargeForSyncing()) {\n    return false;\n  }\n  return true;\n}\nlet EditorWorkerService = class EditorWorkerService extends Disposable {\n  constructor(workerDescriptor, modelService, configurationService, logService, _languageConfigurationService, languageFeaturesService) {\n    super();\n    this._languageConfigurationService = _languageConfigurationService;\n    this._modelService = modelService;\n    this._workerManager = this._register(new WorkerManager(workerDescriptor, this._modelService));\n    this._logService = logService;\n    // register default link-provider and default completions-provider\n    this._register(languageFeaturesService.linkProvider.register({\n      language: '*',\n      hasAccessToAllModels: true\n    }, {\n      provideLinks: async (model, token) => {\n        if (!canSyncModel(this._modelService, model.uri)) {\n          return Promise.resolve({\n            links: []\n          }); // File too large\n        }\n        const worker = await this._workerWithResources([model.uri]);\n        const links = await worker.$computeLinks(model.uri.toString());\n        return links && {\n          links\n        };\n      }\n    }));\n    this._register(languageFeaturesService.completionProvider.register('*', new WordBasedCompletionItemProvider(this._workerManager, configurationService, this._modelService, this._languageConfigurationService)));\n  }\n  dispose() {\n    super.dispose();\n  }\n  canComputeUnicodeHighlights(uri) {\n    return canSyncModel(this._modelService, uri);\n  }\n  async computedUnicodeHighlights(uri, options, range) {\n    const worker = await this._workerWithResources([uri]);\n    return worker.$computeUnicodeHighlights(uri.toString(), options, range);\n  }\n  async computeDiff(original, modified, options, algorithm) {\n    const worker = await this._workerWithResources([original, modified], /* forceLargeModels */true);\n    const result = await worker.$computeDiff(original.toString(), modified.toString(), options, algorithm);\n    if (!result) {\n      return null;\n    }\n    // Convert from space efficient JSON data to rich objects.\n    const diff = {\n      identical: result.identical,\n      quitEarly: result.quitEarly,\n      changes: toLineRangeMappings(result.changes),\n      moves: result.moves.map(m => new MovedText(new LineRangeMapping(new LineRange(m[0], m[1]), new LineRange(m[2], m[3])), toLineRangeMappings(m[4])))\n    };\n    return diff;\n    function toLineRangeMappings(changes) {\n      return changes.map(c => new DetailedLineRangeMapping(new LineRange(c[0], c[1]), new LineRange(c[2], c[3]), c[4]?.map(c => new RangeMapping(new Range(c[0], c[1], c[2], c[3]), new Range(c[4], c[5], c[6], c[7])))));\n    }\n  }\n  async computeMoreMinimalEdits(resource, edits, pretty = false) {\n    if (isNonEmptyArray(edits)) {\n      if (!canSyncModel(this._modelService, resource)) {\n        return Promise.resolve(edits); // File too large\n      }\n      const sw = StopWatch.create();\n      const result = this._workerWithResources([resource]).then(worker => worker.$computeMoreMinimalEdits(resource.toString(), edits, pretty));\n      result.finally(() => this._logService.trace('FORMAT#computeMoreMinimalEdits', resource.toString(true), sw.elapsed()));\n      return Promise.race([result, timeout(1000).then(() => edits)]);\n    } else {\n      return Promise.resolve(undefined);\n    }\n  }\n  canNavigateValueSet(resource) {\n    return canSyncModel(this._modelService, resource);\n  }\n  async navigateValueSet(resource, range, up) {\n    const model = this._modelService.getModel(resource);\n    if (!model) {\n      return null;\n    }\n    const wordDefRegExp = this._languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).getWordDefinition();\n    const wordDef = wordDefRegExp.source;\n    const wordDefFlags = wordDefRegExp.flags;\n    const worker = await this._workerWithResources([resource]);\n    return worker.$navigateValueSet(resource.toString(), range, up, wordDef, wordDefFlags);\n  }\n  canComputeWordRanges(resource) {\n    return canSyncModel(this._modelService, resource);\n  }\n  async computeWordRanges(resource, range) {\n    const model = this._modelService.getModel(resource);\n    if (!model) {\n      return Promise.resolve(null);\n    }\n    const wordDefRegExp = this._languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).getWordDefinition();\n    const wordDef = wordDefRegExp.source;\n    const wordDefFlags = wordDefRegExp.flags;\n    const worker = await this._workerWithResources([resource]);\n    return worker.$computeWordRanges(resource.toString(), range, wordDef, wordDefFlags);\n  }\n  async findSectionHeaders(uri, options) {\n    const worker = await this._workerWithResources([uri]);\n    return worker.$findSectionHeaders(uri.toString(), options);\n  }\n  async computeDefaultDocumentColors(uri) {\n    const worker = await this._workerWithResources([uri]);\n    return worker.$computeDefaultDocumentColors(uri.toString());\n  }\n  async _workerWithResources(resources, forceLargeModels = false) {\n    const worker = await this._workerManager.withWorker();\n    return await worker.workerWithSyncedResources(resources, forceLargeModels);\n  }\n};\nEditorWorkerService = __decorate([__param(1, IModelService), __param(2, ITextResourceConfigurationService), __param(3, ILogService), __param(4, ILanguageConfigurationService), __param(5, ILanguageFeaturesService)], EditorWorkerService);\nexport { EditorWorkerService };\nclass WordBasedCompletionItemProvider {\n  constructor(workerManager, configurationService, modelService, languageConfigurationService) {\n    this.languageConfigurationService = languageConfigurationService;\n    this._debugDisplayName = 'wordbasedCompletions';\n    this._workerManager = workerManager;\n    this._configurationService = configurationService;\n    this._modelService = modelService;\n  }\n  async provideCompletionItems(model, position) {\n    const config = this._configurationService.getValue(model.uri, position, 'editor');\n    if (config.wordBasedSuggestions === 'off') {\n      return undefined;\n    }\n    const models = [];\n    if (config.wordBasedSuggestions === 'currentDocument') {\n      // only current file and only if not too large\n      if (canSyncModel(this._modelService, model.uri)) {\n        models.push(model.uri);\n      }\n    } else {\n      // either all files or files of same language\n      for (const candidate of this._modelService.getModels()) {\n        if (!canSyncModel(this._modelService, candidate.uri)) {\n          continue;\n        }\n        if (candidate === model) {\n          models.unshift(candidate.uri);\n        } else if (config.wordBasedSuggestions === 'allDocuments' || candidate.getLanguageId() === model.getLanguageId()) {\n          models.push(candidate.uri);\n        }\n      }\n    }\n    if (models.length === 0) {\n      return undefined; // File too large, no other files\n    }\n    const wordDefRegExp = this.languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).getWordDefinition();\n    const word = model.getWordAtPosition(position);\n    const replace = !word ? Range.fromPositions(position) : new Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn);\n    const insert = replace.setEndPosition(position.lineNumber, position.column);\n    const client = await this._workerManager.withWorker();\n    const data = await client.textualSuggest(models, word?.word, wordDefRegExp);\n    if (!data) {\n      return undefined;\n    }\n    return {\n      duration: data.duration,\n      suggestions: data.words.map(word => {\n        return {\n          kind: 18 /* languages.CompletionItemKind.Text */,\n          label: word,\n          insertText: word,\n          range: {\n            insert,\n            replace\n          }\n        };\n      })\n    };\n  }\n}\nlet WorkerManager = class WorkerManager extends Disposable {\n  constructor(_workerDescriptor, modelService) {\n    super();\n    this._workerDescriptor = _workerDescriptor;\n    this._modelService = modelService;\n    this._editorWorkerClient = null;\n    this._lastWorkerUsedTime = new Date().getTime();\n    const stopWorkerInterval = this._register(new WindowIntervalTimer());\n    stopWorkerInterval.cancelAndSet(() => this._checkStopIdleWorker(), Math.round(STOP_WORKER_DELTA_TIME_MS / 2), mainWindow);\n    this._register(this._modelService.onModelRemoved(_ => this._checkStopEmptyWorker()));\n  }\n  dispose() {\n    if (this._editorWorkerClient) {\n      this._editorWorkerClient.dispose();\n      this._editorWorkerClient = null;\n    }\n    super.dispose();\n  }\n  /**\n   * Check if the model service has no more models and stop the worker if that is the case.\n   */\n  _checkStopEmptyWorker() {\n    if (!this._editorWorkerClient) {\n      return;\n    }\n    const models = this._modelService.getModels();\n    if (models.length === 0) {\n      // There are no more models => nothing possible for me to do\n      this._editorWorkerClient.dispose();\n      this._editorWorkerClient = null;\n    }\n  }\n  /**\n   * Check if the worker has been idle for a while and then stop it.\n   */\n  _checkStopIdleWorker() {\n    if (!this._editorWorkerClient) {\n      return;\n    }\n    const timeSinceLastWorkerUsedTime = new Date().getTime() - this._lastWorkerUsedTime;\n    if (timeSinceLastWorkerUsedTime > STOP_WORKER_DELTA_TIME_MS) {\n      this._editorWorkerClient.dispose();\n      this._editorWorkerClient = null;\n    }\n  }\n  withWorker() {\n    this._lastWorkerUsedTime = new Date().getTime();\n    if (!this._editorWorkerClient) {\n      this._editorWorkerClient = new EditorWorkerClient(this._workerDescriptor, false, this._modelService);\n    }\n    return Promise.resolve(this._editorWorkerClient);\n  }\n};\nWorkerManager = __decorate([__param(1, IModelService)], WorkerManager);\nclass SynchronousWorkerClient {\n  constructor(instance) {\n    this._instance = instance;\n    this.proxy = this._instance;\n  }\n  dispose() {\n    this._instance.dispose();\n  }\n  setChannel(channel, handler) {\n    throw new Error(`Not supported`);\n  }\n}\nlet EditorWorkerClient = class EditorWorkerClient extends Disposable {\n  constructor(_workerDescriptor, keepIdleModels, modelService) {\n    super();\n    this._workerDescriptor = _workerDescriptor;\n    this._disposed = false;\n    this._modelService = modelService;\n    this._keepIdleModels = keepIdleModels;\n    this._worker = null;\n    this._modelManager = null;\n  }\n  // foreign host request\n  fhr(method, args) {\n    throw new Error(`Not implemented!`);\n  }\n  _getOrCreateWorker() {\n    if (!this._worker) {\n      try {\n        this._worker = this._register(createWebWorker(this._workerDescriptor));\n        EditorWorkerHost.setChannel(this._worker, this._createEditorWorkerHost());\n      } catch (err) {\n        logOnceWebWorkerWarning(err);\n        this._worker = this._createFallbackLocalWorker();\n      }\n    }\n    return this._worker;\n  }\n  async _getProxy() {\n    try {\n      const proxy = this._getOrCreateWorker().proxy;\n      await proxy.$ping();\n      return proxy;\n    } catch (err) {\n      logOnceWebWorkerWarning(err);\n      this._worker = this._createFallbackLocalWorker();\n      return this._worker.proxy;\n    }\n  }\n  _createFallbackLocalWorker() {\n    return new SynchronousWorkerClient(new EditorSimpleWorker(this._createEditorWorkerHost(), null));\n  }\n  _createEditorWorkerHost() {\n    return {\n      $fhr: (method, args) => this.fhr(method, args)\n    };\n  }\n  _getOrCreateModelManager(proxy) {\n    if (!this._modelManager) {\n      this._modelManager = this._register(new WorkerTextModelSyncClient(proxy, this._modelService, this._keepIdleModels));\n    }\n    return this._modelManager;\n  }\n  async workerWithSyncedResources(resources, forceLargeModels = false) {\n    if (this._disposed) {\n      return Promise.reject(canceled());\n    }\n    const proxy = await this._getProxy();\n    this._getOrCreateModelManager(proxy).ensureSyncedResources(resources, forceLargeModels);\n    return proxy;\n  }\n  async textualSuggest(resources, leadingWord, wordDefRegExp) {\n    const proxy = await this.workerWithSyncedResources(resources);\n    const wordDef = wordDefRegExp.source;\n    const wordDefFlags = wordDefRegExp.flags;\n    return proxy.$textualSuggest(resources.map(r => r.toString()), leadingWord, wordDef, wordDefFlags);\n  }\n  dispose() {\n    super.dispose();\n    this._disposed = true;\n  }\n};\nEditorWorkerClient = __decorate([__param(2, IModelService)], EditorWorkerClient);\nexport { EditorWorkerClient };","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","timeout","Disposable","logOnceWebWorkerWarning","createWebWorker","Range","ILanguageConfigurationService","EditorSimpleWorker","IModelService","ITextResourceConfigurationService","isNonEmptyArray","ILogService","StopWatch","canceled","ILanguageFeaturesService","MovedText","DetailedLineRangeMapping","RangeMapping","LineRangeMapping","LineRange","mainWindow","WindowIntervalTimer","WorkerTextModelSyncClient","EditorWorkerHost","STOP_WORKER_DELTA_TIME_MS","canSyncModel","modelService","resource","model","getModel","isTooLargeForSyncing","EditorWorkerService","constructor","workerDescriptor","configurationService","logService","_languageConfigurationService","languageFeaturesService","_modelService","_workerManager","_register","WorkerManager","_logService","linkProvider","register","language","hasAccessToAllModels","provideLinks","token","uri","Promise","resolve","links","worker","_workerWithResources","$computeLinks","toString","completionProvider","WordBasedCompletionItemProvider","dispose","canComputeUnicodeHighlights","computedUnicodeHighlights","options","range","$computeUnicodeHighlights","computeDiff","original","modified","algorithm","result","$computeDiff","diff","identical","quitEarly","changes","toLineRangeMappings","moves","map","m","computeMoreMinimalEdits","edits","pretty","sw","create","then","$computeMoreMinimalEdits","finally","trace","elapsed","race","undefined","canNavigateValueSet","navigateValueSet","up","wordDefRegExp","getLanguageConfiguration","getLanguageId","getWordDefinition","wordDef","source","wordDefFlags","flags","$navigateValueSet","canComputeWordRanges","computeWordRanges","$computeWordRanges","findSectionHeaders","$findSectionHeaders","computeDefaultDocumentColors","$computeDefaultDocumentColors","resources","forceLargeModels","withWorker","workerWithSyncedResources","workerManager","languageConfigurationService","_debugDisplayName","_configurationService","provideCompletionItems","position","config","getValue","wordBasedSuggestions","models","push","candidate","getModels","unshift","word","getWordAtPosition","replace","fromPositions","lineNumber","startColumn","endColumn","insert","setEndPosition","column","client","data","textualSuggest","duration","suggestions","words","kind","label","insertText","_workerDescriptor","_editorWorkerClient","_lastWorkerUsedTime","Date","getTime","stopWorkerInterval","cancelAndSet","_checkStopIdleWorker","Math","round","onModelRemoved","_","_checkStopEmptyWorker","timeSinceLastWorkerUsedTime","EditorWorkerClient","SynchronousWorkerClient","instance","_instance","proxy","setChannel","channel","handler","Error","keepIdleModels","_disposed","_keepIdleModels","_worker","_modelManager","fhr","method","args","_getOrCreateWorker","_createEditorWorkerHost","err","_createFallbackLocalWorker","_getProxy","$ping","$fhr","_getOrCreateModelManager","reject","ensureSyncedResources","leadingWord","$textualSuggest"],"sources":["P:/WebStorm/judgex_front/node_modules/monaco-editor/esm/vs/editor/browser/services/editorWorkerService.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { timeout } from '../../../base/common/async.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { logOnceWebWorkerWarning } from '../../../base/common/worker/simpleWorker.js';\nimport { createWebWorker } from '../../../base/browser/defaultWorkerFactory.js';\nimport { Range } from '../../common/core/range.js';\nimport { ILanguageConfigurationService } from '../../common/languages/languageConfigurationRegistry.js';\nimport { EditorSimpleWorker } from '../../common/services/editorSimpleWorker.js';\nimport { IModelService } from '../../common/services/model.js';\nimport { ITextResourceConfigurationService } from '../../common/services/textResourceConfiguration.js';\nimport { isNonEmptyArray } from '../../../base/common/arrays.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { StopWatch } from '../../../base/common/stopwatch.js';\nimport { canceled } from '../../../base/common/errors.js';\nimport { ILanguageFeaturesService } from '../../common/services/languageFeatures.js';\nimport { MovedText } from '../../common/diff/linesDiffComputer.js';\nimport { DetailedLineRangeMapping, RangeMapping, LineRangeMapping } from '../../common/diff/rangeMapping.js';\nimport { LineRange } from '../../common/core/lineRange.js';\nimport { mainWindow } from '../../../base/browser/window.js';\nimport { WindowIntervalTimer } from '../../../base/browser/dom.js';\nimport { WorkerTextModelSyncClient } from '../../common/services/textModelSync/textModelSync.impl.js';\nimport { EditorWorkerHost } from '../../common/services/editorWorkerHost.js';\n/**\n * Stop the worker if it was not needed for 5 min.\n */\nconst STOP_WORKER_DELTA_TIME_MS = 5 * 60 * 1000;\nfunction canSyncModel(modelService, resource) {\n    const model = modelService.getModel(resource);\n    if (!model) {\n        return false;\n    }\n    if (model.isTooLargeForSyncing()) {\n        return false;\n    }\n    return true;\n}\nlet EditorWorkerService = class EditorWorkerService extends Disposable {\n    constructor(workerDescriptor, modelService, configurationService, logService, _languageConfigurationService, languageFeaturesService) {\n        super();\n        this._languageConfigurationService = _languageConfigurationService;\n        this._modelService = modelService;\n        this._workerManager = this._register(new WorkerManager(workerDescriptor, this._modelService));\n        this._logService = logService;\n        // register default link-provider and default completions-provider\n        this._register(languageFeaturesService.linkProvider.register({ language: '*', hasAccessToAllModels: true }, {\n            provideLinks: async (model, token) => {\n                if (!canSyncModel(this._modelService, model.uri)) {\n                    return Promise.resolve({ links: [] }); // File too large\n                }\n                const worker = await this._workerWithResources([model.uri]);\n                const links = await worker.$computeLinks(model.uri.toString());\n                return links && { links };\n            }\n        }));\n        this._register(languageFeaturesService.completionProvider.register('*', new WordBasedCompletionItemProvider(this._workerManager, configurationService, this._modelService, this._languageConfigurationService)));\n    }\n    dispose() {\n        super.dispose();\n    }\n    canComputeUnicodeHighlights(uri) {\n        return canSyncModel(this._modelService, uri);\n    }\n    async computedUnicodeHighlights(uri, options, range) {\n        const worker = await this._workerWithResources([uri]);\n        return worker.$computeUnicodeHighlights(uri.toString(), options, range);\n    }\n    async computeDiff(original, modified, options, algorithm) {\n        const worker = await this._workerWithResources([original, modified], /* forceLargeModels */ true);\n        const result = await worker.$computeDiff(original.toString(), modified.toString(), options, algorithm);\n        if (!result) {\n            return null;\n        }\n        // Convert from space efficient JSON data to rich objects.\n        const diff = {\n            identical: result.identical,\n            quitEarly: result.quitEarly,\n            changes: toLineRangeMappings(result.changes),\n            moves: result.moves.map(m => new MovedText(new LineRangeMapping(new LineRange(m[0], m[1]), new LineRange(m[2], m[3])), toLineRangeMappings(m[4])))\n        };\n        return diff;\n        function toLineRangeMappings(changes) {\n            return changes.map((c) => new DetailedLineRangeMapping(new LineRange(c[0], c[1]), new LineRange(c[2], c[3]), c[4]?.map((c) => new RangeMapping(new Range(c[0], c[1], c[2], c[3]), new Range(c[4], c[5], c[6], c[7])))));\n        }\n    }\n    async computeMoreMinimalEdits(resource, edits, pretty = false) {\n        if (isNonEmptyArray(edits)) {\n            if (!canSyncModel(this._modelService, resource)) {\n                return Promise.resolve(edits); // File too large\n            }\n            const sw = StopWatch.create();\n            const result = this._workerWithResources([resource]).then(worker => worker.$computeMoreMinimalEdits(resource.toString(), edits, pretty));\n            result.finally(() => this._logService.trace('FORMAT#computeMoreMinimalEdits', resource.toString(true), sw.elapsed()));\n            return Promise.race([result, timeout(1000).then(() => edits)]);\n        }\n        else {\n            return Promise.resolve(undefined);\n        }\n    }\n    canNavigateValueSet(resource) {\n        return (canSyncModel(this._modelService, resource));\n    }\n    async navigateValueSet(resource, range, up) {\n        const model = this._modelService.getModel(resource);\n        if (!model) {\n            return null;\n        }\n        const wordDefRegExp = this._languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).getWordDefinition();\n        const wordDef = wordDefRegExp.source;\n        const wordDefFlags = wordDefRegExp.flags;\n        const worker = await this._workerWithResources([resource]);\n        return worker.$navigateValueSet(resource.toString(), range, up, wordDef, wordDefFlags);\n    }\n    canComputeWordRanges(resource) {\n        return canSyncModel(this._modelService, resource);\n    }\n    async computeWordRanges(resource, range) {\n        const model = this._modelService.getModel(resource);\n        if (!model) {\n            return Promise.resolve(null);\n        }\n        const wordDefRegExp = this._languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).getWordDefinition();\n        const wordDef = wordDefRegExp.source;\n        const wordDefFlags = wordDefRegExp.flags;\n        const worker = await this._workerWithResources([resource]);\n        return worker.$computeWordRanges(resource.toString(), range, wordDef, wordDefFlags);\n    }\n    async findSectionHeaders(uri, options) {\n        const worker = await this._workerWithResources([uri]);\n        return worker.$findSectionHeaders(uri.toString(), options);\n    }\n    async computeDefaultDocumentColors(uri) {\n        const worker = await this._workerWithResources([uri]);\n        return worker.$computeDefaultDocumentColors(uri.toString());\n    }\n    async _workerWithResources(resources, forceLargeModels = false) {\n        const worker = await this._workerManager.withWorker();\n        return await worker.workerWithSyncedResources(resources, forceLargeModels);\n    }\n};\nEditorWorkerService = __decorate([\n    __param(1, IModelService),\n    __param(2, ITextResourceConfigurationService),\n    __param(3, ILogService),\n    __param(4, ILanguageConfigurationService),\n    __param(5, ILanguageFeaturesService)\n], EditorWorkerService);\nexport { EditorWorkerService };\nclass WordBasedCompletionItemProvider {\n    constructor(workerManager, configurationService, modelService, languageConfigurationService) {\n        this.languageConfigurationService = languageConfigurationService;\n        this._debugDisplayName = 'wordbasedCompletions';\n        this._workerManager = workerManager;\n        this._configurationService = configurationService;\n        this._modelService = modelService;\n    }\n    async provideCompletionItems(model, position) {\n        const config = this._configurationService.getValue(model.uri, position, 'editor');\n        if (config.wordBasedSuggestions === 'off') {\n            return undefined;\n        }\n        const models = [];\n        if (config.wordBasedSuggestions === 'currentDocument') {\n            // only current file and only if not too large\n            if (canSyncModel(this._modelService, model.uri)) {\n                models.push(model.uri);\n            }\n        }\n        else {\n            // either all files or files of same language\n            for (const candidate of this._modelService.getModels()) {\n                if (!canSyncModel(this._modelService, candidate.uri)) {\n                    continue;\n                }\n                if (candidate === model) {\n                    models.unshift(candidate.uri);\n                }\n                else if (config.wordBasedSuggestions === 'allDocuments' || candidate.getLanguageId() === model.getLanguageId()) {\n                    models.push(candidate.uri);\n                }\n            }\n        }\n        if (models.length === 0) {\n            return undefined; // File too large, no other files\n        }\n        const wordDefRegExp = this.languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).getWordDefinition();\n        const word = model.getWordAtPosition(position);\n        const replace = !word ? Range.fromPositions(position) : new Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn);\n        const insert = replace.setEndPosition(position.lineNumber, position.column);\n        const client = await this._workerManager.withWorker();\n        const data = await client.textualSuggest(models, word?.word, wordDefRegExp);\n        if (!data) {\n            return undefined;\n        }\n        return {\n            duration: data.duration,\n            suggestions: data.words.map((word) => {\n                return {\n                    kind: 18 /* languages.CompletionItemKind.Text */,\n                    label: word,\n                    insertText: word,\n                    range: { insert, replace }\n                };\n            }),\n        };\n    }\n}\nlet WorkerManager = class WorkerManager extends Disposable {\n    constructor(_workerDescriptor, modelService) {\n        super();\n        this._workerDescriptor = _workerDescriptor;\n        this._modelService = modelService;\n        this._editorWorkerClient = null;\n        this._lastWorkerUsedTime = (new Date()).getTime();\n        const stopWorkerInterval = this._register(new WindowIntervalTimer());\n        stopWorkerInterval.cancelAndSet(() => this._checkStopIdleWorker(), Math.round(STOP_WORKER_DELTA_TIME_MS / 2), mainWindow);\n        this._register(this._modelService.onModelRemoved(_ => this._checkStopEmptyWorker()));\n    }\n    dispose() {\n        if (this._editorWorkerClient) {\n            this._editorWorkerClient.dispose();\n            this._editorWorkerClient = null;\n        }\n        super.dispose();\n    }\n    /**\n     * Check if the model service has no more models and stop the worker if that is the case.\n     */\n    _checkStopEmptyWorker() {\n        if (!this._editorWorkerClient) {\n            return;\n        }\n        const models = this._modelService.getModels();\n        if (models.length === 0) {\n            // There are no more models => nothing possible for me to do\n            this._editorWorkerClient.dispose();\n            this._editorWorkerClient = null;\n        }\n    }\n    /**\n     * Check if the worker has been idle for a while and then stop it.\n     */\n    _checkStopIdleWorker() {\n        if (!this._editorWorkerClient) {\n            return;\n        }\n        const timeSinceLastWorkerUsedTime = (new Date()).getTime() - this._lastWorkerUsedTime;\n        if (timeSinceLastWorkerUsedTime > STOP_WORKER_DELTA_TIME_MS) {\n            this._editorWorkerClient.dispose();\n            this._editorWorkerClient = null;\n        }\n    }\n    withWorker() {\n        this._lastWorkerUsedTime = (new Date()).getTime();\n        if (!this._editorWorkerClient) {\n            this._editorWorkerClient = new EditorWorkerClient(this._workerDescriptor, false, this._modelService);\n        }\n        return Promise.resolve(this._editorWorkerClient);\n    }\n};\nWorkerManager = __decorate([\n    __param(1, IModelService)\n], WorkerManager);\nclass SynchronousWorkerClient {\n    constructor(instance) {\n        this._instance = instance;\n        this.proxy = this._instance;\n    }\n    dispose() {\n        this._instance.dispose();\n    }\n    setChannel(channel, handler) {\n        throw new Error(`Not supported`);\n    }\n}\nlet EditorWorkerClient = class EditorWorkerClient extends Disposable {\n    constructor(_workerDescriptor, keepIdleModels, modelService) {\n        super();\n        this._workerDescriptor = _workerDescriptor;\n        this._disposed = false;\n        this._modelService = modelService;\n        this._keepIdleModels = keepIdleModels;\n        this._worker = null;\n        this._modelManager = null;\n    }\n    // foreign host request\n    fhr(method, args) {\n        throw new Error(`Not implemented!`);\n    }\n    _getOrCreateWorker() {\n        if (!this._worker) {\n            try {\n                this._worker = this._register(createWebWorker(this._workerDescriptor));\n                EditorWorkerHost.setChannel(this._worker, this._createEditorWorkerHost());\n            }\n            catch (err) {\n                logOnceWebWorkerWarning(err);\n                this._worker = this._createFallbackLocalWorker();\n            }\n        }\n        return this._worker;\n    }\n    async _getProxy() {\n        try {\n            const proxy = this._getOrCreateWorker().proxy;\n            await proxy.$ping();\n            return proxy;\n        }\n        catch (err) {\n            logOnceWebWorkerWarning(err);\n            this._worker = this._createFallbackLocalWorker();\n            return this._worker.proxy;\n        }\n    }\n    _createFallbackLocalWorker() {\n        return new SynchronousWorkerClient(new EditorSimpleWorker(this._createEditorWorkerHost(), null));\n    }\n    _createEditorWorkerHost() {\n        return {\n            $fhr: (method, args) => this.fhr(method, args)\n        };\n    }\n    _getOrCreateModelManager(proxy) {\n        if (!this._modelManager) {\n            this._modelManager = this._register(new WorkerTextModelSyncClient(proxy, this._modelService, this._keepIdleModels));\n        }\n        return this._modelManager;\n    }\n    async workerWithSyncedResources(resources, forceLargeModels = false) {\n        if (this._disposed) {\n            return Promise.reject(canceled());\n        }\n        const proxy = await this._getProxy();\n        this._getOrCreateModelManager(proxy).ensureSyncedResources(resources, forceLargeModels);\n        return proxy;\n    }\n    async textualSuggest(resources, leadingWord, wordDefRegExp) {\n        const proxy = await this.workerWithSyncedResources(resources);\n        const wordDef = wordDefRegExp.source;\n        const wordDefFlags = wordDefRegExp.flags;\n        return proxy.$textualSuggest(resources.map(r => r.toString()), leadingWord, wordDef, wordDefFlags);\n    }\n    dispose() {\n        super.dispose();\n        this._disposed = true;\n    }\n};\nEditorWorkerClient = __decorate([\n    __param(2, IModelService)\n], EditorWorkerClient);\nexport { EditorWorkerClient };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}