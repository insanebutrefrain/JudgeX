{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array-buffer.detached.js\";\nimport \"core-js/modules/es.array-buffer.transfer.js\";\nimport \"core-js/modules/es.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../nls.js';\nexport const LANGUAGE_DEFAULT = 'en';\nlet _isWindows = false;\nlet _isMacintosh = false;\nlet _isLinux = false;\nlet _isLinuxSnap = false;\nlet _isNative = false;\nlet _isWeb = false;\nlet _isElectron = false;\nlet _isIOS = false;\nlet _isCI = false;\nlet _isMobile = false;\nlet _locale = undefined;\nlet _language = LANGUAGE_DEFAULT;\nlet _platformLocale = LANGUAGE_DEFAULT;\nlet _translationsConfigFile = undefined;\nlet _userAgent = undefined;\nconst $globalThis = globalThis;\nlet nodeProcess = undefined;\nif (typeof $globalThis.vscode !== 'undefined' && typeof $globalThis.vscode.process !== 'undefined') {\n  // Native environment (sandboxed)\n  nodeProcess = $globalThis.vscode.process;\n} else if (typeof process !== 'undefined' && typeof process?.versions?.node === 'string') {\n  // Native environment (non-sandboxed)\n  nodeProcess = process;\n}\nconst isElectronProcess = typeof nodeProcess?.versions?.electron === 'string';\nconst isElectronRenderer = isElectronProcess && nodeProcess?.type === 'renderer';\n// Native environment\nif (typeof nodeProcess === 'object') {\n  _isWindows = nodeProcess.platform === 'win32';\n  _isMacintosh = nodeProcess.platform === 'darwin';\n  _isLinux = nodeProcess.platform === 'linux';\n  _isLinuxSnap = _isLinux && !!nodeProcess.env['SNAP'] && !!nodeProcess.env['SNAP_REVISION'];\n  _isElectron = isElectronProcess;\n  _isCI = !!nodeProcess.env['CI'] || !!nodeProcess.env['BUILD_ARTIFACTSTAGINGDIRECTORY'];\n  _locale = LANGUAGE_DEFAULT;\n  _language = LANGUAGE_DEFAULT;\n  const rawNlsConfig = nodeProcess.env['VSCODE_NLS_CONFIG'];\n  if (rawNlsConfig) {\n    try {\n      const nlsConfig = JSON.parse(rawNlsConfig);\n      _locale = nlsConfig.userLocale;\n      _platformLocale = nlsConfig.osLocale;\n      _language = nlsConfig.resolvedLanguage || LANGUAGE_DEFAULT;\n      _translationsConfigFile = nlsConfig.languagePack?.translationsConfigFile;\n    } catch (e) {}\n  }\n  _isNative = true;\n}\n// Web environment\nelse if (typeof navigator === 'object' && !isElectronRenderer) {\n  _userAgent = navigator.userAgent;\n  _isWindows = _userAgent.indexOf('Windows') >= 0;\n  _isMacintosh = _userAgent.indexOf('Macintosh') >= 0;\n  _isIOS = (_userAgent.indexOf('Macintosh') >= 0 || _userAgent.indexOf('iPad') >= 0 || _userAgent.indexOf('iPhone') >= 0) && !!navigator.maxTouchPoints && navigator.maxTouchPoints > 0;\n  _isLinux = _userAgent.indexOf('Linux') >= 0;\n  _isMobile = _userAgent?.indexOf('Mobi') >= 0;\n  _isWeb = true;\n  _language = nls.getNLSLanguage() || LANGUAGE_DEFAULT;\n  _locale = navigator.language.toLowerCase();\n  _platformLocale = _locale;\n}\n// Unknown environment\nelse {\n  console.error('Unable to resolve platform.');\n}\nlet _platform = 0 /* Platform.Web */;\nif (_isMacintosh) {\n  _platform = 1 /* Platform.Mac */;\n} else if (_isWindows) {\n  _platform = 3 /* Platform.Windows */;\n} else if (_isLinux) {\n  _platform = 2 /* Platform.Linux */;\n}\nexport const isWindows = _isWindows;\nexport const isMacintosh = _isMacintosh;\nexport const isLinux = _isLinux;\nexport const isNative = _isNative;\nexport const isWeb = _isWeb;\nexport const isWebWorker = _isWeb && typeof $globalThis.importScripts === 'function';\nexport const webWorkerOrigin = isWebWorker ? $globalThis.origin : undefined;\nexport const isIOS = _isIOS;\nexport const isMobile = _isMobile;\nexport const userAgent = _userAgent;\n/**\n * The language used for the user interface. The format of\n * the string is all lower case (e.g. zh-tw for Traditional\n * Chinese or de for German)\n */\nexport const language = _language;\nexport const setTimeout0IsFaster = typeof $globalThis.postMessage === 'function' && !$globalThis.importScripts;\n/**\n * See https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#:~:text=than%204%2C%20then-,set%20timeout%20to%204,-.\n *\n * Works similarly to `setTimeout(0)` but doesn't suffer from the 4ms artificial delay\n * that browsers set when the nesting level is > 5.\n */\nexport const setTimeout0 = (() => {\n  if (setTimeout0IsFaster) {\n    const pending = [];\n    $globalThis.addEventListener('message', e => {\n      if (e.data && e.data.vscodeScheduleAsyncWork) {\n        for (let i = 0, len = pending.length; i < len; i++) {\n          const candidate = pending[i];\n          if (candidate.id === e.data.vscodeScheduleAsyncWork) {\n            pending.splice(i, 1);\n            candidate.callback();\n            return;\n          }\n        }\n      }\n    });\n    let lastId = 0;\n    return callback => {\n      const myId = ++lastId;\n      pending.push({\n        id: myId,\n        callback: callback\n      });\n      $globalThis.postMessage({\n        vscodeScheduleAsyncWork: myId\n      }, '*');\n    };\n  }\n  return callback => setTimeout(callback);\n})();\nexport const OS = _isMacintosh || _isIOS ? 2 /* OperatingSystem.Macintosh */ : _isWindows ? 1 /* OperatingSystem.Windows */ : 3 /* OperatingSystem.Linux */;\nlet _isLittleEndian = true;\nlet _isLittleEndianComputed = false;\nexport function isLittleEndian() {\n  if (!_isLittleEndianComputed) {\n    _isLittleEndianComputed = true;\n    const test = new Uint8Array(2);\n    test[0] = 1;\n    test[1] = 2;\n    const view = new Uint16Array(test.buffer);\n    _isLittleEndian = view[0] === (2 << 8) + 1;\n  }\n  return _isLittleEndian;\n}\nexport const isChrome = !!(userAgent && userAgent.indexOf('Chrome') >= 0);\nexport const isFirefox = !!(userAgent && userAgent.indexOf('Firefox') >= 0);\nexport const isSafari = !!(!isChrome && userAgent && userAgent.indexOf('Safari') >= 0);\nexport const isEdge = !!(userAgent && userAgent.indexOf('Edg/') >= 0);\nexport const isAndroid = !!(userAgent && userAgent.indexOf('Android') >= 0);","map":{"version":3,"names":["nls","LANGUAGE_DEFAULT","_isWindows","_isMacintosh","_isLinux","_isLinuxSnap","_isNative","_isWeb","_isElectron","_isIOS","_isCI","_isMobile","_locale","undefined","_language","_platformLocale","_translationsConfigFile","_userAgent","$globalThis","globalThis","nodeProcess","vscode","process","versions","node","isElectronProcess","electron","isElectronRenderer","type","platform","env","rawNlsConfig","nlsConfig","JSON","parse","userLocale","osLocale","resolvedLanguage","languagePack","translationsConfigFile","e","navigator","userAgent","indexOf","maxTouchPoints","getNLSLanguage","language","toLowerCase","console","error","_platform","isWindows","isMacintosh","isLinux","isNative","isWeb","isWebWorker","importScripts","webWorkerOrigin","origin","isIOS","isMobile","setTimeout0IsFaster","postMessage","setTimeout0","pending","addEventListener","data","vscodeScheduleAsyncWork","i","len","length","candidate","id","splice","callback","lastId","myId","push","setTimeout","OS","_isLittleEndian","_isLittleEndianComputed","isLittleEndian","test","Uint8Array","view","Uint16Array","buffer","isChrome","isFirefox","isSafari","isEdge","isAndroid"],"sources":["P:/IDEA/JudgeX/judgex_front/node_modules/monaco-editor/esm/vs/base/common/platform.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../nls.js';\nexport const LANGUAGE_DEFAULT = 'en';\nlet _isWindows = false;\nlet _isMacintosh = false;\nlet _isLinux = false;\nlet _isLinuxSnap = false;\nlet _isNative = false;\nlet _isWeb = false;\nlet _isElectron = false;\nlet _isIOS = false;\nlet _isCI = false;\nlet _isMobile = false;\nlet _locale = undefined;\nlet _language = LANGUAGE_DEFAULT;\nlet _platformLocale = LANGUAGE_DEFAULT;\nlet _translationsConfigFile = undefined;\nlet _userAgent = undefined;\nconst $globalThis = globalThis;\nlet nodeProcess = undefined;\nif (typeof $globalThis.vscode !== 'undefined' && typeof $globalThis.vscode.process !== 'undefined') {\n    // Native environment (sandboxed)\n    nodeProcess = $globalThis.vscode.process;\n}\nelse if (typeof process !== 'undefined' && typeof process?.versions?.node === 'string') {\n    // Native environment (non-sandboxed)\n    nodeProcess = process;\n}\nconst isElectronProcess = typeof nodeProcess?.versions?.electron === 'string';\nconst isElectronRenderer = isElectronProcess && nodeProcess?.type === 'renderer';\n// Native environment\nif (typeof nodeProcess === 'object') {\n    _isWindows = (nodeProcess.platform === 'win32');\n    _isMacintosh = (nodeProcess.platform === 'darwin');\n    _isLinux = (nodeProcess.platform === 'linux');\n    _isLinuxSnap = _isLinux && !!nodeProcess.env['SNAP'] && !!nodeProcess.env['SNAP_REVISION'];\n    _isElectron = isElectronProcess;\n    _isCI = !!nodeProcess.env['CI'] || !!nodeProcess.env['BUILD_ARTIFACTSTAGINGDIRECTORY'];\n    _locale = LANGUAGE_DEFAULT;\n    _language = LANGUAGE_DEFAULT;\n    const rawNlsConfig = nodeProcess.env['VSCODE_NLS_CONFIG'];\n    if (rawNlsConfig) {\n        try {\n            const nlsConfig = JSON.parse(rawNlsConfig);\n            _locale = nlsConfig.userLocale;\n            _platformLocale = nlsConfig.osLocale;\n            _language = nlsConfig.resolvedLanguage || LANGUAGE_DEFAULT;\n            _translationsConfigFile = nlsConfig.languagePack?.translationsConfigFile;\n        }\n        catch (e) {\n        }\n    }\n    _isNative = true;\n}\n// Web environment\nelse if (typeof navigator === 'object' && !isElectronRenderer) {\n    _userAgent = navigator.userAgent;\n    _isWindows = _userAgent.indexOf('Windows') >= 0;\n    _isMacintosh = _userAgent.indexOf('Macintosh') >= 0;\n    _isIOS = (_userAgent.indexOf('Macintosh') >= 0 || _userAgent.indexOf('iPad') >= 0 || _userAgent.indexOf('iPhone') >= 0) && !!navigator.maxTouchPoints && navigator.maxTouchPoints > 0;\n    _isLinux = _userAgent.indexOf('Linux') >= 0;\n    _isMobile = _userAgent?.indexOf('Mobi') >= 0;\n    _isWeb = true;\n    _language = nls.getNLSLanguage() || LANGUAGE_DEFAULT;\n    _locale = navigator.language.toLowerCase();\n    _platformLocale = _locale;\n}\n// Unknown environment\nelse {\n    console.error('Unable to resolve platform.');\n}\nlet _platform = 0 /* Platform.Web */;\nif (_isMacintosh) {\n    _platform = 1 /* Platform.Mac */;\n}\nelse if (_isWindows) {\n    _platform = 3 /* Platform.Windows */;\n}\nelse if (_isLinux) {\n    _platform = 2 /* Platform.Linux */;\n}\nexport const isWindows = _isWindows;\nexport const isMacintosh = _isMacintosh;\nexport const isLinux = _isLinux;\nexport const isNative = _isNative;\nexport const isWeb = _isWeb;\nexport const isWebWorker = (_isWeb && typeof $globalThis.importScripts === 'function');\nexport const webWorkerOrigin = isWebWorker ? $globalThis.origin : undefined;\nexport const isIOS = _isIOS;\nexport const isMobile = _isMobile;\nexport const userAgent = _userAgent;\n/**\n * The language used for the user interface. The format of\n * the string is all lower case (e.g. zh-tw for Traditional\n * Chinese or de for German)\n */\nexport const language = _language;\nexport const setTimeout0IsFaster = (typeof $globalThis.postMessage === 'function' && !$globalThis.importScripts);\n/**\n * See https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#:~:text=than%204%2C%20then-,set%20timeout%20to%204,-.\n *\n * Works similarly to `setTimeout(0)` but doesn't suffer from the 4ms artificial delay\n * that browsers set when the nesting level is > 5.\n */\nexport const setTimeout0 = (() => {\n    if (setTimeout0IsFaster) {\n        const pending = [];\n        $globalThis.addEventListener('message', (e) => {\n            if (e.data && e.data.vscodeScheduleAsyncWork) {\n                for (let i = 0, len = pending.length; i < len; i++) {\n                    const candidate = pending[i];\n                    if (candidate.id === e.data.vscodeScheduleAsyncWork) {\n                        pending.splice(i, 1);\n                        candidate.callback();\n                        return;\n                    }\n                }\n            }\n        });\n        let lastId = 0;\n        return (callback) => {\n            const myId = ++lastId;\n            pending.push({\n                id: myId,\n                callback: callback\n            });\n            $globalThis.postMessage({ vscodeScheduleAsyncWork: myId }, '*');\n        };\n    }\n    return (callback) => setTimeout(callback);\n})();\nexport const OS = (_isMacintosh || _isIOS ? 2 /* OperatingSystem.Macintosh */ : (_isWindows ? 1 /* OperatingSystem.Windows */ : 3 /* OperatingSystem.Linux */));\nlet _isLittleEndian = true;\nlet _isLittleEndianComputed = false;\nexport function isLittleEndian() {\n    if (!_isLittleEndianComputed) {\n        _isLittleEndianComputed = true;\n        const test = new Uint8Array(2);\n        test[0] = 1;\n        test[1] = 2;\n        const view = new Uint16Array(test.buffer);\n        _isLittleEndian = (view[0] === (2 << 8) + 1);\n    }\n    return _isLittleEndian;\n}\nexport const isChrome = !!(userAgent && userAgent.indexOf('Chrome') >= 0);\nexport const isFirefox = !!(userAgent && userAgent.indexOf('Firefox') >= 0);\nexport const isSafari = !!(!isChrome && (userAgent && userAgent.indexOf('Safari') >= 0));\nexport const isEdge = !!(userAgent && userAgent.indexOf('Edg/') >= 0);\nexport const isAndroid = !!(userAgent && userAgent.indexOf('Android') >= 0);\n"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA,OAAO,KAAKA,GAAG,MAAM,cAAc;AACnC,OAAO,MAAMC,gBAAgB,GAAG,IAAI;AACpC,IAAIC,UAAU,GAAG,KAAK;AACtB,IAAIC,YAAY,GAAG,KAAK;AACxB,IAAIC,QAAQ,GAAG,KAAK;AACpB,IAAIC,YAAY,GAAG,KAAK;AACxB,IAAIC,SAAS,GAAG,KAAK;AACrB,IAAIC,MAAM,GAAG,KAAK;AAClB,IAAIC,WAAW,GAAG,KAAK;AACvB,IAAIC,MAAM,GAAG,KAAK;AAClB,IAAIC,KAAK,GAAG,KAAK;AACjB,IAAIC,SAAS,GAAG,KAAK;AACrB,IAAIC,OAAO,GAAGC,SAAS;AACvB,IAAIC,SAAS,GAAGb,gBAAgB;AAChC,IAAIc,eAAe,GAAGd,gBAAgB;AACtC,IAAIe,uBAAuB,GAAGH,SAAS;AACvC,IAAII,UAAU,GAAGJ,SAAS;AAC1B,MAAMK,WAAW,GAAGC,UAAU;AAC9B,IAAIC,WAAW,GAAGP,SAAS;AAC3B,IAAI,OAAOK,WAAW,CAACG,MAAM,KAAK,WAAW,IAAI,OAAOH,WAAW,CAACG,MAAM,CAACC,OAAO,KAAK,WAAW,EAAE;EAChG;EACAF,WAAW,GAAGF,WAAW,CAACG,MAAM,CAACC,OAAO;AAC5C,CAAC,MACI,IAAI,OAAOA,OAAO,KAAK,WAAW,IAAI,OAAOA,OAAO,EAAEC,QAAQ,EAAEC,IAAI,KAAK,QAAQ,EAAE;EACpF;EACAJ,WAAW,GAAGE,OAAO;AACzB;AACA,MAAMG,iBAAiB,GAAG,OAAOL,WAAW,EAAEG,QAAQ,EAAEG,QAAQ,KAAK,QAAQ;AAC7E,MAAMC,kBAAkB,GAAGF,iBAAiB,IAAIL,WAAW,EAAEQ,IAAI,KAAK,UAAU;AAChF;AACA,IAAI,OAAOR,WAAW,KAAK,QAAQ,EAAE;EACjClB,UAAU,GAAIkB,WAAW,CAACS,QAAQ,KAAK,OAAQ;EAC/C1B,YAAY,GAAIiB,WAAW,CAACS,QAAQ,KAAK,QAAS;EAClDzB,QAAQ,GAAIgB,WAAW,CAACS,QAAQ,KAAK,OAAQ;EAC7CxB,YAAY,GAAGD,QAAQ,IAAI,CAAC,CAACgB,WAAW,CAACU,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAACV,WAAW,CAACU,GAAG,CAAC,eAAe,CAAC;EAC1FtB,WAAW,GAAGiB,iBAAiB;EAC/Bf,KAAK,GAAG,CAAC,CAACU,WAAW,CAACU,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAACV,WAAW,CAACU,GAAG,CAAC,gCAAgC,CAAC;EACtFlB,OAAO,GAAGX,gBAAgB;EAC1Ba,SAAS,GAAGb,gBAAgB;EAC5B,MAAM8B,YAAY,GAAGX,WAAW,CAACU,GAAG,CAAC,mBAAmB,CAAC;EACzD,IAAIC,YAAY,EAAE;IACd,IAAI;MACA,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACH,YAAY,CAAC;MAC1CnB,OAAO,GAAGoB,SAAS,CAACG,UAAU;MAC9BpB,eAAe,GAAGiB,SAAS,CAACI,QAAQ;MACpCtB,SAAS,GAAGkB,SAAS,CAACK,gBAAgB,IAAIpC,gBAAgB;MAC1De,uBAAuB,GAAGgB,SAAS,CAACM,YAAY,EAAEC,sBAAsB;IAC5E,CAAC,CACD,OAAOC,CAAC,EAAE,CACV;EACJ;EACAlC,SAAS,GAAG,IAAI;AACpB;AACA;AAAA,KACK,IAAI,OAAOmC,SAAS,KAAK,QAAQ,IAAI,CAACd,kBAAkB,EAAE;EAC3DV,UAAU,GAAGwB,SAAS,CAACC,SAAS;EAChCxC,UAAU,GAAGe,UAAU,CAAC0B,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC;EAC/CxC,YAAY,GAAGc,UAAU,CAAC0B,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC;EACnDlC,MAAM,GAAG,CAACQ,UAAU,CAAC0B,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI1B,UAAU,CAAC0B,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI1B,UAAU,CAAC0B,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAACF,SAAS,CAACG,cAAc,IAAIH,SAAS,CAACG,cAAc,GAAG,CAAC;EACrLxC,QAAQ,GAAGa,UAAU,CAAC0B,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC;EAC3ChC,SAAS,GAAGM,UAAU,EAAE0B,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC;EAC5CpC,MAAM,GAAG,IAAI;EACbO,SAAS,GAAGd,GAAG,CAAC6C,cAAc,CAAC,CAAC,IAAI5C,gBAAgB;EACpDW,OAAO,GAAG6B,SAAS,CAACK,QAAQ,CAACC,WAAW,CAAC,CAAC;EAC1ChC,eAAe,GAAGH,OAAO;AAC7B;AACA;AAAA,KACK;EACDoC,OAAO,CAACC,KAAK,CAAC,6BAA6B,CAAC;AAChD;AACA,IAAIC,SAAS,GAAG,CAAC,CAAC;AAClB,IAAI/C,YAAY,EAAE;EACd+C,SAAS,GAAG,CAAC,CAAC;AAClB,CAAC,MACI,IAAIhD,UAAU,EAAE;EACjBgD,SAAS,GAAG,CAAC,CAAC;AAClB,CAAC,MACI,IAAI9C,QAAQ,EAAE;EACf8C,SAAS,GAAG,CAAC,CAAC;AAClB;AACA,OAAO,MAAMC,SAAS,GAAGjD,UAAU;AACnC,OAAO,MAAMkD,WAAW,GAAGjD,YAAY;AACvC,OAAO,MAAMkD,OAAO,GAAGjD,QAAQ;AAC/B,OAAO,MAAMkD,QAAQ,GAAGhD,SAAS;AACjC,OAAO,MAAMiD,KAAK,GAAGhD,MAAM;AAC3B,OAAO,MAAMiD,WAAW,GAAIjD,MAAM,IAAI,OAAOW,WAAW,CAACuC,aAAa,KAAK,UAAW;AACtF,OAAO,MAAMC,eAAe,GAAGF,WAAW,GAAGtC,WAAW,CAACyC,MAAM,GAAG9C,SAAS;AAC3E,OAAO,MAAM+C,KAAK,GAAGnD,MAAM;AAC3B,OAAO,MAAMoD,QAAQ,GAAGlD,SAAS;AACjC,OAAO,MAAM+B,SAAS,GAAGzB,UAAU;AACnC;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM6B,QAAQ,GAAGhC,SAAS;AACjC,OAAO,MAAMgD,mBAAmB,GAAI,OAAO5C,WAAW,CAAC6C,WAAW,KAAK,UAAU,IAAI,CAAC7C,WAAW,CAACuC,aAAc;AAChH;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMO,WAAW,GAAG,CAAC,MAAM;EAC9B,IAAIF,mBAAmB,EAAE;IACrB,MAAMG,OAAO,GAAG,EAAE;IAClB/C,WAAW,CAACgD,gBAAgB,CAAC,SAAS,EAAG1B,CAAC,IAAK;MAC3C,IAAIA,CAAC,CAAC2B,IAAI,IAAI3B,CAAC,CAAC2B,IAAI,CAACC,uBAAuB,EAAE;QAC1C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,GAAG,GAAGL,OAAO,CAACM,MAAM,EAAEF,CAAC,GAAGC,GAAG,EAAED,CAAC,EAAE,EAAE;UAChD,MAAMG,SAAS,GAAGP,OAAO,CAACI,CAAC,CAAC;UAC5B,IAAIG,SAAS,CAACC,EAAE,KAAKjC,CAAC,CAAC2B,IAAI,CAACC,uBAAuB,EAAE;YACjDH,OAAO,CAACS,MAAM,CAACL,CAAC,EAAE,CAAC,CAAC;YACpBG,SAAS,CAACG,QAAQ,CAAC,CAAC;YACpB;UACJ;QACJ;MACJ;IACJ,CAAC,CAAC;IACF,IAAIC,MAAM,GAAG,CAAC;IACd,OAAQD,QAAQ,IAAK;MACjB,MAAME,IAAI,GAAG,EAAED,MAAM;MACrBX,OAAO,CAACa,IAAI,CAAC;QACTL,EAAE,EAAEI,IAAI;QACRF,QAAQ,EAAEA;MACd,CAAC,CAAC;MACFzD,WAAW,CAAC6C,WAAW,CAAC;QAAEK,uBAAuB,EAAES;MAAK,CAAC,EAAE,GAAG,CAAC;IACnE,CAAC;EACL;EACA,OAAQF,QAAQ,IAAKI,UAAU,CAACJ,QAAQ,CAAC;AAC7C,CAAC,EAAE,CAAC;AACJ,OAAO,MAAMK,EAAE,GAAI7E,YAAY,IAAIM,MAAM,GAAG,CAAC,CAAC,kCAAmCP,UAAU,GAAG,CAAC,CAAC,gCAAgC,CAAC,CAAC,2BAA6B;AAC/J,IAAI+E,eAAe,GAAG,IAAI;AAC1B,IAAIC,uBAAuB,GAAG,KAAK;AACnC,OAAO,SAASC,cAAcA,CAAA,EAAG;EAC7B,IAAI,CAACD,uBAAuB,EAAE;IAC1BA,uBAAuB,GAAG,IAAI;IAC9B,MAAME,IAAI,GAAG,IAAIC,UAAU,CAAC,CAAC,CAAC;IAC9BD,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;IACXA,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;IACX,MAAME,IAAI,GAAG,IAAIC,WAAW,CAACH,IAAI,CAACI,MAAM,CAAC;IACzCP,eAAe,GAAIK,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAE;EAChD;EACA,OAAOL,eAAe;AAC1B;AACA,OAAO,MAAMQ,QAAQ,GAAG,CAAC,EAAE/C,SAAS,IAAIA,SAAS,CAACC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;AACzE,OAAO,MAAM+C,SAAS,GAAG,CAAC,EAAEhD,SAAS,IAAIA,SAAS,CAACC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;AAC3E,OAAO,MAAMgD,QAAQ,GAAG,CAAC,EAAE,CAACF,QAAQ,IAAK/C,SAAS,IAAIA,SAAS,CAACC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAE,CAAC;AACxF,OAAO,MAAMiD,MAAM,GAAG,CAAC,EAAElD,SAAS,IAAIA,SAAS,CAACC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACrE,OAAO,MAAMkD,SAAS,GAAG,CAAC,EAAEnD,SAAS,IAAIA,SAAS,CAACC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}