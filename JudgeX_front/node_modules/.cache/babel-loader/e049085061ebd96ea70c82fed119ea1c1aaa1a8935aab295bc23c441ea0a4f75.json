{"ast":null,"code":"var _ModelService, _DefaultModelSHA1Computer;\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\nvar ModelService_1;\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, DisposableStore } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport { TextModel } from '../model/textModel.js';\nimport { EDITOR_MODEL_DEFAULTS } from '../core/textModelDefaults.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { ITextResourcePropertiesService } from './textResourceConfiguration.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { IUndoRedoService } from '../../../platform/undoRedo/common/undoRedo.js';\nimport { StringSHA1 } from '../../../base/common/hash.js';\nimport { isEditStackElement } from '../model/editStack.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { equals } from '../../../base/common/objects.js';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\nfunction MODEL_ID(resource) {\n  return resource.toString();\n}\nclass ModelData {\n  constructor(model, onWillDispose, onDidChangeLanguage) {\n    this.model = model;\n    this._modelEventListeners = new DisposableStore();\n    this.model = model;\n    this._modelEventListeners.add(model.onWillDispose(() => onWillDispose(model)));\n    this._modelEventListeners.add(model.onDidChangeLanguage(e => onDidChangeLanguage(model, e)));\n  }\n  dispose() {\n    this._modelEventListeners.dispose();\n  }\n}\nconst DEFAULT_EOL = platform.isLinux || platform.isMacintosh ? 1 /* DefaultEndOfLine.LF */ : 2 /* DefaultEndOfLine.CRLF */;\nclass DisposedModelInfo {\n  constructor(uri, initialUndoRedoSnapshot, time, sharesUndoRedoStack, heapSize, sha1, versionId, alternativeVersionId) {\n    this.uri = uri;\n    this.initialUndoRedoSnapshot = initialUndoRedoSnapshot;\n    this.time = time;\n    this.sharesUndoRedoStack = sharesUndoRedoStack;\n    this.heapSize = heapSize;\n    this.sha1 = sha1;\n    this.versionId = versionId;\n    this.alternativeVersionId = alternativeVersionId;\n  }\n}\nlet ModelService = (_ModelService = class ModelService extends Disposable {\n  constructor(_configurationService, _resourcePropertiesService, _undoRedoService, _instantiationService) {\n    super();\n    this._configurationService = _configurationService;\n    this._resourcePropertiesService = _resourcePropertiesService;\n    this._undoRedoService = _undoRedoService;\n    this._instantiationService = _instantiationService;\n    this._onModelAdded = this._register(new Emitter());\n    this.onModelAdded = this._onModelAdded.event;\n    this._onModelRemoved = this._register(new Emitter());\n    this.onModelRemoved = this._onModelRemoved.event;\n    this._onModelModeChanged = this._register(new Emitter());\n    this.onModelLanguageChanged = this._onModelModeChanged.event;\n    this._modelCreationOptionsByLanguageAndResource = Object.create(null);\n    this._models = {};\n    this._disposedModels = new Map();\n    this._disposedModelsHeapSize = 0;\n    this._register(this._configurationService.onDidChangeConfiguration(e => this._updateModelOptions(e)));\n    this._updateModelOptions(undefined);\n  }\n  static _readModelOptions(config, isForSimpleWidget) {\n    let tabSize = EDITOR_MODEL_DEFAULTS.tabSize;\n    if (config.editor && typeof config.editor.tabSize !== 'undefined') {\n      const parsedTabSize = parseInt(config.editor.tabSize, 10);\n      if (!isNaN(parsedTabSize)) {\n        tabSize = parsedTabSize;\n      }\n      if (tabSize < 1) {\n        tabSize = 1;\n      }\n    }\n    let indentSize = 'tabSize';\n    if (config.editor && typeof config.editor.indentSize !== 'undefined' && config.editor.indentSize !== 'tabSize') {\n      const parsedIndentSize = parseInt(config.editor.indentSize, 10);\n      if (!isNaN(parsedIndentSize)) {\n        indentSize = Math.max(parsedIndentSize, 1);\n      }\n    }\n    let insertSpaces = EDITOR_MODEL_DEFAULTS.insertSpaces;\n    if (config.editor && typeof config.editor.insertSpaces !== 'undefined') {\n      insertSpaces = config.editor.insertSpaces === 'false' ? false : Boolean(config.editor.insertSpaces);\n    }\n    let newDefaultEOL = DEFAULT_EOL;\n    const eol = config.eol;\n    if (eol === '\\r\\n') {\n      newDefaultEOL = 2 /* DefaultEndOfLine.CRLF */;\n    } else if (eol === '\\n') {\n      newDefaultEOL = 1 /* DefaultEndOfLine.LF */;\n    }\n    let trimAutoWhitespace = EDITOR_MODEL_DEFAULTS.trimAutoWhitespace;\n    if (config.editor && typeof config.editor.trimAutoWhitespace !== 'undefined') {\n      trimAutoWhitespace = config.editor.trimAutoWhitespace === 'false' ? false : Boolean(config.editor.trimAutoWhitespace);\n    }\n    let detectIndentation = EDITOR_MODEL_DEFAULTS.detectIndentation;\n    if (config.editor && typeof config.editor.detectIndentation !== 'undefined') {\n      detectIndentation = config.editor.detectIndentation === 'false' ? false : Boolean(config.editor.detectIndentation);\n    }\n    let largeFileOptimizations = EDITOR_MODEL_DEFAULTS.largeFileOptimizations;\n    if (config.editor && typeof config.editor.largeFileOptimizations !== 'undefined') {\n      largeFileOptimizations = config.editor.largeFileOptimizations === 'false' ? false : Boolean(config.editor.largeFileOptimizations);\n    }\n    let bracketPairColorizationOptions = EDITOR_MODEL_DEFAULTS.bracketPairColorizationOptions;\n    if (config.editor?.bracketPairColorization && typeof config.editor.bracketPairColorization === 'object') {\n      bracketPairColorizationOptions = {\n        enabled: !!config.editor.bracketPairColorization.enabled,\n        independentColorPoolPerBracketType: !!config.editor.bracketPairColorization.independentColorPoolPerBracketType\n      };\n    }\n    return {\n      isForSimpleWidget: isForSimpleWidget,\n      tabSize: tabSize,\n      indentSize: indentSize,\n      insertSpaces: insertSpaces,\n      detectIndentation: detectIndentation,\n      defaultEOL: newDefaultEOL,\n      trimAutoWhitespace: trimAutoWhitespace,\n      largeFileOptimizations: largeFileOptimizations,\n      bracketPairColorizationOptions\n    };\n  }\n  _getEOL(resource, language) {\n    if (resource) {\n      return this._resourcePropertiesService.getEOL(resource, language);\n    }\n    const eol = this._configurationService.getValue('files.eol', {\n      overrideIdentifier: language\n    });\n    if (eol && typeof eol === 'string' && eol !== 'auto') {\n      return eol;\n    }\n    return platform.OS === 3 /* platform.OperatingSystem.Linux */ || platform.OS === 2 /* platform.OperatingSystem.Macintosh */ ? '\\n' : '\\r\\n';\n  }\n  _shouldRestoreUndoStack() {\n    const result = this._configurationService.getValue('files.restoreUndoStack');\n    if (typeof result === 'boolean') {\n      return result;\n    }\n    return true;\n  }\n  getCreationOptions(languageIdOrSelection, resource, isForSimpleWidget) {\n    const language = typeof languageIdOrSelection === 'string' ? languageIdOrSelection : languageIdOrSelection.languageId;\n    let creationOptions = this._modelCreationOptionsByLanguageAndResource[language + resource];\n    if (!creationOptions) {\n      const editor = this._configurationService.getValue('editor', {\n        overrideIdentifier: language,\n        resource\n      });\n      const eol = this._getEOL(resource, language);\n      creationOptions = ModelService_1._readModelOptions({\n        editor,\n        eol\n      }, isForSimpleWidget);\n      this._modelCreationOptionsByLanguageAndResource[language + resource] = creationOptions;\n    }\n    return creationOptions;\n  }\n  _updateModelOptions(e) {\n    const oldOptionsByLanguageAndResource = this._modelCreationOptionsByLanguageAndResource;\n    this._modelCreationOptionsByLanguageAndResource = Object.create(null);\n    // Update options on all models\n    const keys = Object.keys(this._models);\n    for (let i = 0, len = keys.length; i < len; i++) {\n      const modelId = keys[i];\n      const modelData = this._models[modelId];\n      const language = modelData.model.getLanguageId();\n      const uri = modelData.model.uri;\n      if (e && !e.affectsConfiguration('editor', {\n        overrideIdentifier: language,\n        resource: uri\n      }) && !e.affectsConfiguration('files.eol', {\n        overrideIdentifier: language,\n        resource: uri\n      })) {\n        continue; // perf: skip if this model is not affected by configuration change\n      }\n      const oldOptions = oldOptionsByLanguageAndResource[language + uri];\n      const newOptions = this.getCreationOptions(language, uri, modelData.model.isForSimpleWidget);\n      ModelService_1._setModelOptionsForModel(modelData.model, newOptions, oldOptions);\n    }\n  }\n  static _setModelOptionsForModel(model, newOptions, currentOptions) {\n    if (currentOptions && currentOptions.defaultEOL !== newOptions.defaultEOL && model.getLineCount() === 1) {\n      model.setEOL(newOptions.defaultEOL === 1 /* DefaultEndOfLine.LF */ ? 0 /* EndOfLineSequence.LF */ : 1 /* EndOfLineSequence.CRLF */);\n    }\n    if (currentOptions && currentOptions.detectIndentation === newOptions.detectIndentation && currentOptions.insertSpaces === newOptions.insertSpaces && currentOptions.tabSize === newOptions.tabSize && currentOptions.indentSize === newOptions.indentSize && currentOptions.trimAutoWhitespace === newOptions.trimAutoWhitespace && equals(currentOptions.bracketPairColorizationOptions, newOptions.bracketPairColorizationOptions)) {\n      // Same indent opts, no need to touch the model\n      return;\n    }\n    if (newOptions.detectIndentation) {\n      model.detectIndentation(newOptions.insertSpaces, newOptions.tabSize);\n      model.updateOptions({\n        trimAutoWhitespace: newOptions.trimAutoWhitespace,\n        bracketColorizationOptions: newOptions.bracketPairColorizationOptions\n      });\n    } else {\n      model.updateOptions({\n        insertSpaces: newOptions.insertSpaces,\n        tabSize: newOptions.tabSize,\n        indentSize: newOptions.indentSize,\n        trimAutoWhitespace: newOptions.trimAutoWhitespace,\n        bracketColorizationOptions: newOptions.bracketPairColorizationOptions\n      });\n    }\n  }\n  // --- begin IModelService\n  _insertDisposedModel(disposedModelData) {\n    this._disposedModels.set(MODEL_ID(disposedModelData.uri), disposedModelData);\n    this._disposedModelsHeapSize += disposedModelData.heapSize;\n  }\n  _removeDisposedModel(resource) {\n    const disposedModelData = this._disposedModels.get(MODEL_ID(resource));\n    if (disposedModelData) {\n      this._disposedModelsHeapSize -= disposedModelData.heapSize;\n    }\n    this._disposedModels.delete(MODEL_ID(resource));\n    return disposedModelData;\n  }\n  _ensureDisposedModelsHeapSize(maxModelsHeapSize) {\n    if (this._disposedModelsHeapSize > maxModelsHeapSize) {\n      // we must remove some old undo stack elements to free up some memory\n      const disposedModels = [];\n      this._disposedModels.forEach(entry => {\n        if (!entry.sharesUndoRedoStack) {\n          disposedModels.push(entry);\n        }\n      });\n      disposedModels.sort((a, b) => a.time - b.time);\n      while (disposedModels.length > 0 && this._disposedModelsHeapSize > maxModelsHeapSize) {\n        const disposedModel = disposedModels.shift();\n        this._removeDisposedModel(disposedModel.uri);\n        if (disposedModel.initialUndoRedoSnapshot !== null) {\n          this._undoRedoService.restoreSnapshot(disposedModel.initialUndoRedoSnapshot);\n        }\n      }\n    }\n  }\n  _createModelData(value, languageIdOrSelection, resource, isForSimpleWidget) {\n    // create & save the model\n    const options = this.getCreationOptions(languageIdOrSelection, resource, isForSimpleWidget);\n    const model = this._instantiationService.createInstance(TextModel, value, languageIdOrSelection, options, resource);\n    if (resource && this._disposedModels.has(MODEL_ID(resource))) {\n      const disposedModelData = this._removeDisposedModel(resource);\n      const elements = this._undoRedoService.getElements(resource);\n      const sha1Computer = this._getSHA1Computer();\n      const sha1IsEqual = sha1Computer.canComputeSHA1(model) ? sha1Computer.computeSHA1(model) === disposedModelData.sha1 : false;\n      if (sha1IsEqual || disposedModelData.sharesUndoRedoStack) {\n        for (const element of elements.past) {\n          if (isEditStackElement(element) && element.matchesResource(resource)) {\n            element.setModel(model);\n          }\n        }\n        for (const element of elements.future) {\n          if (isEditStackElement(element) && element.matchesResource(resource)) {\n            element.setModel(model);\n          }\n        }\n        this._undoRedoService.setElementsValidFlag(resource, true, element => isEditStackElement(element) && element.matchesResource(resource));\n        if (sha1IsEqual) {\n          model._overwriteVersionId(disposedModelData.versionId);\n          model._overwriteAlternativeVersionId(disposedModelData.alternativeVersionId);\n          model._overwriteInitialUndoRedoSnapshot(disposedModelData.initialUndoRedoSnapshot);\n        }\n      } else {\n        if (disposedModelData.initialUndoRedoSnapshot !== null) {\n          this._undoRedoService.restoreSnapshot(disposedModelData.initialUndoRedoSnapshot);\n        }\n      }\n    }\n    const modelId = MODEL_ID(model.uri);\n    if (this._models[modelId]) {\n      // There already exists a model with this id => this is a programmer error\n      throw new Error('ModelService: Cannot add model because it already exists!');\n    }\n    const modelData = new ModelData(model, model => this._onWillDispose(model), (model, e) => this._onDidChangeLanguage(model, e));\n    this._models[modelId] = modelData;\n    return modelData;\n  }\n  createModel(value, languageSelection, resource, isForSimpleWidget = false) {\n    let modelData;\n    if (languageSelection) {\n      modelData = this._createModelData(value, languageSelection, resource, isForSimpleWidget);\n    } else {\n      modelData = this._createModelData(value, PLAINTEXT_LANGUAGE_ID, resource, isForSimpleWidget);\n    }\n    this._onModelAdded.fire(modelData.model);\n    return modelData.model;\n  }\n  getModels() {\n    const ret = [];\n    const keys = Object.keys(this._models);\n    for (let i = 0, len = keys.length; i < len; i++) {\n      const modelId = keys[i];\n      ret.push(this._models[modelId].model);\n    }\n    return ret;\n  }\n  getModel(resource) {\n    const modelId = MODEL_ID(resource);\n    const modelData = this._models[modelId];\n    if (!modelData) {\n      return null;\n    }\n    return modelData.model;\n  }\n  // --- end IModelService\n  _schemaShouldMaintainUndoRedoElements(resource) {\n    return resource.scheme === Schemas.file || resource.scheme === Schemas.vscodeRemote || resource.scheme === Schemas.vscodeUserData || resource.scheme === Schemas.vscodeNotebookCell || resource.scheme === 'fake-fs' // for tests\n    ;\n  }\n  _onWillDispose(model) {\n    const modelId = MODEL_ID(model.uri);\n    const modelData = this._models[modelId];\n    const sharesUndoRedoStack = this._undoRedoService.getUriComparisonKey(model.uri) !== model.uri.toString();\n    let maintainUndoRedoStack = false;\n    let heapSize = 0;\n    if (sharesUndoRedoStack || this._shouldRestoreUndoStack() && this._schemaShouldMaintainUndoRedoElements(model.uri)) {\n      const elements = this._undoRedoService.getElements(model.uri);\n      if (elements.past.length > 0 || elements.future.length > 0) {\n        for (const element of elements.past) {\n          if (isEditStackElement(element) && element.matchesResource(model.uri)) {\n            maintainUndoRedoStack = true;\n            heapSize += element.heapSize(model.uri);\n            element.setModel(model.uri); // remove reference from text buffer instance\n          }\n        }\n        for (const element of elements.future) {\n          if (isEditStackElement(element) && element.matchesResource(model.uri)) {\n            maintainUndoRedoStack = true;\n            heapSize += element.heapSize(model.uri);\n            element.setModel(model.uri); // remove reference from text buffer instance\n          }\n        }\n      }\n    }\n    const maxMemory = ModelService_1.MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK;\n    const sha1Computer = this._getSHA1Computer();\n    if (!maintainUndoRedoStack) {\n      if (!sharesUndoRedoStack) {\n        const initialUndoRedoSnapshot = modelData.model.getInitialUndoRedoSnapshot();\n        if (initialUndoRedoSnapshot !== null) {\n          this._undoRedoService.restoreSnapshot(initialUndoRedoSnapshot);\n        }\n      }\n    } else if (!sharesUndoRedoStack && (heapSize > maxMemory || !sha1Computer.canComputeSHA1(model))) {\n      // the undo stack for this file would never fit in the configured memory or the file is very large, so don't bother with it.\n      const initialUndoRedoSnapshot = modelData.model.getInitialUndoRedoSnapshot();\n      if (initialUndoRedoSnapshot !== null) {\n        this._undoRedoService.restoreSnapshot(initialUndoRedoSnapshot);\n      }\n    } else {\n      this._ensureDisposedModelsHeapSize(maxMemory - heapSize);\n      // We only invalidate the elements, but they remain in the undo-redo service.\n      this._undoRedoService.setElementsValidFlag(model.uri, false, element => isEditStackElement(element) && element.matchesResource(model.uri));\n      this._insertDisposedModel(new DisposedModelInfo(model.uri, modelData.model.getInitialUndoRedoSnapshot(), Date.now(), sharesUndoRedoStack, heapSize, sha1Computer.computeSHA1(model), model.getVersionId(), model.getAlternativeVersionId()));\n    }\n    delete this._models[modelId];\n    modelData.dispose();\n    // clean up cache\n    delete this._modelCreationOptionsByLanguageAndResource[model.getLanguageId() + model.uri];\n    this._onModelRemoved.fire(model);\n  }\n  _onDidChangeLanguage(model, e) {\n    const oldLanguageId = e.oldLanguage;\n    const newLanguageId = model.getLanguageId();\n    const oldOptions = this.getCreationOptions(oldLanguageId, model.uri, model.isForSimpleWidget);\n    const newOptions = this.getCreationOptions(newLanguageId, model.uri, model.isForSimpleWidget);\n    ModelService_1._setModelOptionsForModel(model, newOptions, oldOptions);\n    this._onModelModeChanged.fire({\n      model,\n      oldLanguageId: oldLanguageId\n    });\n  }\n  _getSHA1Computer() {\n    return new DefaultModelSHA1Computer();\n  }\n}, ModelService_1 = _ModelService, _ModelService.MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK = 20 * 1024 * 1024, _ModelService);\nModelService = ModelService_1 = __decorate([__param(0, IConfigurationService), __param(1, ITextResourcePropertiesService), __param(2, IUndoRedoService), __param(3, IInstantiationService)], ModelService);\nexport { ModelService };\nexport class DefaultModelSHA1Computer {\n  // takes 200ms to compute a sha1 on a 10MB model on a new machine\n  canComputeSHA1(model) {\n    return model.getValueLength() <= DefaultModelSHA1Computer.MAX_MODEL_SIZE;\n  }\n  computeSHA1(model) {\n    // compute the sha1\n    const shaComputer = new StringSHA1();\n    const snapshot = model.createSnapshot();\n    let text;\n    while (text = snapshot.read()) {\n      shaComputer.update(text);\n    }\n    return shaComputer.digest();\n  }\n}\n_DefaultModelSHA1Computer = DefaultModelSHA1Computer;\n_DefaultModelSHA1Computer.MAX_MODEL_SIZE = 10 * 1024 * 1024;","map":{"version":3,"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","ModelService_1","Emitter","Disposable","DisposableStore","platform","TextModel","EDITOR_MODEL_DEFAULTS","PLAINTEXT_LANGUAGE_ID","ITextResourcePropertiesService","IConfigurationService","IUndoRedoService","StringSHA1","isEditStackElement","Schemas","equals","IInstantiationService","MODEL_ID","resource","toString","ModelData","constructor","model","onWillDispose","onDidChangeLanguage","_modelEventListeners","add","e","dispose","DEFAULT_EOL","isLinux","isMacintosh","DisposedModelInfo","uri","initialUndoRedoSnapshot","time","sharesUndoRedoStack","heapSize","sha1","versionId","alternativeVersionId","ModelService","_ModelService","_configurationService","_resourcePropertiesService","_undoRedoService","_instantiationService","_onModelAdded","_register","onModelAdded","event","_onModelRemoved","onModelRemoved","_onModelModeChanged","onModelLanguageChanged","_modelCreationOptionsByLanguageAndResource","create","_models","_disposedModels","Map","_disposedModelsHeapSize","onDidChangeConfiguration","_updateModelOptions","undefined","_readModelOptions","config","isForSimpleWidget","tabSize","editor","parsedTabSize","parseInt","isNaN","indentSize","parsedIndentSize","Math","max","insertSpaces","Boolean","newDefaultEOL","eol","trimAutoWhitespace","detectIndentation","largeFileOptimizations","bracketPairColorizationOptions","bracketPairColorization","enabled","independentColorPoolPerBracketType","defaultEOL","_getEOL","language","getEOL","getValue","overrideIdentifier","OS","_shouldRestoreUndoStack","result","getCreationOptions","languageIdOrSelection","languageId","creationOptions","oldOptionsByLanguageAndResource","keys","len","modelId","modelData","getLanguageId","affectsConfiguration","oldOptions","newOptions","_setModelOptionsForModel","currentOptions","getLineCount","setEOL","updateOptions","bracketColorizationOptions","_insertDisposedModel","disposedModelData","set","_removeDisposedModel","get","delete","_ensureDisposedModelsHeapSize","maxModelsHeapSize","disposedModels","forEach","entry","push","sort","a","b","disposedModel","shift","restoreSnapshot","_createModelData","value","options","createInstance","has","elements","getElements","sha1Computer","_getSHA1Computer","sha1IsEqual","canComputeSHA1","computeSHA1","element","past","matchesResource","setModel","future","setElementsValidFlag","_overwriteVersionId","_overwriteAlternativeVersionId","_overwriteInitialUndoRedoSnapshot","Error","_onWillDispose","_onDidChangeLanguage","createModel","languageSelection","fire","getModels","ret","getModel","_schemaShouldMaintainUndoRedoElements","scheme","file","vscodeRemote","vscodeUserData","vscodeNotebookCell","getUriComparisonKey","maintainUndoRedoStack","maxMemory","MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK","getInitialUndoRedoSnapshot","Date","now","getVersionId","getAlternativeVersionId","oldLanguageId","oldLanguage","newLanguageId","DefaultModelSHA1Computer","getValueLength","MAX_MODEL_SIZE","shaComputer","snapshot","createSnapshot","text","read","update","digest","_DefaultModelSHA1Computer"],"sources":["P:/IDEA/JudgeX/JudgeX_front/node_modules/monaco-editor/esm/vs/editor/common/services/modelService.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar ModelService_1;\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, DisposableStore } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport { TextModel } from '../model/textModel.js';\nimport { EDITOR_MODEL_DEFAULTS } from '../core/textModelDefaults.js';\nimport { PLAINTEXT_LANGUAGE_ID } from '../languages/modesRegistry.js';\nimport { ITextResourcePropertiesService } from './textResourceConfiguration.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { IUndoRedoService } from '../../../platform/undoRedo/common/undoRedo.js';\nimport { StringSHA1 } from '../../../base/common/hash.js';\nimport { isEditStackElement } from '../model/editStack.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { equals } from '../../../base/common/objects.js';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\nfunction MODEL_ID(resource) {\n    return resource.toString();\n}\nclass ModelData {\n    constructor(model, onWillDispose, onDidChangeLanguage) {\n        this.model = model;\n        this._modelEventListeners = new DisposableStore();\n        this.model = model;\n        this._modelEventListeners.add(model.onWillDispose(() => onWillDispose(model)));\n        this._modelEventListeners.add(model.onDidChangeLanguage((e) => onDidChangeLanguage(model, e)));\n    }\n    dispose() {\n        this._modelEventListeners.dispose();\n    }\n}\nconst DEFAULT_EOL = (platform.isLinux || platform.isMacintosh) ? 1 /* DefaultEndOfLine.LF */ : 2 /* DefaultEndOfLine.CRLF */;\nclass DisposedModelInfo {\n    constructor(uri, initialUndoRedoSnapshot, time, sharesUndoRedoStack, heapSize, sha1, versionId, alternativeVersionId) {\n        this.uri = uri;\n        this.initialUndoRedoSnapshot = initialUndoRedoSnapshot;\n        this.time = time;\n        this.sharesUndoRedoStack = sharesUndoRedoStack;\n        this.heapSize = heapSize;\n        this.sha1 = sha1;\n        this.versionId = versionId;\n        this.alternativeVersionId = alternativeVersionId;\n    }\n}\nlet ModelService = class ModelService extends Disposable {\n    static { ModelService_1 = this; }\n    static { this.MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK = 20 * 1024 * 1024; }\n    constructor(_configurationService, _resourcePropertiesService, _undoRedoService, _instantiationService) {\n        super();\n        this._configurationService = _configurationService;\n        this._resourcePropertiesService = _resourcePropertiesService;\n        this._undoRedoService = _undoRedoService;\n        this._instantiationService = _instantiationService;\n        this._onModelAdded = this._register(new Emitter());\n        this.onModelAdded = this._onModelAdded.event;\n        this._onModelRemoved = this._register(new Emitter());\n        this.onModelRemoved = this._onModelRemoved.event;\n        this._onModelModeChanged = this._register(new Emitter());\n        this.onModelLanguageChanged = this._onModelModeChanged.event;\n        this._modelCreationOptionsByLanguageAndResource = Object.create(null);\n        this._models = {};\n        this._disposedModels = new Map();\n        this._disposedModelsHeapSize = 0;\n        this._register(this._configurationService.onDidChangeConfiguration(e => this._updateModelOptions(e)));\n        this._updateModelOptions(undefined);\n    }\n    static _readModelOptions(config, isForSimpleWidget) {\n        let tabSize = EDITOR_MODEL_DEFAULTS.tabSize;\n        if (config.editor && typeof config.editor.tabSize !== 'undefined') {\n            const parsedTabSize = parseInt(config.editor.tabSize, 10);\n            if (!isNaN(parsedTabSize)) {\n                tabSize = parsedTabSize;\n            }\n            if (tabSize < 1) {\n                tabSize = 1;\n            }\n        }\n        let indentSize = 'tabSize';\n        if (config.editor && typeof config.editor.indentSize !== 'undefined' && config.editor.indentSize !== 'tabSize') {\n            const parsedIndentSize = parseInt(config.editor.indentSize, 10);\n            if (!isNaN(parsedIndentSize)) {\n                indentSize = Math.max(parsedIndentSize, 1);\n            }\n        }\n        let insertSpaces = EDITOR_MODEL_DEFAULTS.insertSpaces;\n        if (config.editor && typeof config.editor.insertSpaces !== 'undefined') {\n            insertSpaces = (config.editor.insertSpaces === 'false' ? false : Boolean(config.editor.insertSpaces));\n        }\n        let newDefaultEOL = DEFAULT_EOL;\n        const eol = config.eol;\n        if (eol === '\\r\\n') {\n            newDefaultEOL = 2 /* DefaultEndOfLine.CRLF */;\n        }\n        else if (eol === '\\n') {\n            newDefaultEOL = 1 /* DefaultEndOfLine.LF */;\n        }\n        let trimAutoWhitespace = EDITOR_MODEL_DEFAULTS.trimAutoWhitespace;\n        if (config.editor && typeof config.editor.trimAutoWhitespace !== 'undefined') {\n            trimAutoWhitespace = (config.editor.trimAutoWhitespace === 'false' ? false : Boolean(config.editor.trimAutoWhitespace));\n        }\n        let detectIndentation = EDITOR_MODEL_DEFAULTS.detectIndentation;\n        if (config.editor && typeof config.editor.detectIndentation !== 'undefined') {\n            detectIndentation = (config.editor.detectIndentation === 'false' ? false : Boolean(config.editor.detectIndentation));\n        }\n        let largeFileOptimizations = EDITOR_MODEL_DEFAULTS.largeFileOptimizations;\n        if (config.editor && typeof config.editor.largeFileOptimizations !== 'undefined') {\n            largeFileOptimizations = (config.editor.largeFileOptimizations === 'false' ? false : Boolean(config.editor.largeFileOptimizations));\n        }\n        let bracketPairColorizationOptions = EDITOR_MODEL_DEFAULTS.bracketPairColorizationOptions;\n        if (config.editor?.bracketPairColorization && typeof config.editor.bracketPairColorization === 'object') {\n            bracketPairColorizationOptions = {\n                enabled: !!config.editor.bracketPairColorization.enabled,\n                independentColorPoolPerBracketType: !!config.editor.bracketPairColorization.independentColorPoolPerBracketType\n            };\n        }\n        return {\n            isForSimpleWidget: isForSimpleWidget,\n            tabSize: tabSize,\n            indentSize: indentSize,\n            insertSpaces: insertSpaces,\n            detectIndentation: detectIndentation,\n            defaultEOL: newDefaultEOL,\n            trimAutoWhitespace: trimAutoWhitespace,\n            largeFileOptimizations: largeFileOptimizations,\n            bracketPairColorizationOptions\n        };\n    }\n    _getEOL(resource, language) {\n        if (resource) {\n            return this._resourcePropertiesService.getEOL(resource, language);\n        }\n        const eol = this._configurationService.getValue('files.eol', { overrideIdentifier: language });\n        if (eol && typeof eol === 'string' && eol !== 'auto') {\n            return eol;\n        }\n        return platform.OS === 3 /* platform.OperatingSystem.Linux */ || platform.OS === 2 /* platform.OperatingSystem.Macintosh */ ? '\\n' : '\\r\\n';\n    }\n    _shouldRestoreUndoStack() {\n        const result = this._configurationService.getValue('files.restoreUndoStack');\n        if (typeof result === 'boolean') {\n            return result;\n        }\n        return true;\n    }\n    getCreationOptions(languageIdOrSelection, resource, isForSimpleWidget) {\n        const language = (typeof languageIdOrSelection === 'string' ? languageIdOrSelection : languageIdOrSelection.languageId);\n        let creationOptions = this._modelCreationOptionsByLanguageAndResource[language + resource];\n        if (!creationOptions) {\n            const editor = this._configurationService.getValue('editor', { overrideIdentifier: language, resource });\n            const eol = this._getEOL(resource, language);\n            creationOptions = ModelService_1._readModelOptions({ editor, eol }, isForSimpleWidget);\n            this._modelCreationOptionsByLanguageAndResource[language + resource] = creationOptions;\n        }\n        return creationOptions;\n    }\n    _updateModelOptions(e) {\n        const oldOptionsByLanguageAndResource = this._modelCreationOptionsByLanguageAndResource;\n        this._modelCreationOptionsByLanguageAndResource = Object.create(null);\n        // Update options on all models\n        const keys = Object.keys(this._models);\n        for (let i = 0, len = keys.length; i < len; i++) {\n            const modelId = keys[i];\n            const modelData = this._models[modelId];\n            const language = modelData.model.getLanguageId();\n            const uri = modelData.model.uri;\n            if (e && !e.affectsConfiguration('editor', { overrideIdentifier: language, resource: uri }) && !e.affectsConfiguration('files.eol', { overrideIdentifier: language, resource: uri })) {\n                continue; // perf: skip if this model is not affected by configuration change\n            }\n            const oldOptions = oldOptionsByLanguageAndResource[language + uri];\n            const newOptions = this.getCreationOptions(language, uri, modelData.model.isForSimpleWidget);\n            ModelService_1._setModelOptionsForModel(modelData.model, newOptions, oldOptions);\n        }\n    }\n    static _setModelOptionsForModel(model, newOptions, currentOptions) {\n        if (currentOptions && currentOptions.defaultEOL !== newOptions.defaultEOL && model.getLineCount() === 1) {\n            model.setEOL(newOptions.defaultEOL === 1 /* DefaultEndOfLine.LF */ ? 0 /* EndOfLineSequence.LF */ : 1 /* EndOfLineSequence.CRLF */);\n        }\n        if (currentOptions\n            && (currentOptions.detectIndentation === newOptions.detectIndentation)\n            && (currentOptions.insertSpaces === newOptions.insertSpaces)\n            && (currentOptions.tabSize === newOptions.tabSize)\n            && (currentOptions.indentSize === newOptions.indentSize)\n            && (currentOptions.trimAutoWhitespace === newOptions.trimAutoWhitespace)\n            && equals(currentOptions.bracketPairColorizationOptions, newOptions.bracketPairColorizationOptions)) {\n            // Same indent opts, no need to touch the model\n            return;\n        }\n        if (newOptions.detectIndentation) {\n            model.detectIndentation(newOptions.insertSpaces, newOptions.tabSize);\n            model.updateOptions({\n                trimAutoWhitespace: newOptions.trimAutoWhitespace,\n                bracketColorizationOptions: newOptions.bracketPairColorizationOptions\n            });\n        }\n        else {\n            model.updateOptions({\n                insertSpaces: newOptions.insertSpaces,\n                tabSize: newOptions.tabSize,\n                indentSize: newOptions.indentSize,\n                trimAutoWhitespace: newOptions.trimAutoWhitespace,\n                bracketColorizationOptions: newOptions.bracketPairColorizationOptions\n            });\n        }\n    }\n    // --- begin IModelService\n    _insertDisposedModel(disposedModelData) {\n        this._disposedModels.set(MODEL_ID(disposedModelData.uri), disposedModelData);\n        this._disposedModelsHeapSize += disposedModelData.heapSize;\n    }\n    _removeDisposedModel(resource) {\n        const disposedModelData = this._disposedModels.get(MODEL_ID(resource));\n        if (disposedModelData) {\n            this._disposedModelsHeapSize -= disposedModelData.heapSize;\n        }\n        this._disposedModels.delete(MODEL_ID(resource));\n        return disposedModelData;\n    }\n    _ensureDisposedModelsHeapSize(maxModelsHeapSize) {\n        if (this._disposedModelsHeapSize > maxModelsHeapSize) {\n            // we must remove some old undo stack elements to free up some memory\n            const disposedModels = [];\n            this._disposedModels.forEach(entry => {\n                if (!entry.sharesUndoRedoStack) {\n                    disposedModels.push(entry);\n                }\n            });\n            disposedModels.sort((a, b) => a.time - b.time);\n            while (disposedModels.length > 0 && this._disposedModelsHeapSize > maxModelsHeapSize) {\n                const disposedModel = disposedModels.shift();\n                this._removeDisposedModel(disposedModel.uri);\n                if (disposedModel.initialUndoRedoSnapshot !== null) {\n                    this._undoRedoService.restoreSnapshot(disposedModel.initialUndoRedoSnapshot);\n                }\n            }\n        }\n    }\n    _createModelData(value, languageIdOrSelection, resource, isForSimpleWidget) {\n        // create & save the model\n        const options = this.getCreationOptions(languageIdOrSelection, resource, isForSimpleWidget);\n        const model = this._instantiationService.createInstance(TextModel, value, languageIdOrSelection, options, resource);\n        if (resource && this._disposedModels.has(MODEL_ID(resource))) {\n            const disposedModelData = this._removeDisposedModel(resource);\n            const elements = this._undoRedoService.getElements(resource);\n            const sha1Computer = this._getSHA1Computer();\n            const sha1IsEqual = (sha1Computer.canComputeSHA1(model)\n                ? sha1Computer.computeSHA1(model) === disposedModelData.sha1\n                : false);\n            if (sha1IsEqual || disposedModelData.sharesUndoRedoStack) {\n                for (const element of elements.past) {\n                    if (isEditStackElement(element) && element.matchesResource(resource)) {\n                        element.setModel(model);\n                    }\n                }\n                for (const element of elements.future) {\n                    if (isEditStackElement(element) && element.matchesResource(resource)) {\n                        element.setModel(model);\n                    }\n                }\n                this._undoRedoService.setElementsValidFlag(resource, true, (element) => (isEditStackElement(element) && element.matchesResource(resource)));\n                if (sha1IsEqual) {\n                    model._overwriteVersionId(disposedModelData.versionId);\n                    model._overwriteAlternativeVersionId(disposedModelData.alternativeVersionId);\n                    model._overwriteInitialUndoRedoSnapshot(disposedModelData.initialUndoRedoSnapshot);\n                }\n            }\n            else {\n                if (disposedModelData.initialUndoRedoSnapshot !== null) {\n                    this._undoRedoService.restoreSnapshot(disposedModelData.initialUndoRedoSnapshot);\n                }\n            }\n        }\n        const modelId = MODEL_ID(model.uri);\n        if (this._models[modelId]) {\n            // There already exists a model with this id => this is a programmer error\n            throw new Error('ModelService: Cannot add model because it already exists!');\n        }\n        const modelData = new ModelData(model, (model) => this._onWillDispose(model), (model, e) => this._onDidChangeLanguage(model, e));\n        this._models[modelId] = modelData;\n        return modelData;\n    }\n    createModel(value, languageSelection, resource, isForSimpleWidget = false) {\n        let modelData;\n        if (languageSelection) {\n            modelData = this._createModelData(value, languageSelection, resource, isForSimpleWidget);\n        }\n        else {\n            modelData = this._createModelData(value, PLAINTEXT_LANGUAGE_ID, resource, isForSimpleWidget);\n        }\n        this._onModelAdded.fire(modelData.model);\n        return modelData.model;\n    }\n    getModels() {\n        const ret = [];\n        const keys = Object.keys(this._models);\n        for (let i = 0, len = keys.length; i < len; i++) {\n            const modelId = keys[i];\n            ret.push(this._models[modelId].model);\n        }\n        return ret;\n    }\n    getModel(resource) {\n        const modelId = MODEL_ID(resource);\n        const modelData = this._models[modelId];\n        if (!modelData) {\n            return null;\n        }\n        return modelData.model;\n    }\n    // --- end IModelService\n    _schemaShouldMaintainUndoRedoElements(resource) {\n        return (resource.scheme === Schemas.file\n            || resource.scheme === Schemas.vscodeRemote\n            || resource.scheme === Schemas.vscodeUserData\n            || resource.scheme === Schemas.vscodeNotebookCell\n            || resource.scheme === 'fake-fs' // for tests\n        );\n    }\n    _onWillDispose(model) {\n        const modelId = MODEL_ID(model.uri);\n        const modelData = this._models[modelId];\n        const sharesUndoRedoStack = (this._undoRedoService.getUriComparisonKey(model.uri) !== model.uri.toString());\n        let maintainUndoRedoStack = false;\n        let heapSize = 0;\n        if (sharesUndoRedoStack || (this._shouldRestoreUndoStack() && this._schemaShouldMaintainUndoRedoElements(model.uri))) {\n            const elements = this._undoRedoService.getElements(model.uri);\n            if (elements.past.length > 0 || elements.future.length > 0) {\n                for (const element of elements.past) {\n                    if (isEditStackElement(element) && element.matchesResource(model.uri)) {\n                        maintainUndoRedoStack = true;\n                        heapSize += element.heapSize(model.uri);\n                        element.setModel(model.uri); // remove reference from text buffer instance\n                    }\n                }\n                for (const element of elements.future) {\n                    if (isEditStackElement(element) && element.matchesResource(model.uri)) {\n                        maintainUndoRedoStack = true;\n                        heapSize += element.heapSize(model.uri);\n                        element.setModel(model.uri); // remove reference from text buffer instance\n                    }\n                }\n            }\n        }\n        const maxMemory = ModelService_1.MAX_MEMORY_FOR_CLOSED_FILES_UNDO_STACK;\n        const sha1Computer = this._getSHA1Computer();\n        if (!maintainUndoRedoStack) {\n            if (!sharesUndoRedoStack) {\n                const initialUndoRedoSnapshot = modelData.model.getInitialUndoRedoSnapshot();\n                if (initialUndoRedoSnapshot !== null) {\n                    this._undoRedoService.restoreSnapshot(initialUndoRedoSnapshot);\n                }\n            }\n        }\n        else if (!sharesUndoRedoStack && (heapSize > maxMemory || !sha1Computer.canComputeSHA1(model))) {\n            // the undo stack for this file would never fit in the configured memory or the file is very large, so don't bother with it.\n            const initialUndoRedoSnapshot = modelData.model.getInitialUndoRedoSnapshot();\n            if (initialUndoRedoSnapshot !== null) {\n                this._undoRedoService.restoreSnapshot(initialUndoRedoSnapshot);\n            }\n        }\n        else {\n            this._ensureDisposedModelsHeapSize(maxMemory - heapSize);\n            // We only invalidate the elements, but they remain in the undo-redo service.\n            this._undoRedoService.setElementsValidFlag(model.uri, false, (element) => (isEditStackElement(element) && element.matchesResource(model.uri)));\n            this._insertDisposedModel(new DisposedModelInfo(model.uri, modelData.model.getInitialUndoRedoSnapshot(), Date.now(), sharesUndoRedoStack, heapSize, sha1Computer.computeSHA1(model), model.getVersionId(), model.getAlternativeVersionId()));\n        }\n        delete this._models[modelId];\n        modelData.dispose();\n        // clean up cache\n        delete this._modelCreationOptionsByLanguageAndResource[model.getLanguageId() + model.uri];\n        this._onModelRemoved.fire(model);\n    }\n    _onDidChangeLanguage(model, e) {\n        const oldLanguageId = e.oldLanguage;\n        const newLanguageId = model.getLanguageId();\n        const oldOptions = this.getCreationOptions(oldLanguageId, model.uri, model.isForSimpleWidget);\n        const newOptions = this.getCreationOptions(newLanguageId, model.uri, model.isForSimpleWidget);\n        ModelService_1._setModelOptionsForModel(model, newOptions, oldOptions);\n        this._onModelModeChanged.fire({ model, oldLanguageId: oldLanguageId });\n    }\n    _getSHA1Computer() {\n        return new DefaultModelSHA1Computer();\n    }\n};\nModelService = ModelService_1 = __decorate([\n    __param(0, IConfigurationService),\n    __param(1, ITextResourcePropertiesService),\n    __param(2, IUndoRedoService),\n    __param(3, IInstantiationService)\n], ModelService);\nexport { ModelService };\nexport class DefaultModelSHA1Computer {\n    static { this.MAX_MODEL_SIZE = 10 * 1024 * 1024; } // takes 200ms to compute a sha1 on a 10MB model on a new machine\n    canComputeSHA1(model) {\n        return (model.getValueLength() <= DefaultModelSHA1Computer.MAX_MODEL_SIZE);\n    }\n    computeSHA1(model) {\n        // compute the sha1\n        const shaComputer = new StringSHA1();\n        const snapshot = model.createSnapshot();\n        let text;\n        while ((text = snapshot.read())) {\n            shaComputer.update(text);\n        }\n        return shaComputer.digest();\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}