{"ast":null,"code":"var _ShowNextInlineEditAction, _ShowPreviousInlineEditAction, _HideInlineEdit;\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { transaction } from '../../../../base/common/observable.js';\nimport { asyncTransaction } from '../../../../base/common/observableInternal/base.js';\nimport { EditorAction } from '../../../browser/editorExtensions.js';\nimport { EmbeddedCodeEditorWidget } from '../../../browser/widget/codeEditor/embeddedCodeEditorWidget.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { inlineEditAcceptId, inlineEditVisible, showNextInlineEditActionId, showPreviousInlineEditActionId } from './consts.js';\nimport { InlineEditsController } from './inlineEditsController.js';\nimport * as nls from '../../../../nls.js';\nimport { MenuId } from '../../../../platform/actions/common/actions.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nfunction labelAndAlias(str) {\n  return {\n    label: str.value,\n    alias: str.original\n  };\n}\nexport class ShowNextInlineEditAction extends EditorAction {\n  constructor() {\n    super({\n      id: ShowNextInlineEditAction.ID,\n      ...labelAndAlias(nls.localize2('action.inlineEdits.showNext', \"Show Next Inline Edit\")),\n      precondition: ContextKeyExpr.and(EditorContextKeys.writable, inlineEditVisible),\n      kbOpts: {\n        weight: 100,\n        primary: 512 /* KeyMod.Alt */ | 94 /* KeyCode.BracketRight */\n      }\n    });\n  }\n  async run(accessor, editor) {\n    const controller = InlineEditsController.get(editor);\n    controller?.model.get()?.next();\n  }\n}\n_ShowNextInlineEditAction = ShowNextInlineEditAction;\n_ShowNextInlineEditAction.ID = showNextInlineEditActionId;\nexport class ShowPreviousInlineEditAction extends EditorAction {\n  constructor() {\n    super({\n      id: ShowPreviousInlineEditAction.ID,\n      ...labelAndAlias(nls.localize2('action.inlineEdits.showPrevious', \"Show Previous Inline Edit\")),\n      precondition: ContextKeyExpr.and(EditorContextKeys.writable, inlineEditVisible),\n      kbOpts: {\n        weight: 100,\n        primary: 512 /* KeyMod.Alt */ | 92 /* KeyCode.BracketLeft */\n      }\n    });\n  }\n  async run(accessor, editor) {\n    const controller = InlineEditsController.get(editor);\n    controller?.model.get()?.previous();\n  }\n}\n_ShowPreviousInlineEditAction = ShowPreviousInlineEditAction;\n_ShowPreviousInlineEditAction.ID = showPreviousInlineEditActionId;\nexport class TriggerInlineEditAction extends EditorAction {\n  constructor() {\n    super({\n      id: 'editor.action.inlineEdits.trigger',\n      ...labelAndAlias(nls.localize2('action.inlineEdits.trigger', \"Trigger Inline Edit\")),\n      precondition: EditorContextKeys.writable\n    });\n  }\n  async run(accessor, editor) {\n    const controller = InlineEditsController.get(editor);\n    await asyncTransaction(async tx => {\n      /** @description triggerExplicitly from command */\n      await controller?.model.get()?.triggerExplicitly(tx);\n    });\n  }\n}\nexport class AcceptInlineEdit extends EditorAction {\n  constructor() {\n    super({\n      id: inlineEditAcceptId,\n      ...labelAndAlias(nls.localize2('action.inlineEdits.accept', \"Accept Inline Edit\")),\n      precondition: inlineEditVisible,\n      menuOpts: {\n        menuId: MenuId.InlineEditsActions,\n        title: nls.localize('inlineEditsActions', \"Accept Inline Edit\"),\n        group: 'primary',\n        order: 1,\n        icon: Codicon.check\n      },\n      kbOpts: {\n        primary: 2048 /* KeyMod.CtrlCmd */ | 10 /* KeyCode.Space */,\n        weight: 20000,\n        kbExpr: inlineEditVisible\n      }\n    });\n  }\n  async run(accessor, editor) {\n    if (editor instanceof EmbeddedCodeEditorWidget) {\n      editor = editor.getParentEditor();\n    }\n    const controller = InlineEditsController.get(editor);\n    if (controller) {\n      controller.model.get()?.accept(controller.editor);\n      controller.editor.focus();\n    }\n  }\n}\n/*\nTODO@hediet\nexport class PinInlineEdit extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.inlineEdits.pin',\n            ...labelAndAlias(nls.localize2('action.inlineEdits.pin', \"Pin Inline Edit\")),\n            precondition: undefined,\n            kbOpts: {\n                primary: KeyMod.Shift | KeyCode.Space,\n                weight: 20000,\n            }\n        });\n    }\n\n    public async run(accessor: ServicesAccessor | undefined, editor: ICodeEditor): Promise<void> {\n        const controller = InlineEditsController.get(editor);\n        if (controller) {\n            controller.model.get()?.togglePin();\n        }\n    }\n}\n\nMenuRegistry.appendMenuItem(MenuId.InlineEditsActions, {\n    command: {\n        id: 'editor.action.inlineEdits.pin',\n        title: nls.localize('Pin', \"Pin\"),\n        icon: Codicon.pin,\n    },\n    group: 'primary',\n    order: 1,\n    when: isPinnedContextKey.negate(),\n});\n\nMenuRegistry.appendMenuItem(MenuId.InlineEditsActions, {\n    command: {\n        id: 'editor.action.inlineEdits.unpin',\n        title: nls.localize('Unpin', \"Unpin\"),\n        icon: Codicon.pinned,\n    },\n    group: 'primary',\n    order: 1,\n    when: isPinnedContextKey,\n});*/\nexport class HideInlineEdit extends EditorAction {\n  constructor() {\n    super({\n      id: HideInlineEdit.ID,\n      ...labelAndAlias(nls.localize2('action.inlineEdits.hide', \"Hide Inline Edit\")),\n      precondition: inlineEditVisible,\n      kbOpts: {\n        weight: 100,\n        primary: 9 /* KeyCode.Escape */\n      }\n    });\n  }\n  async run(accessor, editor) {\n    const controller = InlineEditsController.get(editor);\n    transaction(tx => {\n      controller?.model.get()?.stop(tx);\n    });\n  }\n}\n_HideInlineEdit = HideInlineEdit;\n_HideInlineEdit.ID = 'editor.action.inlineEdits.hide';","map":{"version":3,"names":["Codicon","transaction","asyncTransaction","EditorAction","EmbeddedCodeEditorWidget","EditorContextKeys","inlineEditAcceptId","inlineEditVisible","showNextInlineEditActionId","showPreviousInlineEditActionId","InlineEditsController","nls","MenuId","ContextKeyExpr","labelAndAlias","str","label","value","alias","original","ShowNextInlineEditAction","constructor","id","ID","localize2","precondition","and","writable","kbOpts","weight","primary","run","accessor","editor","controller","get","model","next","_ShowNextInlineEditAction","ShowPreviousInlineEditAction","previous","_ShowPreviousInlineEditAction","TriggerInlineEditAction","tx","triggerExplicitly","AcceptInlineEdit","menuOpts","menuId","InlineEditsActions","title","localize","group","order","icon","check","kbExpr","getParentEditor","accept","focus","HideInlineEdit","stop","_HideInlineEdit"],"sources":["P:/WebStorm/judgex_front/node_modules/monaco-editor/esm/vs/editor/contrib/inlineEdits/browser/commands.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Codicon } from '../../../../base/common/codicons.js';\nimport { transaction } from '../../../../base/common/observable.js';\nimport { asyncTransaction } from '../../../../base/common/observableInternal/base.js';\nimport { EditorAction } from '../../../browser/editorExtensions.js';\nimport { EmbeddedCodeEditorWidget } from '../../../browser/widget/codeEditor/embeddedCodeEditorWidget.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { inlineEditAcceptId, inlineEditVisible, showNextInlineEditActionId, showPreviousInlineEditActionId } from './consts.js';\nimport { InlineEditsController } from './inlineEditsController.js';\nimport * as nls from '../../../../nls.js';\nimport { MenuId } from '../../../../platform/actions/common/actions.js';\nimport { ContextKeyExpr } from '../../../../platform/contextkey/common/contextkey.js';\nfunction labelAndAlias(str) {\n    return {\n        label: str.value,\n        alias: str.original,\n    };\n}\nexport class ShowNextInlineEditAction extends EditorAction {\n    static { this.ID = showNextInlineEditActionId; }\n    constructor() {\n        super({\n            id: ShowNextInlineEditAction.ID,\n            ...labelAndAlias(nls.localize2('action.inlineEdits.showNext', \"Show Next Inline Edit\")),\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, inlineEditVisible),\n            kbOpts: {\n                weight: 100,\n                primary: 512 /* KeyMod.Alt */ | 94 /* KeyCode.BracketRight */,\n            },\n        });\n    }\n    async run(accessor, editor) {\n        const controller = InlineEditsController.get(editor);\n        controller?.model.get()?.next();\n    }\n}\nexport class ShowPreviousInlineEditAction extends EditorAction {\n    static { this.ID = showPreviousInlineEditActionId; }\n    constructor() {\n        super({\n            id: ShowPreviousInlineEditAction.ID,\n            ...labelAndAlias(nls.localize2('action.inlineEdits.showPrevious', \"Show Previous Inline Edit\")),\n            precondition: ContextKeyExpr.and(EditorContextKeys.writable, inlineEditVisible),\n            kbOpts: {\n                weight: 100,\n                primary: 512 /* KeyMod.Alt */ | 92 /* KeyCode.BracketLeft */,\n            },\n        });\n    }\n    async run(accessor, editor) {\n        const controller = InlineEditsController.get(editor);\n        controller?.model.get()?.previous();\n    }\n}\nexport class TriggerInlineEditAction extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.inlineEdits.trigger',\n            ...labelAndAlias(nls.localize2('action.inlineEdits.trigger', \"Trigger Inline Edit\")),\n            precondition: EditorContextKeys.writable\n        });\n    }\n    async run(accessor, editor) {\n        const controller = InlineEditsController.get(editor);\n        await asyncTransaction(async (tx) => {\n            /** @description triggerExplicitly from command */\n            await controller?.model.get()?.triggerExplicitly(tx);\n        });\n    }\n}\nexport class AcceptInlineEdit extends EditorAction {\n    constructor() {\n        super({\n            id: inlineEditAcceptId,\n            ...labelAndAlias(nls.localize2('action.inlineEdits.accept', \"Accept Inline Edit\")),\n            precondition: inlineEditVisible,\n            menuOpts: {\n                menuId: MenuId.InlineEditsActions,\n                title: nls.localize('inlineEditsActions', \"Accept Inline Edit\"),\n                group: 'primary',\n                order: 1,\n                icon: Codicon.check,\n            },\n            kbOpts: {\n                primary: 2048 /* KeyMod.CtrlCmd */ | 10 /* KeyCode.Space */,\n                weight: 20000,\n                kbExpr: inlineEditVisible,\n            }\n        });\n    }\n    async run(accessor, editor) {\n        if (editor instanceof EmbeddedCodeEditorWidget) {\n            editor = editor.getParentEditor();\n        }\n        const controller = InlineEditsController.get(editor);\n        if (controller) {\n            controller.model.get()?.accept(controller.editor);\n            controller.editor.focus();\n        }\n    }\n}\n/*\nTODO@hediet\nexport class PinInlineEdit extends EditorAction {\n    constructor() {\n        super({\n            id: 'editor.action.inlineEdits.pin',\n            ...labelAndAlias(nls.localize2('action.inlineEdits.pin', \"Pin Inline Edit\")),\n            precondition: undefined,\n            kbOpts: {\n                primary: KeyMod.Shift | KeyCode.Space,\n                weight: 20000,\n            }\n        });\n    }\n\n    public async run(accessor: ServicesAccessor | undefined, editor: ICodeEditor): Promise<void> {\n        const controller = InlineEditsController.get(editor);\n        if (controller) {\n            controller.model.get()?.togglePin();\n        }\n    }\n}\n\nMenuRegistry.appendMenuItem(MenuId.InlineEditsActions, {\n    command: {\n        id: 'editor.action.inlineEdits.pin',\n        title: nls.localize('Pin', \"Pin\"),\n        icon: Codicon.pin,\n    },\n    group: 'primary',\n    order: 1,\n    when: isPinnedContextKey.negate(),\n});\n\nMenuRegistry.appendMenuItem(MenuId.InlineEditsActions, {\n    command: {\n        id: 'editor.action.inlineEdits.unpin',\n        title: nls.localize('Unpin', \"Unpin\"),\n        icon: Codicon.pinned,\n    },\n    group: 'primary',\n    order: 1,\n    when: isPinnedContextKey,\n});*/\nexport class HideInlineEdit extends EditorAction {\n    static { this.ID = 'editor.action.inlineEdits.hide'; }\n    constructor() {\n        super({\n            id: HideInlineEdit.ID,\n            ...labelAndAlias(nls.localize2('action.inlineEdits.hide', \"Hide Inline Edit\")),\n            precondition: inlineEditVisible,\n            kbOpts: {\n                weight: 100,\n                primary: 9 /* KeyCode.Escape */,\n            }\n        });\n    }\n    async run(accessor, editor) {\n        const controller = InlineEditsController.get(editor);\n        transaction(tx => {\n            controller?.model.get()?.stop(tx);\n        });\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}