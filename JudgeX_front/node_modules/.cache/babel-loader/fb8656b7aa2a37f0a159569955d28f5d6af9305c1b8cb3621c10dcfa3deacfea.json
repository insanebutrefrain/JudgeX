{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n// eslint-disable-next-line local/code-import-patterns\nimport { getNLSLanguage, getNLSMessages } from './nls.messages.js';\n// eslint-disable-next-line local/code-import-patterns\nexport { getNLSLanguage, getNLSMessages } from './nls.messages.js';\nconst isPseudo = getNLSLanguage() === 'pseudo' || typeof document !== 'undefined' && document.location && document.location.hash.indexOf('pseudo=true') >= 0;\nfunction _format(message, args) {\n  let result;\n  if (args.length === 0) {\n    result = message;\n  } else {\n    result = message.replace(/\\{(\\d+)\\}/g, (match, rest) => {\n      const index = rest[0];\n      const arg = args[index];\n      let result = match;\n      if (typeof arg === 'string') {\n        result = arg;\n      } else if (typeof arg === 'number' || typeof arg === 'boolean' || arg === void 0 || arg === null) {\n        result = String(arg);\n      }\n      return result;\n    });\n  }\n  if (isPseudo) {\n    // FF3B and FF3D is the Unicode zenkaku representation for [ and ]\n    result = '\\uFF3B' + result.replace(/[aouei]/g, '$&$&') + '\\uFF3D';\n  }\n  return result;\n}\n/**\n * @skipMangle\n */\nexport function localize(data /* | number when built */, message /* | null when built */, ...args) {\n  if (typeof data === 'number') {\n    return _format(lookupMessage(data, message), args);\n  }\n  return _format(message, args);\n}\n/**\n * Only used when built: Looks up the message in the global NLS table.\n * This table is being made available as a global through bootstrapping\n * depending on the target context.\n */\nfunction lookupMessage(index, fallback) {\n  const message = getNLSMessages()?.[index];\n  if (typeof message !== 'string') {\n    if (typeof fallback === 'string') {\n      return fallback;\n    }\n    throw new Error(`!!! NLS MISSING: ${index} !!!`);\n  }\n  return message;\n}\n/**\n * @skipMangle\n */\nexport function localize2(data /* | number when built */, originalMessage, ...args) {\n  let message;\n  if (typeof data === 'number') {\n    message = lookupMessage(data, originalMessage);\n  } else {\n    message = originalMessage;\n  }\n  const value = _format(message, args);\n  return {\n    value,\n    original: originalMessage === message ? value : _format(originalMessage, args)\n  };\n}","map":{"version":3,"names":["getNLSLanguage","getNLSMessages","isPseudo","document","location","hash","indexOf","_format","message","args","result","length","replace","match","rest","index","arg","String","localize","data","lookupMessage","fallback","Error","localize2","originalMessage","value","original"],"sources":["P:/IDEA/JudgeX/JudgeX_front/node_modules/monaco-editor/esm/vs/nls.js"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n// eslint-disable-next-line local/code-import-patterns\nimport { getNLSLanguage, getNLSMessages } from './nls.messages.js';\n// eslint-disable-next-line local/code-import-patterns\nexport { getNLSLanguage, getNLSMessages } from './nls.messages.js';\nconst isPseudo = getNLSLanguage() === 'pseudo' || (typeof document !== 'undefined' && document.location && document.location.hash.indexOf('pseudo=true') >= 0);\nfunction _format(message, args) {\n    let result;\n    if (args.length === 0) {\n        result = message;\n    }\n    else {\n        result = message.replace(/\\{(\\d+)\\}/g, (match, rest) => {\n            const index = rest[0];\n            const arg = args[index];\n            let result = match;\n            if (typeof arg === 'string') {\n                result = arg;\n            }\n            else if (typeof arg === 'number' || typeof arg === 'boolean' || arg === void 0 || arg === null) {\n                result = String(arg);\n            }\n            return result;\n        });\n    }\n    if (isPseudo) {\n        // FF3B and FF3D is the Unicode zenkaku representation for [ and ]\n        result = '\\uFF3B' + result.replace(/[aouei]/g, '$&$&') + '\\uFF3D';\n    }\n    return result;\n}\n/**\n * @skipMangle\n */\nexport function localize(data /* | number when built */, message /* | null when built */, ...args) {\n    if (typeof data === 'number') {\n        return _format(lookupMessage(data, message), args);\n    }\n    return _format(message, args);\n}\n/**\n * Only used when built: Looks up the message in the global NLS table.\n * This table is being made available as a global through bootstrapping\n * depending on the target context.\n */\nfunction lookupMessage(index, fallback) {\n    const message = getNLSMessages()?.[index];\n    if (typeof message !== 'string') {\n        if (typeof fallback === 'string') {\n            return fallback;\n        }\n        throw new Error(`!!! NLS MISSING: ${index} !!!`);\n    }\n    return message;\n}\n/**\n * @skipMangle\n */\nexport function localize2(data /* | number when built */, originalMessage, ...args) {\n    let message;\n    if (typeof data === 'number') {\n        message = lookupMessage(data, originalMessage);\n    }\n    else {\n        message = originalMessage;\n    }\n    const value = _format(message, args);\n    return {\n        value,\n        original: originalMessage === message ? value : _format(originalMessage, args)\n    };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,cAAc,EAAEC,cAAc,QAAQ,mBAAmB;AAClE;AACA,SAASD,cAAc,EAAEC,cAAc,QAAQ,mBAAmB;AAClE,MAAMC,QAAQ,GAAGF,cAAc,CAAC,CAAC,KAAK,QAAQ,IAAK,OAAOG,QAAQ,KAAK,WAAW,IAAIA,QAAQ,CAACC,QAAQ,IAAID,QAAQ,CAACC,QAAQ,CAACC,IAAI,CAACC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAE;AAC9J,SAASC,OAAOA,CAACC,OAAO,EAAEC,IAAI,EAAE;EAC5B,IAAIC,MAAM;EACV,IAAID,IAAI,CAACE,MAAM,KAAK,CAAC,EAAE;IACnBD,MAAM,GAAGF,OAAO;EACpB,CAAC,MACI;IACDE,MAAM,GAAGF,OAAO,CAACI,OAAO,CAAC,YAAY,EAAE,CAACC,KAAK,EAAEC,IAAI,KAAK;MACpD,MAAMC,KAAK,GAAGD,IAAI,CAAC,CAAC,CAAC;MACrB,MAAME,GAAG,GAAGP,IAAI,CAACM,KAAK,CAAC;MACvB,IAAIL,MAAM,GAAGG,KAAK;MAClB,IAAI,OAAOG,GAAG,KAAK,QAAQ,EAAE;QACzBN,MAAM,GAAGM,GAAG;MAChB,CAAC,MACI,IAAI,OAAOA,GAAG,KAAK,QAAQ,IAAI,OAAOA,GAAG,KAAK,SAAS,IAAIA,GAAG,KAAK,KAAK,CAAC,IAAIA,GAAG,KAAK,IAAI,EAAE;QAC5FN,MAAM,GAAGO,MAAM,CAACD,GAAG,CAAC;MACxB;MACA,OAAON,MAAM;IACjB,CAAC,CAAC;EACN;EACA,IAAIR,QAAQ,EAAE;IACV;IACAQ,MAAM,GAAG,QAAQ,GAAGA,MAAM,CAACE,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC,GAAG,QAAQ;EACrE;EACA,OAAOF,MAAM;AACjB;AACA;AACA;AACA;AACA,OAAO,SAASQ,QAAQA,CAACC,IAAI,CAAC,2BAA2BX,OAAO,CAAC,yBAAyB,GAAGC,IAAI,EAAE;EAC/F,IAAI,OAAOU,IAAI,KAAK,QAAQ,EAAE;IAC1B,OAAOZ,OAAO,CAACa,aAAa,CAACD,IAAI,EAAEX,OAAO,CAAC,EAAEC,IAAI,CAAC;EACtD;EACA,OAAOF,OAAO,CAACC,OAAO,EAAEC,IAAI,CAAC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,SAASW,aAAaA,CAACL,KAAK,EAAEM,QAAQ,EAAE;EACpC,MAAMb,OAAO,GAAGP,cAAc,CAAC,CAAC,GAAGc,KAAK,CAAC;EACzC,IAAI,OAAOP,OAAO,KAAK,QAAQ,EAAE;IAC7B,IAAI,OAAOa,QAAQ,KAAK,QAAQ,EAAE;MAC9B,OAAOA,QAAQ;IACnB;IACA,MAAM,IAAIC,KAAK,CAAC,oBAAoBP,KAAK,MAAM,CAAC;EACpD;EACA,OAAOP,OAAO;AAClB;AACA;AACA;AACA;AACA,OAAO,SAASe,SAASA,CAACJ,IAAI,CAAC,2BAA2BK,eAAe,EAAE,GAAGf,IAAI,EAAE;EAChF,IAAID,OAAO;EACX,IAAI,OAAOW,IAAI,KAAK,QAAQ,EAAE;IAC1BX,OAAO,GAAGY,aAAa,CAACD,IAAI,EAAEK,eAAe,CAAC;EAClD,CAAC,MACI;IACDhB,OAAO,GAAGgB,eAAe;EAC7B;EACA,MAAMC,KAAK,GAAGlB,OAAO,CAACC,OAAO,EAAEC,IAAI,CAAC;EACpC,OAAO;IACHgB,KAAK;IACLC,QAAQ,EAAEF,eAAe,KAAKhB,OAAO,GAAGiB,KAAK,GAAGlB,OAAO,CAACiB,eAAe,EAAEf,IAAI;EACjF,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}